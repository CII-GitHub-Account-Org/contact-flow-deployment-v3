"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AggregatedUtterancesFilterName: () => AggregatedUtterancesFilterName,
  AggregatedUtterancesFilterOperator: () => AggregatedUtterancesFilterOperator,
  AggregatedUtterancesSortAttribute: () => AggregatedUtterancesSortAttribute,
  AnalyticsBinByName: () => AnalyticsBinByName,
  AnalyticsCommonFilterName: () => AnalyticsCommonFilterName,
  AnalyticsFilterOperator: () => AnalyticsFilterOperator,
  AnalyticsIntentField: () => AnalyticsIntentField,
  AnalyticsIntentFilterName: () => AnalyticsIntentFilterName,
  AnalyticsIntentMetricName: () => AnalyticsIntentMetricName,
  AnalyticsIntentStageField: () => AnalyticsIntentStageField,
  AnalyticsIntentStageFilterName: () => AnalyticsIntentStageFilterName,
  AnalyticsIntentStageMetricName: () => AnalyticsIntentStageMetricName,
  AnalyticsInterval: () => AnalyticsInterval,
  AnalyticsMetricStatistic: () => AnalyticsMetricStatistic,
  AnalyticsModality: () => AnalyticsModality,
  AnalyticsNodeType: () => AnalyticsNodeType,
  AnalyticsSessionField: () => AnalyticsSessionField,
  AnalyticsSessionFilterName: () => AnalyticsSessionFilterName,
  AnalyticsSessionMetricName: () => AnalyticsSessionMetricName,
  AnalyticsSessionSortByName: () => AnalyticsSessionSortByName,
  AnalyticsSortOrder: () => AnalyticsSortOrder,
  AnalyticsUtteranceAttributeName: () => AnalyticsUtteranceAttributeName,
  AnalyticsUtteranceField: () => AnalyticsUtteranceField,
  AnalyticsUtteranceFilterName: () => AnalyticsUtteranceFilterName,
  AnalyticsUtteranceMetricName: () => AnalyticsUtteranceMetricName,
  AnalyticsUtteranceSortByName: () => AnalyticsUtteranceSortByName,
  AssociatedTranscriptFilterName: () => AssociatedTranscriptFilterName,
  AudioRecognitionStrategy: () => AudioRecognitionStrategy,
  BatchCreateCustomVocabularyItemCommand: () => BatchCreateCustomVocabularyItemCommand,
  BatchDeleteCustomVocabularyItemCommand: () => BatchDeleteCustomVocabularyItemCommand,
  BatchUpdateCustomVocabularyItemCommand: () => BatchUpdateCustomVocabularyItemCommand,
  BotAliasReplicationStatus: () => BotAliasReplicationStatus,
  BotAliasStatus: () => BotAliasStatus,
  BotFilterName: () => BotFilterName,
  BotFilterOperator: () => BotFilterOperator,
  BotLocaleFilterName: () => BotLocaleFilterName,
  BotLocaleFilterOperator: () => BotLocaleFilterOperator,
  BotLocaleSortAttribute: () => BotLocaleSortAttribute,
  BotLocaleStatus: () => BotLocaleStatus,
  BotRecommendationStatus: () => BotRecommendationStatus,
  BotReplicaStatus: () => BotReplicaStatus,
  BotSortAttribute: () => BotSortAttribute,
  BotStatus: () => BotStatus,
  BotType: () => BotType,
  BotVersionReplicaSortAttribute: () => BotVersionReplicaSortAttribute,
  BotVersionReplicationStatus: () => BotVersionReplicationStatus,
  BotVersionSortAttribute: () => BotVersionSortAttribute,
  BuildBotLocaleCommand: () => BuildBotLocaleCommand,
  BuiltInIntentSortAttribute: () => BuiltInIntentSortAttribute,
  BuiltInSlotTypeSortAttribute: () => BuiltInSlotTypeSortAttribute,
  ConflictException: () => ConflictException,
  ConversationEndState: () => ConversationEndState,
  ConversationLogsInputModeFilter: () => ConversationLogsInputModeFilter,
  CreateBotAliasCommand: () => CreateBotAliasCommand,
  CreateBotCommand: () => CreateBotCommand,
  CreateBotLocaleCommand: () => CreateBotLocaleCommand,
  CreateBotReplicaCommand: () => CreateBotReplicaCommand,
  CreateBotVersionCommand: () => CreateBotVersionCommand,
  CreateExportCommand: () => CreateExportCommand,
  CreateExportRequestFilterSensitiveLog: () => CreateExportRequestFilterSensitiveLog,
  CreateIntentCommand: () => CreateIntentCommand,
  CreateResourcePolicyCommand: () => CreateResourcePolicyCommand,
  CreateResourcePolicyStatementCommand: () => CreateResourcePolicyStatementCommand,
  CreateSlotCommand: () => CreateSlotCommand,
  CreateSlotTypeCommand: () => CreateSlotTypeCommand,
  CreateTestSetDiscrepancyReportCommand: () => CreateTestSetDiscrepancyReportCommand,
  CreateUploadUrlCommand: () => CreateUploadUrlCommand,
  CustomVocabularyStatus: () => CustomVocabularyStatus,
  DeleteBotAliasCommand: () => DeleteBotAliasCommand,
  DeleteBotCommand: () => DeleteBotCommand,
  DeleteBotLocaleCommand: () => DeleteBotLocaleCommand,
  DeleteBotReplicaCommand: () => DeleteBotReplicaCommand,
  DeleteBotVersionCommand: () => DeleteBotVersionCommand,
  DeleteCustomVocabularyCommand: () => DeleteCustomVocabularyCommand,
  DeleteExportCommand: () => DeleteExportCommand,
  DeleteImportCommand: () => DeleteImportCommand,
  DeleteIntentCommand: () => DeleteIntentCommand,
  DeleteResourcePolicyCommand: () => DeleteResourcePolicyCommand,
  DeleteResourcePolicyStatementCommand: () => DeleteResourcePolicyStatementCommand,
  DeleteSlotCommand: () => DeleteSlotCommand,
  DeleteSlotTypeCommand: () => DeleteSlotTypeCommand,
  DeleteTestSetCommand: () => DeleteTestSetCommand,
  DeleteUtterancesCommand: () => DeleteUtterancesCommand,
  DescribeBotAliasCommand: () => DescribeBotAliasCommand,
  DescribeBotCommand: () => DescribeBotCommand,
  DescribeBotLocaleCommand: () => DescribeBotLocaleCommand,
  DescribeBotRecommendationCommand: () => DescribeBotRecommendationCommand,
  DescribeBotRecommendationResponseFilterSensitiveLog: () => DescribeBotRecommendationResponseFilterSensitiveLog,
  DescribeBotReplicaCommand: () => DescribeBotReplicaCommand,
  DescribeBotResourceGenerationCommand: () => DescribeBotResourceGenerationCommand,
  DescribeBotVersionCommand: () => DescribeBotVersionCommand,
  DescribeCustomVocabularyMetadataCommand: () => DescribeCustomVocabularyMetadataCommand,
  DescribeExportCommand: () => DescribeExportCommand,
  DescribeImportCommand: () => DescribeImportCommand,
  DescribeIntentCommand: () => DescribeIntentCommand,
  DescribeResourcePolicyCommand: () => DescribeResourcePolicyCommand,
  DescribeSlotCommand: () => DescribeSlotCommand,
  DescribeSlotTypeCommand: () => DescribeSlotTypeCommand,
  DescribeTestExecutionCommand: () => DescribeTestExecutionCommand,
  DescribeTestSetCommand: () => DescribeTestSetCommand,
  DescribeTestSetDiscrepancyReportCommand: () => DescribeTestSetDiscrepancyReportCommand,
  DescribeTestSetGenerationCommand: () => DescribeTestSetGenerationCommand,
  DialogActionType: () => DialogActionType,
  Effect: () => Effect,
  EncryptionSettingFilterSensitiveLog: () => EncryptionSettingFilterSensitiveLog,
  ErrorCode: () => ErrorCode,
  ExportFilterName: () => ExportFilterName,
  ExportFilterOperator: () => ExportFilterOperator,
  ExportSortAttribute: () => ExportSortAttribute,
  ExportStatus: () => ExportStatus,
  GenerateBotElementCommand: () => GenerateBotElementCommand,
  GenerationSortByAttribute: () => GenerationSortByAttribute,
  GenerationStatus: () => GenerationStatus,
  GetTestExecutionArtifactsUrlCommand: () => GetTestExecutionArtifactsUrlCommand,
  ImportExportFileFormat: () => ImportExportFileFormat,
  ImportFilterName: () => ImportFilterName,
  ImportFilterOperator: () => ImportFilterOperator,
  ImportResourceType: () => ImportResourceType,
  ImportSortAttribute: () => ImportSortAttribute,
  ImportStatus: () => ImportStatus,
  IntentFilterName: () => IntentFilterName,
  IntentFilterOperator: () => IntentFilterOperator,
  IntentSortAttribute: () => IntentSortAttribute,
  IntentState: () => IntentState,
  InternalServerException: () => InternalServerException,
  LexModelsV2: () => LexModelsV2,
  LexModelsV2Client: () => LexModelsV2Client,
  LexModelsV2ServiceException: () => LexModelsV2ServiceException,
  ListAggregatedUtterancesCommand: () => ListAggregatedUtterancesCommand,
  ListBotAliasReplicasCommand: () => ListBotAliasReplicasCommand,
  ListBotAliasesCommand: () => ListBotAliasesCommand,
  ListBotLocalesCommand: () => ListBotLocalesCommand,
  ListBotRecommendationsCommand: () => ListBotRecommendationsCommand,
  ListBotReplicasCommand: () => ListBotReplicasCommand,
  ListBotResourceGenerationsCommand: () => ListBotResourceGenerationsCommand,
  ListBotVersionReplicasCommand: () => ListBotVersionReplicasCommand,
  ListBotVersionsCommand: () => ListBotVersionsCommand,
  ListBotsCommand: () => ListBotsCommand,
  ListBuiltInIntentsCommand: () => ListBuiltInIntentsCommand,
  ListBuiltInSlotTypesCommand: () => ListBuiltInSlotTypesCommand,
  ListCustomVocabularyItemsCommand: () => ListCustomVocabularyItemsCommand,
  ListExportsCommand: () => ListExportsCommand,
  ListImportsCommand: () => ListImportsCommand,
  ListIntentMetricsCommand: () => ListIntentMetricsCommand,
  ListIntentPathsCommand: () => ListIntentPathsCommand,
  ListIntentStageMetricsCommand: () => ListIntentStageMetricsCommand,
  ListIntentsCommand: () => ListIntentsCommand,
  ListRecommendedIntentsCommand: () => ListRecommendedIntentsCommand,
  ListSessionAnalyticsDataCommand: () => ListSessionAnalyticsDataCommand,
  ListSessionMetricsCommand: () => ListSessionMetricsCommand,
  ListSlotTypesCommand: () => ListSlotTypesCommand,
  ListSlotsCommand: () => ListSlotsCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  ListTestExecutionResultItemsCommand: () => ListTestExecutionResultItemsCommand,
  ListTestExecutionsCommand: () => ListTestExecutionsCommand,
  ListTestSetRecordsCommand: () => ListTestSetRecordsCommand,
  ListTestSetsCommand: () => ListTestSetsCommand,
  ListUtteranceAnalyticsDataCommand: () => ListUtteranceAnalyticsDataCommand,
  ListUtteranceMetricsCommand: () => ListUtteranceMetricsCommand,
  MergeStrategy: () => MergeStrategy,
  MessageSelectionStrategy: () => MessageSelectionStrategy,
  ObfuscationSettingType: () => ObfuscationSettingType,
  PreconditionFailedException: () => PreconditionFailedException,
  PromptAttempt: () => PromptAttempt,
  ResourceNotFoundException: () => ResourceNotFoundException,
  SearchAssociatedTranscriptsCommand: () => SearchAssociatedTranscriptsCommand,
  SearchOrder: () => SearchOrder,
  ServiceQuotaExceededException: () => ServiceQuotaExceededException,
  SlotConstraint: () => SlotConstraint,
  SlotFilterName: () => SlotFilterName,
  SlotFilterOperator: () => SlotFilterOperator,
  SlotResolutionStrategy: () => SlotResolutionStrategy,
  SlotShape: () => SlotShape,
  SlotSortAttribute: () => SlotSortAttribute,
  SlotTypeCategory: () => SlotTypeCategory,
  SlotTypeFilterName: () => SlotTypeFilterName,
  SlotTypeFilterOperator: () => SlotTypeFilterOperator,
  SlotTypeSortAttribute: () => SlotTypeSortAttribute,
  SlotValueResolutionStrategy: () => SlotValueResolutionStrategy,
  SortOrder: () => SortOrder,
  StartBotRecommendationCommand: () => StartBotRecommendationCommand,
  StartBotRecommendationRequestFilterSensitiveLog: () => StartBotRecommendationRequestFilterSensitiveLog,
  StartBotRecommendationResponseFilterSensitiveLog: () => StartBotRecommendationResponseFilterSensitiveLog,
  StartBotResourceGenerationCommand: () => StartBotResourceGenerationCommand,
  StartImportCommand: () => StartImportCommand,
  StartImportRequestFilterSensitiveLog: () => StartImportRequestFilterSensitiveLog,
  StartTestExecutionCommand: () => StartTestExecutionCommand,
  StartTestSetGenerationCommand: () => StartTestSetGenerationCommand,
  StopBotRecommendationCommand: () => StopBotRecommendationCommand,
  TagResourceCommand: () => TagResourceCommand,
  TestExecutionApiMode: () => TestExecutionApiMode,
  TestExecutionModality: () => TestExecutionModality,
  TestExecutionSortAttribute: () => TestExecutionSortAttribute,
  TestExecutionStatus: () => TestExecutionStatus,
  TestResultMatchStatus: () => TestResultMatchStatus,
  TestResultTypeFilter: () => TestResultTypeFilter,
  TestSetDiscrepancyReportStatus: () => TestSetDiscrepancyReportStatus,
  TestSetGenerationStatus: () => TestSetGenerationStatus,
  TestSetModality: () => TestSetModality,
  TestSetSortAttribute: () => TestSetSortAttribute,
  TestSetStatus: () => TestSetStatus,
  ThrottlingException: () => ThrottlingException,
  TimeDimension: () => TimeDimension,
  TranscriptFormat: () => TranscriptFormat,
  UntagResourceCommand: () => UntagResourceCommand,
  UpdateBotAliasCommand: () => UpdateBotAliasCommand,
  UpdateBotCommand: () => UpdateBotCommand,
  UpdateBotLocaleCommand: () => UpdateBotLocaleCommand,
  UpdateBotRecommendationCommand: () => UpdateBotRecommendationCommand,
  UpdateBotRecommendationRequestFilterSensitiveLog: () => UpdateBotRecommendationRequestFilterSensitiveLog,
  UpdateBotRecommendationResponseFilterSensitiveLog: () => UpdateBotRecommendationResponseFilterSensitiveLog,
  UpdateExportCommand: () => UpdateExportCommand,
  UpdateExportRequestFilterSensitiveLog: () => UpdateExportRequestFilterSensitiveLog,
  UpdateIntentCommand: () => UpdateIntentCommand,
  UpdateResourcePolicyCommand: () => UpdateResourcePolicyCommand,
  UpdateSlotCommand: () => UpdateSlotCommand,
  UpdateSlotTypeCommand: () => UpdateSlotTypeCommand,
  UpdateTestSetCommand: () => UpdateTestSetCommand,
  UtteranceContentType: () => UtteranceContentType,
  ValidationException: () => ValidationException,
  VoiceEngine: () => VoiceEngine,
  __Client: () => import_smithy_client.Client,
  paginateListAggregatedUtterances: () => paginateListAggregatedUtterances,
  paginateListBotAliasReplicas: () => paginateListBotAliasReplicas,
  paginateListBotAliases: () => paginateListBotAliases,
  paginateListBotLocales: () => paginateListBotLocales,
  paginateListBotRecommendations: () => paginateListBotRecommendations,
  paginateListBotResourceGenerations: () => paginateListBotResourceGenerations,
  paginateListBotVersionReplicas: () => paginateListBotVersionReplicas,
  paginateListBotVersions: () => paginateListBotVersions,
  paginateListBots: () => paginateListBots,
  paginateListBuiltInIntents: () => paginateListBuiltInIntents,
  paginateListBuiltInSlotTypes: () => paginateListBuiltInSlotTypes,
  paginateListCustomVocabularyItems: () => paginateListCustomVocabularyItems,
  paginateListExports: () => paginateListExports,
  paginateListImports: () => paginateListImports,
  paginateListIntentMetrics: () => paginateListIntentMetrics,
  paginateListIntentStageMetrics: () => paginateListIntentStageMetrics,
  paginateListIntents: () => paginateListIntents,
  paginateListRecommendedIntents: () => paginateListRecommendedIntents,
  paginateListSessionAnalyticsData: () => paginateListSessionAnalyticsData,
  paginateListSessionMetrics: () => paginateListSessionMetrics,
  paginateListSlotTypes: () => paginateListSlotTypes,
  paginateListSlots: () => paginateListSlots,
  paginateListTestExecutionResultItems: () => paginateListTestExecutionResultItems,
  paginateListTestExecutions: () => paginateListTestExecutions,
  paginateListTestSetRecords: () => paginateListTestSetRecords,
  paginateListTestSets: () => paginateListTestSets,
  paginateListUtteranceAnalyticsData: () => paginateListUtteranceAnalyticsData,
  paginateListUtteranceMetrics: () => paginateListUtteranceMetrics,
  waitForBotAliasAvailable: () => waitForBotAliasAvailable,
  waitForBotAvailable: () => waitForBotAvailable,
  waitForBotExportCompleted: () => waitForBotExportCompleted,
  waitForBotImportCompleted: () => waitForBotImportCompleted,
  waitForBotLocaleBuilt: () => waitForBotLocaleBuilt,
  waitForBotLocaleCreated: () => waitForBotLocaleCreated,
  waitForBotLocaleExpressTestingAvailable: () => waitForBotLocaleExpressTestingAvailable,
  waitForBotVersionAvailable: () => waitForBotVersionAvailable,
  waitUntilBotAliasAvailable: () => waitUntilBotAliasAvailable,
  waitUntilBotAvailable: () => waitUntilBotAvailable,
  waitUntilBotExportCompleted: () => waitUntilBotExportCompleted,
  waitUntilBotImportCompleted: () => waitUntilBotImportCompleted,
  waitUntilBotLocaleBuilt: () => waitUntilBotLocaleBuilt,
  waitUntilBotLocaleCreated: () => waitUntilBotLocaleCreated,
  waitUntilBotLocaleExpressTestingAvailable: () => waitUntilBotLocaleExpressTestingAvailable,
  waitUntilBotVersionAvailable: () => waitUntilBotVersionAvailable
});
module.exports = __toCommonJS(src_exports);

// src/LexModelsV2Client.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "lex"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/LexModelsV2Client.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/LexModelsV2Client.ts
var _LexModelsV2Client = class _LexModelsV2Client extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultLexModelsV2HttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_LexModelsV2Client, "LexModelsV2Client");
var LexModelsV2Client = _LexModelsV2Client;

// src/LexModelsV2.ts


// src/commands/BatchCreateCustomVocabularyItemCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/protocols/Aws_restJson1.ts
var import_core2 = require("@aws-sdk/core");



// src/models/LexModelsV2ServiceException.ts

var _LexModelsV2ServiceException = class _LexModelsV2ServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _LexModelsV2ServiceException.prototype);
  }
};
__name(_LexModelsV2ServiceException, "LexModelsV2ServiceException");
var LexModelsV2ServiceException = _LexModelsV2ServiceException;

// src/models/models_0.ts

var AudioRecognitionStrategy = {
  UseSlotValuesAsCustomVocabulary: "UseSlotValuesAsCustomVocabulary"
};
var AggregatedUtterancesFilterName = {
  Utterance: "Utterance"
};
var AggregatedUtterancesFilterOperator = {
  Contains: "CO",
  Equals: "EQ"
};
var AggregatedUtterancesSortAttribute = {
  HitCount: "HitCount",
  MissedCount: "MissedCount"
};
var SortOrder = {
  Ascending: "Ascending",
  Descending: "Descending"
};
var AnalyticsInterval = {
  OneDay: "OneDay",
  OneHour: "OneHour"
};
var AnalyticsBinByName = {
  ConversationStartTime: "ConversationStartTime",
  UtteranceTimestamp: "UtteranceTimestamp"
};
var AnalyticsSortOrder = {
  Ascending: "Ascending",
  Descending: "Descending"
};
var AnalyticsCommonFilterName = {
  BotAliasId: "BotAliasId",
  BotVersion: "BotVersion",
  Channel: "Channel",
  LocaleId: "LocaleId",
  Modality: "Modality"
};
var AnalyticsFilterOperator = {
  Equals: "EQ",
  GreaterThan: "GT",
  LessThan: "LT"
};
var AnalyticsIntentField = {
  IntentEndState: "IntentEndState",
  IntentLevel: "IntentLevel",
  IntentName: "IntentName"
};
var AnalyticsIntentFilterName = {
  BotAliasId: "BotAliasId",
  BotVersion: "BotVersion",
  Channel: "Channel",
  IntentEndState: "IntentEndState",
  IntentName: "IntentName",
  LocaleId: "LocaleId",
  Modality: "Modality",
  OriginatingRequestId: "OriginatingRequestId",
  SessionId: "SessionId"
};
var AnalyticsIntentMetricName = {
  Count: "Count",
  Dropped: "Dropped",
  Failure: "Failure",
  Success: "Success",
  Switched: "Switched"
};
var AnalyticsMetricStatistic = {
  Avg: "Avg",
  Max: "Max",
  Sum: "Sum"
};
var AnalyticsNodeType = {
  Exit: "Exit",
  Inner: "Inner"
};
var AnalyticsIntentStageField = {
  IntentStageName: "IntentStageName",
  SwitchedToIntent: "SwitchedToIntent"
};
var AnalyticsIntentStageFilterName = {
  BotAliasId: "BotAliasId",
  BotVersion: "BotVersion",
  Channel: "Channel",
  IntentName: "IntentName",
  IntentStageName: "IntentStageName",
  LocaleId: "LocaleId",
  Modality: "Modality",
  OriginatingRequestId: "OriginatingRequestId",
  SessionId: "SessionId"
};
var AnalyticsIntentStageMetricName = {
  Count: "Count",
  Dropped: "Dropped",
  Failed: "Failed",
  Retry: "Retry",
  Success: "Success"
};
var AnalyticsModality = {
  DTMF: "DTMF",
  MultiMode: "MultiMode",
  Speech: "Speech",
  Text: "Text"
};
var AnalyticsSessionField = {
  ConversationEndState: "ConversationEndState",
  LocaleId: "LocaleId"
};
var AnalyticsSessionFilterName = {
  BotAliasId: "BotAliasId",
  BotVersion: "BotVersion",
  Channel: "Channel",
  ConversationEndState: "ConversationEndState",
  Duration: "Duration",
  IntentPath: "IntentPath",
  LocaleId: "LocaleId",
  Modality: "Modality",
  OriginatingRequestId: "OriginatingRequestId",
  SessionId: "SessionId"
};
var AnalyticsSessionMetricName = {
  Concurrency: "Concurrency",
  Count: "Count",
  Dropped: "Dropped",
  Duration: "Duration",
  Failure: "Failure",
  Success: "Success",
  TurnsPerConversation: "TurnsPerConversation"
};
var AnalyticsSessionSortByName = {
  ConversationStartTime: "ConversationStartTime",
  Duration: "Duration",
  NumberOfTurns: "NumberOfTurns"
};
var AnalyticsUtteranceAttributeName = {
  LastUsedIntent: "LastUsedIntent"
};
var AnalyticsUtteranceField = {
  UtteranceState: "UtteranceState",
  UtteranceText: "UtteranceText"
};
var AnalyticsUtteranceFilterName = {
  BotAliasId: "BotAliasId",
  BotVersion: "BotVersion",
  Channel: "Channel",
  LocaleId: "LocaleId",
  Modality: "Modality",
  OriginatingRequestId: "OriginatingRequestId",
  SessionId: "SessionId",
  UtteranceState: "UtteranceState",
  UtteranceText: "UtteranceText"
};
var AnalyticsUtteranceMetricName = {
  Count: "Count",
  Detected: "Detected",
  Missed: "Missed",
  UtteranceTimestamp: "UtteranceTimestamp"
};
var AnalyticsUtteranceSortByName = {
  UtteranceTimestamp: "UtteranceTimestamp"
};
var AssociatedTranscriptFilterName = {
  IntentId: "IntentId",
  SlotTypeId: "SlotTypeId"
};
var ErrorCode = {
  DUPLICATE_INPUT: "DUPLICATE_INPUT",
  INTERNAL_SERVER_FAILURE: "INTERNAL_SERVER_FAILURE",
  RESOURCE_ALREADY_EXISTS: "RESOURCE_ALREADY_EXISTS",
  RESOURCE_DOES_NOT_EXIST: "RESOURCE_DOES_NOT_EXIST"
};
var _InternalServerException = class _InternalServerException extends LexModelsV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServerException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalServerException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalServerException.prototype);
  }
};
__name(_InternalServerException, "InternalServerException");
var InternalServerException = _InternalServerException;
var _ResourceNotFoundException = class _ResourceNotFoundException extends LexModelsV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
  }
};
__name(_ResourceNotFoundException, "ResourceNotFoundException");
var ResourceNotFoundException = _ResourceNotFoundException;
var _ServiceQuotaExceededException = class _ServiceQuotaExceededException extends LexModelsV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceQuotaExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "ServiceQuotaExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ServiceQuotaExceededException.prototype);
  }
};
__name(_ServiceQuotaExceededException, "ServiceQuotaExceededException");
var ServiceQuotaExceededException = _ServiceQuotaExceededException;
var _ThrottlingException = class _ThrottlingException extends LexModelsV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ThrottlingException",
      $fault: "client",
      ...opts
    });
    this.name = "ThrottlingException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ThrottlingException.prototype);
    this.retryAfterSeconds = opts.retryAfterSeconds;
  }
};
__name(_ThrottlingException, "ThrottlingException");
var ThrottlingException = _ThrottlingException;
var _ValidationException = class _ValidationException extends LexModelsV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ValidationException",
      $fault: "client",
      ...opts
    });
    this.name = "ValidationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ValidationException.prototype);
  }
};
__name(_ValidationException, "ValidationException");
var ValidationException = _ValidationException;
var BotAliasReplicationStatus = {
  Available: "Available",
  Creating: "Creating",
  Deleting: "Deleting",
  Failed: "Failed",
  Updating: "Updating"
};
var BotAliasStatus = {
  Available: "Available",
  Creating: "Creating",
  Deleting: "Deleting",
  Failed: "Failed"
};
var BotFilterName = {
  BotName: "BotName",
  BotType: "BotType"
};
var BotFilterOperator = {
  Contains: "CO",
  Equals: "EQ",
  NotEquals: "NE"
};
var BotLocaleFilterName = {
  BotLocaleName: "BotLocaleName"
};
var BotLocaleFilterOperator = {
  Contains: "CO",
  Equals: "EQ"
};
var VoiceEngine = {
  Neural: "neural",
  Standard: "standard"
};
var BotLocaleSortAttribute = {
  BotLocaleName: "BotLocaleName"
};
var BotLocaleStatus = {
  Building: "Building",
  Built: "Built",
  Creating: "Creating",
  Deleting: "Deleting",
  Failed: "Failed",
  Importing: "Importing",
  NotBuilt: "NotBuilt",
  Processing: "Processing",
  ReadyExpressTesting: "ReadyExpressTesting"
};
var BotRecommendationStatus = {
  Available: "Available",
  Deleted: "Deleted",
  Deleting: "Deleting",
  Downloading: "Downloading",
  Failed: "Failed",
  Processing: "Processing",
  Stopped: "Stopped",
  Stopping: "Stopping",
  Updating: "Updating"
};
var BotReplicaStatus = {
  Deleting: "Deleting",
  Enabled: "Enabled",
  Enabling: "Enabling",
  Failed: "Failed"
};
var BotSortAttribute = {
  BotName: "BotName"
};
var BotStatus = {
  Available: "Available",
  Creating: "Creating",
  Deleting: "Deleting",
  Failed: "Failed",
  Importing: "Importing",
  Inactive: "Inactive",
  Updating: "Updating",
  Versioning: "Versioning"
};
var BotType = {
  Bot: "Bot",
  BotNetwork: "BotNetwork"
};
var BotVersionReplicaSortAttribute = {
  BotVersion: "BotVersion"
};
var BotVersionReplicationStatus = {
  Available: "Available",
  Creating: "Creating",
  Deleting: "Deleting",
  Failed: "Failed"
};
var BotVersionSortAttribute = {
  BotVersion: "BotVersion"
};
var _ConflictException = class _ConflictException extends LexModelsV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    this.name = "ConflictException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ConflictException.prototype);
  }
};
__name(_ConflictException, "ConflictException");
var ConflictException = _ConflictException;
var _PreconditionFailedException = class _PreconditionFailedException extends LexModelsV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "PreconditionFailedException",
      $fault: "client",
      ...opts
    });
    this.name = "PreconditionFailedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _PreconditionFailedException.prototype);
  }
};
__name(_PreconditionFailedException, "PreconditionFailedException");
var PreconditionFailedException = _PreconditionFailedException;
var BuiltInIntentSortAttribute = {
  IntentSignature: "IntentSignature"
};
var BuiltInSlotTypeSortAttribute = {
  SlotTypeSignature: "SlotTypeSignature"
};
var DialogActionType = {
  CloseIntent: "CloseIntent",
  ConfirmIntent: "ConfirmIntent",
  ElicitIntent: "ElicitIntent",
  ElicitSlot: "ElicitSlot",
  EndConversation: "EndConversation",
  EvaluateConditional: "EvaluateConditional",
  FulfillIntent: "FulfillIntent",
  InvokeDialogCodeHook: "InvokeDialogCodeHook",
  StartIntent: "StartIntent"
};
var SlotShape = {
  List: "List",
  Scalar: "Scalar"
};
var ConversationEndState = {
  Dropped: "Dropped",
  Failure: "Failure",
  Success: "Success"
};
var TestResultMatchStatus = {
  ExecutionError: "ExecutionError",
  Matched: "Matched",
  Mismatched: "Mismatched"
};
var ConversationLogsInputModeFilter = {
  Speech: "Speech",
  Text: "Text"
};
var ImportExportFileFormat = {
  CSV: "CSV",
  LexJson: "LexJson",
  TSV: "TSV"
};
var ExportStatus = {
  Completed: "Completed",
  Deleting: "Deleting",
  Failed: "Failed",
  InProgress: "InProgress"
};
var MessageSelectionStrategy = {
  Ordered: "Ordered",
  Random: "Random"
};
var PromptAttempt = {
  Initial: "Initial",
  Retry1: "Retry1",
  Retry2: "Retry2",
  Retry3: "Retry3",
  Retry4: "Retry4",
  Retry5: "Retry5"
};
var Effect = {
  Allow: "Allow",
  Deny: "Deny"
};
var ObfuscationSettingType = {
  DefaultObfuscation: "DefaultObfuscation",
  None: "None"
};
var SlotConstraint = {
  Optional: "Optional",
  Required: "Required"
};
var SlotResolutionStrategy = {
  Default: "Default",
  EnhancedFallback: "EnhancedFallback"
};
var SlotValueResolutionStrategy = {
  Concatenation: "Concatenation",
  OriginalValue: "OriginalValue",
  TopResolution: "TopResolution"
};
var CustomVocabularyStatus = {
  Creating: "Creating",
  Deleting: "Deleting",
  Exporting: "Exporting",
  Importing: "Importing",
  Ready: "Ready"
};
var ImportStatus = {
  Completed: "Completed",
  Deleting: "Deleting",
  Failed: "Failed",
  InProgress: "InProgress"
};
var CreateExportRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.filePassword && { filePassword: import_smithy_client.SENSITIVE_STRING }
}), "CreateExportRequestFilterSensitiveLog");
var EncryptionSettingFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.botLocaleExportPassword && { botLocaleExportPassword: import_smithy_client.SENSITIVE_STRING },
  ...obj.associatedTranscriptsPassword && { associatedTranscriptsPassword: import_smithy_client.SENSITIVE_STRING }
}), "EncryptionSettingFilterSensitiveLog");

// src/protocols/Aws_restJson1.ts
var se_BatchCreateCustomVocabularyItemCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/batchcreate");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      customVocabularyItemList: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_BatchCreateCustomVocabularyItemCommand");
var se_BatchDeleteCustomVocabularyItemCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/batchdelete");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      customVocabularyItemList: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchDeleteCustomVocabularyItemCommand");
var se_BatchUpdateCustomVocabularyItemCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/batchupdate");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      customVocabularyItemList: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_BatchUpdateCustomVocabularyItemCommand");
var se_BuildBotLocaleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BuildBotLocaleCommand");
var se_CreateBotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      botMembers: (_) => (0, import_smithy_client._json)(_),
      botName: [],
      botTags: (_) => (0, import_smithy_client._json)(_),
      botType: [],
      dataPrivacy: (_) => (0, import_smithy_client._json)(_),
      description: [],
      idleSessionTTLInSeconds: [],
      roleArn: [],
      testBotAliasTags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CreateBotCommand");
var se_CreateBotAliasCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botaliases");
  b.p("botId", () => input.botId, "{botId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      botAliasLocaleSettings: (_) => (0, import_smithy_client._json)(_),
      botAliasName: [],
      botVersion: [],
      conversationLogSettings: (_) => (0, import_smithy_client._json)(_),
      description: [],
      sentimentAnalysisSettings: (_) => (0, import_smithy_client._json)(_),
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CreateBotAliasCommand");
var se_CreateBotLocaleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [],
      generativeAISettings: (_) => (0, import_smithy_client._json)(_),
      localeId: [],
      nluIntentConfidenceThreshold: (_) => (0, import_smithy_client.serializeFloat)(_),
      voiceSettings: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CreateBotLocaleCommand");
var se_CreateBotReplicaCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/replicas");
  b.p("botId", () => input.botId, "{botId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      replicaRegion: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CreateBotReplicaCommand");
var se_CreateBotVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions");
  b.p("botId", () => input.botId, "{botId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      botVersionLocaleSpecification: (_) => (0, import_smithy_client._json)(_),
      description: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CreateBotVersionCommand");
var se_CreateExportCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/exports");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      fileFormat: [],
      filePassword: [],
      resourceSpecification: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CreateExportCommand");
var se_CreateIntentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [],
      dialogCodeHook: (_) => (0, import_smithy_client._json)(_),
      fulfillmentCodeHook: (_) => se_FulfillmentCodeHookSettings(_, context),
      initialResponseSetting: (_) => se_InitialResponseSetting(_, context),
      inputContexts: (_) => (0, import_smithy_client._json)(_),
      intentClosingSetting: (_) => se_IntentClosingSetting(_, context),
      intentConfirmationSetting: (_) => se_IntentConfirmationSetting(_, context),
      intentName: [],
      kendraConfiguration: (_) => (0, import_smithy_client._json)(_),
      outputContexts: (_) => (0, import_smithy_client._json)(_),
      parentIntentSignature: [],
      qnAIntentConfiguration: (_) => (0, import_smithy_client._json)(_),
      sampleUtterances: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CreateIntentCommand");
var se_CreateResourcePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/policy/{resourceArn}");
  b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      policy: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateResourcePolicyCommand");
var se_CreateResourcePolicyStatementCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/policy/{resourceArn}/statements");
  b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
  const query = (0, import_smithy_client.map)({
    [_eRI]: [, input[_eRI]]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      action: (_) => (0, import_smithy_client._json)(_),
      condition: (_) => (0, import_smithy_client._json)(_),
      effect: [],
      principal: (_) => (0, import_smithy_client._json)(_),
      statementId: []
    })
  );
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_CreateResourcePolicyStatementCommand");
var se_CreateSlotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  b.p("intentId", () => input.intentId, "{intentId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [],
      multipleValuesSetting: (_) => (0, import_smithy_client._json)(_),
      obfuscationSetting: (_) => (0, import_smithy_client._json)(_),
      slotName: [],
      slotTypeId: [],
      subSlotSetting: (_) => se_SubSlotSetting(_, context),
      valueElicitationSetting: (_) => se_SlotValueElicitationSetting(_, context)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CreateSlotCommand");
var se_CreateSlotTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      compositeSlotTypeSetting: (_) => (0, import_smithy_client._json)(_),
      description: [],
      externalSourceSetting: (_) => (0, import_smithy_client._json)(_),
      parentSlotTypeSignature: [],
      slotTypeName: [],
      slotTypeValues: (_) => (0, import_smithy_client._json)(_),
      valueSelectionSetting: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CreateSlotTypeCommand");
var se_CreateTestSetDiscrepancyReportCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/testsets/{testSetId}/testsetdiscrepancy");
  b.p("testSetId", () => input.testSetId, "{testSetId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      target: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateTestSetDiscrepancyReportCommand");
var se_CreateUploadUrlCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/createuploadurl");
  let body;
  body = "";
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateUploadUrlCommand");
var se_DeleteBotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}");
  b.p("botId", () => input.botId, "{botId}", false);
  const query = (0, import_smithy_client.map)({
    [_sRIUC]: [() => input.skipResourceInUseCheck !== void 0, () => input[_sRIUC].toString()]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteBotCommand");
var se_DeleteBotAliasCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/botaliases/{botAliasId}");
  b.p("botAliasId", () => input.botAliasId, "{botAliasId}", false);
  b.p("botId", () => input.botId, "{botId}", false);
  const query = (0, import_smithy_client.map)({
    [_sRIUC]: [() => input.skipResourceInUseCheck !== void 0, () => input[_sRIUC].toString()]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteBotAliasCommand");
var se_DeleteBotLocaleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteBotLocaleCommand");
var se_DeleteBotReplicaCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/replicas/{replicaRegion}");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("replicaRegion", () => input.replicaRegion, "{replicaRegion}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteBotReplicaCommand");
var se_DeleteBotVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/botversions/{botVersion}");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  const query = (0, import_smithy_client.map)({
    [_sRIUC]: [() => input.skipResourceInUseCheck !== void 0, () => input[_sRIUC].toString()]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteBotVersionCommand");
var se_DeleteCustomVocabularyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteCustomVocabularyCommand");
var se_DeleteExportCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/exports/{exportId}");
  b.p("exportId", () => input.exportId, "{exportId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteExportCommand");
var se_DeleteImportCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/imports/{importId}");
  b.p("importId", () => input.importId, "{importId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteImportCommand");
var se_DeleteIntentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}");
  b.p("intentId", () => input.intentId, "{intentId}", false);
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteIntentCommand");
var se_DeleteResourcePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/policy/{resourceArn}");
  b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
  const query = (0, import_smithy_client.map)({
    [_eRI]: [, input[_eRI]]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteResourcePolicyCommand");
var se_DeleteResourcePolicyStatementCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/policy/{resourceArn}/statements/{statementId}");
  b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
  b.p("statementId", () => input.statementId, "{statementId}", false);
  const query = (0, import_smithy_client.map)({
    [_eRI]: [, input[_eRI]]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteResourcePolicyStatementCommand");
var se_DeleteSlotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}");
  b.p("slotId", () => input.slotId, "{slotId}", false);
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  b.p("intentId", () => input.intentId, "{intentId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteSlotCommand");
var se_DeleteSlotTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}");
  b.p("slotTypeId", () => input.slotTypeId, "{slotTypeId}", false);
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  const query = (0, import_smithy_client.map)({
    [_sRIUC]: [() => input.skipResourceInUseCheck !== void 0, () => input[_sRIUC].toString()]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteSlotTypeCommand");
var se_DeleteTestSetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/testsets/{testSetId}");
  b.p("testSetId", () => input.testSetId, "{testSetId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteTestSetCommand");
var se_DeleteUtterancesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/utterances");
  b.p("botId", () => input.botId, "{botId}", false);
  const query = (0, import_smithy_client.map)({
    [_lI]: [, input[_lI]],
    [_sI]: [, input[_sI]]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteUtterancesCommand");
var se_DescribeBotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}");
  b.p("botId", () => input.botId, "{botId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeBotCommand");
var se_DescribeBotAliasCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/botaliases/{botAliasId}");
  b.p("botAliasId", () => input.botAliasId, "{botAliasId}", false);
  b.p("botId", () => input.botId, "{botId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeBotAliasCommand");
var se_DescribeBotLocaleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeBotLocaleCommand");
var se_DescribeBotRecommendationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  b.p("botRecommendationId", () => input.botRecommendationId, "{botRecommendationId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeBotRecommendationCommand");
var se_DescribeBotReplicaCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/replicas/{replicaRegion}");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("replicaRegion", () => input.replicaRegion, "{replicaRegion}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeBotReplicaCommand");
var se_DescribeBotResourceGenerationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/generations/{generationId}");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  b.p("generationId", () => input.generationId, "{generationId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeBotResourceGenerationCommand");
var se_DescribeBotVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/botversions/{botVersion}");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeBotVersionCommand");
var se_DescribeCustomVocabularyMetadataCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/metadata");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeCustomVocabularyMetadataCommand");
var se_DescribeExportCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/exports/{exportId}");
  b.p("exportId", () => input.exportId, "{exportId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeExportCommand");
var se_DescribeImportCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/imports/{importId}");
  b.p("importId", () => input.importId, "{importId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeImportCommand");
var se_DescribeIntentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}");
  b.p("intentId", () => input.intentId, "{intentId}", false);
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeIntentCommand");
var se_DescribeResourcePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/policy/{resourceArn}");
  b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeResourcePolicyCommand");
var se_DescribeSlotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}");
  b.p("slotId", () => input.slotId, "{slotId}", false);
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  b.p("intentId", () => input.intentId, "{intentId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeSlotCommand");
var se_DescribeSlotTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}");
  b.p("slotTypeId", () => input.slotTypeId, "{slotTypeId}", false);
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeSlotTypeCommand");
var se_DescribeTestExecutionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/testexecutions/{testExecutionId}");
  b.p("testExecutionId", () => input.testExecutionId, "{testExecutionId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeTestExecutionCommand");
var se_DescribeTestSetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/testsets/{testSetId}");
  b.p("testSetId", () => input.testSetId, "{testSetId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeTestSetCommand");
var se_DescribeTestSetDiscrepancyReportCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/testsetdiscrepancy/{testSetDiscrepancyReportId}");
  b.p("testSetDiscrepancyReportId", () => input.testSetDiscrepancyReportId, "{testSetDiscrepancyReportId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeTestSetDiscrepancyReportCommand");
var se_DescribeTestSetGenerationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/testsetgenerations/{testSetGenerationId}");
  b.p("testSetGenerationId", () => input.testSetGenerationId, "{testSetGenerationId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeTestSetGenerationCommand");
var se_GenerateBotElementCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/generate");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      intentId: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GenerateBotElementCommand");
var se_GetTestExecutionArtifactsUrlCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/testexecutions/{testExecutionId}/artifacturl");
  b.p("testExecutionId", () => input.testExecutionId, "{testExecutionId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetTestExecutionArtifactsUrlCommand");
var se_ListAggregatedUtterancesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/aggregatedutterances");
  b.p("botId", () => input.botId, "{botId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      aggregationDuration: (_) => (0, import_smithy_client._json)(_),
      botAliasId: [],
      botVersion: [],
      filters: (_) => (0, import_smithy_client._json)(_),
      localeId: [],
      maxResults: [],
      nextToken: [],
      sortBy: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListAggregatedUtterancesCommand");
var se_ListBotAliasesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botaliases");
  b.p("botId", () => input.botId, "{botId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListBotAliasesCommand");
var se_ListBotAliasReplicasCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/replicas/{replicaRegion}/botaliases");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("replicaRegion", () => input.replicaRegion, "{replicaRegion}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListBotAliasReplicasCommand");
var se_ListBotLocalesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      filters: (_) => (0, import_smithy_client._json)(_),
      maxResults: [],
      nextToken: [],
      sortBy: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListBotLocalesCommand");
var se_ListBotRecommendationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListBotRecommendationsCommand");
var se_ListBotReplicasCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/bots/{botId}/replicas");
  b.p("botId", () => input.botId, "{botId}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListBotReplicasCommand");
var se_ListBotResourceGenerationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/generations");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: [],
      sortBy: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListBotResourceGenerationsCommand");
var se_ListBotsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      filters: (_) => (0, import_smithy_client._json)(_),
      maxResults: [],
      nextToken: [],
      sortBy: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListBotsCommand");
var se_ListBotVersionReplicasCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/replicas/{replicaRegion}/botversions");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("replicaRegion", () => input.replicaRegion, "{replicaRegion}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: [],
      sortBy: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListBotVersionReplicasCommand");
var se_ListBotVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions");
  b.p("botId", () => input.botId, "{botId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: [],
      sortBy: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListBotVersionsCommand");
var se_ListBuiltInIntentsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/builtins/locales/{localeId}/intents");
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: [],
      sortBy: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListBuiltInIntentsCommand");
var se_ListBuiltInSlotTypesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/builtins/locales/{localeId}/slottypes");
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: [],
      sortBy: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListBuiltInSlotTypesCommand");
var se_ListCustomVocabularyItemsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/list");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListCustomVocabularyItemsCommand");
var se_ListExportsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/exports");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      botId: [],
      botVersion: [],
      filters: (_) => (0, import_smithy_client._json)(_),
      localeId: [],
      maxResults: [],
      nextToken: [],
      sortBy: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListExportsCommand");
var se_ListImportsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/imports");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      botId: [],
      botVersion: [],
      filters: (_) => (0, import_smithy_client._json)(_),
      localeId: [],
      maxResults: [],
      nextToken: [],
      sortBy: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListImportsCommand");
var se_ListIntentMetricsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/analytics/intentmetrics");
  b.p("botId", () => input.botId, "{botId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      binBy: (_) => (0, import_smithy_client._json)(_),
      endDateTime: (_) => Math.round(_.getTime() / 1e3),
      filters: (_) => (0, import_smithy_client._json)(_),
      groupBy: (_) => (0, import_smithy_client._json)(_),
      maxResults: [],
      metrics: (_) => (0, import_smithy_client._json)(_),
      nextToken: [],
      startDateTime: (_) => Math.round(_.getTime() / 1e3)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListIntentMetricsCommand");
var se_ListIntentPathsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/analytics/intentpaths");
  b.p("botId", () => input.botId, "{botId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      endDateTime: (_) => Math.round(_.getTime() / 1e3),
      filters: (_) => (0, import_smithy_client._json)(_),
      intentPath: [],
      startDateTime: (_) => Math.round(_.getTime() / 1e3)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListIntentPathsCommand");
var se_ListIntentsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      filters: (_) => (0, import_smithy_client._json)(_),
      maxResults: [],
      nextToken: [],
      sortBy: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListIntentsCommand");
var se_ListIntentStageMetricsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/analytics/intentstagemetrics");
  b.p("botId", () => input.botId, "{botId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      binBy: (_) => (0, import_smithy_client._json)(_),
      endDateTime: (_) => Math.round(_.getTime() / 1e3),
      filters: (_) => (0, import_smithy_client._json)(_),
      groupBy: (_) => (0, import_smithy_client._json)(_),
      maxResults: [],
      metrics: (_) => (0, import_smithy_client._json)(_),
      nextToken: [],
      startDateTime: (_) => Math.round(_.getTime() / 1e3)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListIntentStageMetricsCommand");
var se_ListRecommendedIntentsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/intents");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  b.p("botRecommendationId", () => input.botRecommendationId, "{botRecommendationId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListRecommendedIntentsCommand");
var se_ListSessionAnalyticsDataCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/analytics/sessions");
  b.p("botId", () => input.botId, "{botId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      endDateTime: (_) => Math.round(_.getTime() / 1e3),
      filters: (_) => (0, import_smithy_client._json)(_),
      maxResults: [],
      nextToken: [],
      sortBy: (_) => (0, import_smithy_client._json)(_),
      startDateTime: (_) => Math.round(_.getTime() / 1e3)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListSessionAnalyticsDataCommand");
var se_ListSessionMetricsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/analytics/sessionmetrics");
  b.p("botId", () => input.botId, "{botId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      binBy: (_) => (0, import_smithy_client._json)(_),
      endDateTime: (_) => Math.round(_.getTime() / 1e3),
      filters: (_) => (0, import_smithy_client._json)(_),
      groupBy: (_) => (0, import_smithy_client._json)(_),
      maxResults: [],
      metrics: (_) => (0, import_smithy_client._json)(_),
      nextToken: [],
      startDateTime: (_) => Math.round(_.getTime() / 1e3)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListSessionMetricsCommand");
var se_ListSlotsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  b.p("intentId", () => input.intentId, "{intentId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      filters: (_) => (0, import_smithy_client._json)(_),
      maxResults: [],
      nextToken: [],
      sortBy: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListSlotsCommand");
var se_ListSlotTypesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      filters: (_) => (0, import_smithy_client._json)(_),
      maxResults: [],
      nextToken: [],
      sortBy: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListSlotTypesCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags/{resourceARN}");
  b.p("resourceARN", () => input.resourceARN, "{resourceARN}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_ListTagsForResourceCommand");
var se_ListTestExecutionResultItemsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/testexecutions/{testExecutionId}/results");
  b.p("testExecutionId", () => input.testExecutionId, "{testExecutionId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: [],
      resultFilterBy: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListTestExecutionResultItemsCommand");
var se_ListTestExecutionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/testexecutions");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: [],
      sortBy: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListTestExecutionsCommand");
var se_ListTestSetRecordsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/testsets/{testSetId}/records");
  b.p("testSetId", () => input.testSetId, "{testSetId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListTestSetRecordsCommand");
var se_ListTestSetsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/testsets");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: [],
      sortBy: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListTestSetsCommand");
var se_ListUtteranceAnalyticsDataCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/analytics/utterances");
  b.p("botId", () => input.botId, "{botId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      endDateTime: (_) => Math.round(_.getTime() / 1e3),
      filters: (_) => (0, import_smithy_client._json)(_),
      maxResults: [],
      nextToken: [],
      sortBy: (_) => (0, import_smithy_client._json)(_),
      startDateTime: (_) => Math.round(_.getTime() / 1e3)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListUtteranceAnalyticsDataCommand");
var se_ListUtteranceMetricsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/analytics/utterancemetrics");
  b.p("botId", () => input.botId, "{botId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      attributes: (_) => (0, import_smithy_client._json)(_),
      binBy: (_) => (0, import_smithy_client._json)(_),
      endDateTime: (_) => Math.round(_.getTime() / 1e3),
      filters: (_) => (0, import_smithy_client._json)(_),
      groupBy: (_) => (0, import_smithy_client._json)(_),
      maxResults: [],
      metrics: (_) => (0, import_smithy_client._json)(_),
      nextToken: [],
      startDateTime: (_) => Math.round(_.getTime() / 1e3)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListUtteranceMetricsCommand");
var se_SearchAssociatedTranscriptsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp(
    "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/associatedtranscripts"
  );
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  b.p("botRecommendationId", () => input.botRecommendationId, "{botRecommendationId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      filters: (_) => (0, import_smithy_client._json)(_),
      maxResults: [],
      nextIndex: [],
      searchOrder: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_SearchAssociatedTranscriptsCommand");
var se_StartBotRecommendationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      encryptionSetting: (_) => (0, import_smithy_client._json)(_),
      transcriptSourceSetting: (_) => se_TranscriptSourceSetting(_, context)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_StartBotRecommendationCommand");
var se_StartBotResourceGenerationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/startgeneration");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      generationInputPrompt: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_StartBotResourceGenerationCommand");
var se_StartImportCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/imports");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      filePassword: [],
      importId: [],
      mergeStrategy: [],
      resourceSpecification: (_) => se_ImportResourceSpecification(_, context)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_StartImportCommand");
var se_StartTestExecutionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/testsets/{testSetId}/testexecutions");
  b.p("testSetId", () => input.testSetId, "{testSetId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      apiMode: [],
      target: (_) => (0, import_smithy_client._json)(_),
      testExecutionModality: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StartTestExecutionCommand");
var se_StartTestSetGenerationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/testsetgenerations");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [],
      generationDataSource: (_) => se_TestSetGenerationDataSource(_, context),
      roleArn: [],
      storageLocation: (_) => (0, import_smithy_client._json)(_),
      testSetName: [],
      testSetTags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_StartTestSetGenerationCommand");
var se_StopBotRecommendationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp(
    "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/stopbotrecommendation"
  );
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  b.p("botRecommendationId", () => input.botRecommendationId, "{botRecommendationId}", false);
  let body;
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_StopBotRecommendationCommand");
var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tags/{resourceARN}");
  b.p("resourceARN", () => input.resourceARN, "{resourceARN}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_TagResourceCommand");
var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags/{resourceARN}");
  b.p("resourceARN", () => input.resourceARN, "{resourceARN}", false);
  const query = (0, import_smithy_client.map)({
    [_tK]: [
      (0, import_smithy_client.expectNonNull)(input.tagKeys, `tagKeys`) != null,
      () => (input[_tK] || []).map((_entry) => _entry)
    ]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_UntagResourceCommand");
var se_UpdateBotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}");
  b.p("botId", () => input.botId, "{botId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      botMembers: (_) => (0, import_smithy_client._json)(_),
      botName: [],
      botType: [],
      dataPrivacy: (_) => (0, import_smithy_client._json)(_),
      description: [],
      idleSessionTTLInSeconds: [],
      roleArn: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateBotCommand");
var se_UpdateBotAliasCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botaliases/{botAliasId}");
  b.p("botAliasId", () => input.botAliasId, "{botAliasId}", false);
  b.p("botId", () => input.botId, "{botId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      botAliasLocaleSettings: (_) => (0, import_smithy_client._json)(_),
      botAliasName: [],
      botVersion: [],
      conversationLogSettings: (_) => (0, import_smithy_client._json)(_),
      description: [],
      sentimentAnalysisSettings: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateBotAliasCommand");
var se_UpdateBotLocaleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [],
      generativeAISettings: (_) => (0, import_smithy_client._json)(_),
      nluIntentConfidenceThreshold: (_) => (0, import_smithy_client.serializeFloat)(_),
      voiceSettings: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateBotLocaleCommand");
var se_UpdateBotRecommendationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}");
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  b.p("botRecommendationId", () => input.botRecommendationId, "{botRecommendationId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      encryptionSetting: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateBotRecommendationCommand");
var se_UpdateExportCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/exports/{exportId}");
  b.p("exportId", () => input.exportId, "{exportId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      filePassword: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateExportCommand");
var se_UpdateIntentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}");
  b.p("intentId", () => input.intentId, "{intentId}", false);
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [],
      dialogCodeHook: (_) => (0, import_smithy_client._json)(_),
      fulfillmentCodeHook: (_) => se_FulfillmentCodeHookSettings(_, context),
      initialResponseSetting: (_) => se_InitialResponseSetting(_, context),
      inputContexts: (_) => (0, import_smithy_client._json)(_),
      intentClosingSetting: (_) => se_IntentClosingSetting(_, context),
      intentConfirmationSetting: (_) => se_IntentConfirmationSetting(_, context),
      intentName: [],
      kendraConfiguration: (_) => (0, import_smithy_client._json)(_),
      outputContexts: (_) => (0, import_smithy_client._json)(_),
      parentIntentSignature: [],
      qnAIntentConfiguration: (_) => (0, import_smithy_client._json)(_),
      sampleUtterances: (_) => (0, import_smithy_client._json)(_),
      slotPriorities: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateIntentCommand");
var se_UpdateResourcePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/policy/{resourceArn}");
  b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
  const query = (0, import_smithy_client.map)({
    [_eRI]: [, input[_eRI]]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      policy: []
    })
  );
  b.m("PUT").h(headers).q(query).b(body);
  return b.build();
}, "se_UpdateResourcePolicyCommand");
var se_UpdateSlotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}");
  b.p("slotId", () => input.slotId, "{slotId}", false);
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  b.p("intentId", () => input.intentId, "{intentId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [],
      multipleValuesSetting: (_) => (0, import_smithy_client._json)(_),
      obfuscationSetting: (_) => (0, import_smithy_client._json)(_),
      slotName: [],
      slotTypeId: [],
      subSlotSetting: (_) => se_SubSlotSetting(_, context),
      valueElicitationSetting: (_) => se_SlotValueElicitationSetting(_, context)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateSlotCommand");
var se_UpdateSlotTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}");
  b.p("slotTypeId", () => input.slotTypeId, "{slotTypeId}", false);
  b.p("botId", () => input.botId, "{botId}", false);
  b.p("botVersion", () => input.botVersion, "{botVersion}", false);
  b.p("localeId", () => input.localeId, "{localeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      compositeSlotTypeSetting: (_) => (0, import_smithy_client._json)(_),
      description: [],
      externalSourceSetting: (_) => (0, import_smithy_client._json)(_),
      parentSlotTypeSignature: [],
      slotTypeName: [],
      slotTypeValues: (_) => (0, import_smithy_client._json)(_),
      valueSelectionSetting: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateSlotTypeCommand");
var se_UpdateTestSetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/testsets/{testSetId}");
  b.p("testSetId", () => input.testSetId, "{testSetId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [],
      testSetName: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateTestSetCommand");
var de_BatchCreateCustomVocabularyItemCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    errors: import_smithy_client._json,
    localeId: import_smithy_client.expectString,
    resources: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchCreateCustomVocabularyItemCommand");
var de_BatchDeleteCustomVocabularyItemCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    errors: import_smithy_client._json,
    localeId: import_smithy_client.expectString,
    resources: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchDeleteCustomVocabularyItemCommand");
var de_BatchUpdateCustomVocabularyItemCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    errors: import_smithy_client._json,
    localeId: import_smithy_client.expectString,
    resources: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchUpdateCustomVocabularyItemCommand");
var de_BuildBotLocaleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botLocaleStatus: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    lastBuildSubmittedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    localeId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BuildBotLocaleCommand");
var de_CreateBotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botMembers: import_smithy_client._json,
    botName: import_smithy_client.expectString,
    botStatus: import_smithy_client.expectString,
    botTags: import_smithy_client._json,
    botType: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    dataPrivacy: import_smithy_client._json,
    description: import_smithy_client.expectString,
    idleSessionTTLInSeconds: import_smithy_client.expectInt32,
    roleArn: import_smithy_client.expectString,
    testBotAliasTags: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateBotCommand");
var de_CreateBotAliasCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botAliasId: import_smithy_client.expectString,
    botAliasLocaleSettings: import_smithy_client._json,
    botAliasName: import_smithy_client.expectString,
    botAliasStatus: import_smithy_client.expectString,
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    conversationLogSettings: import_smithy_client._json,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    sentimentAnalysisSettings: import_smithy_client._json,
    tags: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateBotAliasCommand");
var de_CreateBotLocaleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botLocaleStatus: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    generativeAISettings: import_smithy_client._json,
    localeId: import_smithy_client.expectString,
    localeName: import_smithy_client.expectString,
    nluIntentConfidenceThreshold: import_smithy_client.limitedParseDouble,
    voiceSettings: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateBotLocaleCommand");
var de_CreateBotReplicaCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botReplicaStatus: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    replicaRegion: import_smithy_client.expectString,
    sourceRegion: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateBotReplicaCommand");
var de_CreateBotVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botStatus: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    botVersionLocaleSpecification: import_smithy_client._json,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateBotVersionCommand");
var de_CreateExportCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    exportId: import_smithy_client.expectString,
    exportStatus: import_smithy_client.expectString,
    fileFormat: import_smithy_client.expectString,
    resourceSpecification: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateExportCommand");
var de_CreateIntentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    dialogCodeHook: import_smithy_client._json,
    fulfillmentCodeHook: (_) => de_FulfillmentCodeHookSettings(_, context),
    initialResponseSetting: (_) => de_InitialResponseSetting(_, context),
    inputContexts: import_smithy_client._json,
    intentClosingSetting: (_) => de_IntentClosingSetting(_, context),
    intentConfirmationSetting: (_) => de_IntentConfirmationSetting(_, context),
    intentId: import_smithy_client.expectString,
    intentName: import_smithy_client.expectString,
    kendraConfiguration: import_smithy_client._json,
    localeId: import_smithy_client.expectString,
    outputContexts: import_smithy_client._json,
    parentIntentSignature: import_smithy_client.expectString,
    qnAIntentConfiguration: import_smithy_client._json,
    sampleUtterances: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateIntentCommand");
var de_CreateResourcePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    resourceArn: import_smithy_client.expectString,
    revisionId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateResourcePolicyCommand");
var de_CreateResourcePolicyStatementCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    resourceArn: import_smithy_client.expectString,
    revisionId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateResourcePolicyStatementCommand");
var de_CreateSlotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    intentId: import_smithy_client.expectString,
    localeId: import_smithy_client.expectString,
    multipleValuesSetting: import_smithy_client._json,
    obfuscationSetting: import_smithy_client._json,
    slotId: import_smithy_client.expectString,
    slotName: import_smithy_client.expectString,
    slotTypeId: import_smithy_client.expectString,
    subSlotSetting: (_) => de_SubSlotSetting(_, context),
    valueElicitationSetting: (_) => de_SlotValueElicitationSetting(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateSlotCommand");
var de_CreateSlotTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    compositeSlotTypeSetting: import_smithy_client._json,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    externalSourceSetting: import_smithy_client._json,
    localeId: import_smithy_client.expectString,
    parentSlotTypeSignature: import_smithy_client.expectString,
    slotTypeId: import_smithy_client.expectString,
    slotTypeName: import_smithy_client.expectString,
    slotTypeValues: import_smithy_client._json,
    valueSelectionSetting: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateSlotTypeCommand");
var de_CreateTestSetDiscrepancyReportCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    target: import_smithy_client._json,
    testSetDiscrepancyReportId: import_smithy_client.expectString,
    testSetId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateTestSetDiscrepancyReportCommand");
var de_CreateUploadUrlCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    importId: import_smithy_client.expectString,
    uploadUrl: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateUploadUrlCommand");
var de_DeleteBotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botStatus: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteBotCommand");
var de_DeleteBotAliasCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botAliasId: import_smithy_client.expectString,
    botAliasStatus: import_smithy_client.expectString,
    botId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteBotAliasCommand");
var de_DeleteBotLocaleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botLocaleStatus: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    localeId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteBotLocaleCommand");
var de_DeleteBotReplicaCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botReplicaStatus: import_smithy_client.expectString,
    replicaRegion: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteBotReplicaCommand");
var de_DeleteBotVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botStatus: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteBotVersionCommand");
var de_DeleteCustomVocabularyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    customVocabularyStatus: import_smithy_client.expectString,
    localeId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteCustomVocabularyCommand");
var de_DeleteExportCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    exportId: import_smithy_client.expectString,
    exportStatus: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteExportCommand");
var de_DeleteImportCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    importId: import_smithy_client.expectString,
    importStatus: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteImportCommand");
var de_DeleteIntentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteIntentCommand");
var de_DeleteResourcePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    resourceArn: import_smithy_client.expectString,
    revisionId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteResourcePolicyCommand");
var de_DeleteResourcePolicyStatementCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    resourceArn: import_smithy_client.expectString,
    revisionId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteResourcePolicyStatementCommand");
var de_DeleteSlotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteSlotCommand");
var de_DeleteSlotTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteSlotTypeCommand");
var de_DeleteTestSetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteTestSetCommand");
var de_DeleteUtterancesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteUtterancesCommand");
var de_DescribeBotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botMembers: import_smithy_client._json,
    botName: import_smithy_client.expectString,
    botStatus: import_smithy_client.expectString,
    botType: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    dataPrivacy: import_smithy_client._json,
    description: import_smithy_client.expectString,
    failureReasons: import_smithy_client._json,
    idleSessionTTLInSeconds: import_smithy_client.expectInt32,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    roleArn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeBotCommand");
var de_DescribeBotAliasCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botAliasHistoryEvents: (_) => de_BotAliasHistoryEventsList(_, context),
    botAliasId: import_smithy_client.expectString,
    botAliasLocaleSettings: import_smithy_client._json,
    botAliasName: import_smithy_client.expectString,
    botAliasStatus: import_smithy_client.expectString,
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    conversationLogSettings: import_smithy_client._json,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    parentBotNetworks: import_smithy_client._json,
    sentimentAnalysisSettings: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeBotAliasCommand");
var de_DescribeBotLocaleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botLocaleHistoryEvents: (_) => de_BotLocaleHistoryEventsList(_, context),
    botLocaleStatus: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    failureReasons: import_smithy_client._json,
    generativeAISettings: import_smithy_client._json,
    intentsCount: import_smithy_client.expectInt32,
    lastBuildSubmittedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    localeId: import_smithy_client.expectString,
    localeName: import_smithy_client.expectString,
    nluIntentConfidenceThreshold: import_smithy_client.limitedParseDouble,
    recommendedActions: import_smithy_client._json,
    slotTypesCount: import_smithy_client.expectInt32,
    voiceSettings: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeBotLocaleCommand");
var de_DescribeBotRecommendationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botRecommendationId: import_smithy_client.expectString,
    botRecommendationResults: import_smithy_client._json,
    botRecommendationStatus: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    encryptionSetting: import_smithy_client._json,
    failureReasons: import_smithy_client._json,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    localeId: import_smithy_client.expectString,
    transcriptSourceSetting: (_) => de_TranscriptSourceSetting(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeBotRecommendationCommand");
var de_DescribeBotReplicaCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botReplicaStatus: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    failureReasons: import_smithy_client._json,
    replicaRegion: import_smithy_client.expectString,
    sourceRegion: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeBotReplicaCommand");
var de_DescribeBotResourceGenerationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    failureReasons: import_smithy_client._json,
    generatedBotLocaleUrl: import_smithy_client.expectString,
    generationId: import_smithy_client.expectString,
    generationInputPrompt: import_smithy_client.expectString,
    generationStatus: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    localeId: import_smithy_client.expectString,
    modelArn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeBotResourceGenerationCommand");
var de_DescribeBotVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botMembers: import_smithy_client._json,
    botName: import_smithy_client.expectString,
    botStatus: import_smithy_client.expectString,
    botType: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    dataPrivacy: import_smithy_client._json,
    description: import_smithy_client.expectString,
    failureReasons: import_smithy_client._json,
    idleSessionTTLInSeconds: import_smithy_client.expectInt32,
    parentBotNetworks: import_smithy_client._json,
    roleArn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeBotVersionCommand");
var de_DescribeCustomVocabularyMetadataCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    customVocabularyStatus: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    localeId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeCustomVocabularyMetadataCommand");
var de_DescribeExportCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    downloadUrl: import_smithy_client.expectString,
    exportId: import_smithy_client.expectString,
    exportStatus: import_smithy_client.expectString,
    failureReasons: import_smithy_client._json,
    fileFormat: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    resourceSpecification: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeExportCommand");
var de_DescribeImportCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    failureReasons: import_smithy_client._json,
    importId: import_smithy_client.expectString,
    importStatus: import_smithy_client.expectString,
    importedResourceId: import_smithy_client.expectString,
    importedResourceName: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    mergeStrategy: import_smithy_client.expectString,
    resourceSpecification: (_) => de_ImportResourceSpecification(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeImportCommand");
var de_DescribeIntentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    dialogCodeHook: import_smithy_client._json,
    fulfillmentCodeHook: (_) => de_FulfillmentCodeHookSettings(_, context),
    initialResponseSetting: (_) => de_InitialResponseSetting(_, context),
    inputContexts: import_smithy_client._json,
    intentClosingSetting: (_) => de_IntentClosingSetting(_, context),
    intentConfirmationSetting: (_) => de_IntentConfirmationSetting(_, context),
    intentId: import_smithy_client.expectString,
    intentName: import_smithy_client.expectString,
    kendraConfiguration: import_smithy_client._json,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    localeId: import_smithy_client.expectString,
    outputContexts: import_smithy_client._json,
    parentIntentSignature: import_smithy_client.expectString,
    qnAIntentConfiguration: import_smithy_client._json,
    sampleUtterances: import_smithy_client._json,
    slotPriorities: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeIntentCommand");
var de_DescribeResourcePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    policy: import_smithy_client.expectString,
    resourceArn: import_smithy_client.expectString,
    revisionId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeResourcePolicyCommand");
var de_DescribeSlotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    intentId: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    localeId: import_smithy_client.expectString,
    multipleValuesSetting: import_smithy_client._json,
    obfuscationSetting: import_smithy_client._json,
    slotId: import_smithy_client.expectString,
    slotName: import_smithy_client.expectString,
    slotTypeId: import_smithy_client.expectString,
    subSlotSetting: (_) => de_SubSlotSetting(_, context),
    valueElicitationSetting: (_) => de_SlotValueElicitationSetting(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeSlotCommand");
var de_DescribeSlotTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    compositeSlotTypeSetting: import_smithy_client._json,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    externalSourceSetting: import_smithy_client._json,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    localeId: import_smithy_client.expectString,
    parentSlotTypeSignature: import_smithy_client.expectString,
    slotTypeId: import_smithy_client.expectString,
    slotTypeName: import_smithy_client.expectString,
    slotTypeValues: import_smithy_client._json,
    valueSelectionSetting: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeSlotTypeCommand");
var de_DescribeTestExecutionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    apiMode: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    failureReasons: import_smithy_client._json,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    target: import_smithy_client._json,
    testExecutionId: import_smithy_client.expectString,
    testExecutionModality: import_smithy_client.expectString,
    testExecutionStatus: import_smithy_client.expectString,
    testSetId: import_smithy_client.expectString,
    testSetName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeTestExecutionCommand");
var de_DescribeTestSetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    modality: import_smithy_client.expectString,
    numTurns: import_smithy_client.expectInt32,
    roleArn: import_smithy_client.expectString,
    status: import_smithy_client.expectString,
    storageLocation: import_smithy_client._json,
    testSetId: import_smithy_client.expectString,
    testSetName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeTestSetCommand");
var de_DescribeTestSetDiscrepancyReportCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    failureReasons: import_smithy_client._json,
    lastUpdatedDataTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    target: import_smithy_client._json,
    testSetDiscrepancyRawOutputUrl: import_smithy_client.expectString,
    testSetDiscrepancyReportId: import_smithy_client.expectString,
    testSetDiscrepancyReportStatus: import_smithy_client.expectString,
    testSetDiscrepancyTopErrors: import_smithy_client._json,
    testSetId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeTestSetDiscrepancyReportCommand");
var de_DescribeTestSetGenerationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    failureReasons: import_smithy_client._json,
    generationDataSource: (_) => de_TestSetGenerationDataSource(_, context),
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    roleArn: import_smithy_client.expectString,
    storageLocation: import_smithy_client._json,
    testSetGenerationId: import_smithy_client.expectString,
    testSetGenerationStatus: import_smithy_client.expectString,
    testSetId: import_smithy_client.expectString,
    testSetName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeTestSetGenerationCommand");
var de_GenerateBotElementCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    intentId: import_smithy_client.expectString,
    localeId: import_smithy_client.expectString,
    sampleUtterances: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GenerateBotElementCommand");
var de_GetTestExecutionArtifactsUrlCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    downloadArtifactsUrl: import_smithy_client.expectString,
    testExecutionId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetTestExecutionArtifactsUrlCommand");
var de_ListAggregatedUtterancesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    aggregatedUtterancesSummaries: (_) => de_AggregatedUtterancesSummaryList(_, context),
    aggregationDuration: import_smithy_client._json,
    aggregationLastRefreshedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    aggregationWindowEndTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    aggregationWindowStartTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    botAliasId: import_smithy_client.expectString,
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    localeId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListAggregatedUtterancesCommand");
var de_ListBotAliasesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botAliasSummaries: (_) => de_BotAliasSummaryList(_, context),
    botId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListBotAliasesCommand");
var de_ListBotAliasReplicasCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botAliasReplicaSummaries: (_) => de_BotAliasReplicaSummaryList(_, context),
    botId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString,
    replicaRegion: import_smithy_client.expectString,
    sourceRegion: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListBotAliasReplicasCommand");
var de_ListBotLocalesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botLocaleSummaries: (_) => de_BotLocaleSummaryList(_, context),
    botVersion: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListBotLocalesCommand");
var de_ListBotRecommendationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botRecommendationSummaries: (_) => de_BotRecommendationSummaryList(_, context),
    botVersion: import_smithy_client.expectString,
    localeId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListBotRecommendationsCommand");
var de_ListBotReplicasCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botReplicaSummaries: (_) => de_BotReplicaSummaryList(_, context),
    sourceRegion: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListBotReplicasCommand");
var de_ListBotResourceGenerationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    generationSummaries: (_) => de_GenerationSummaryList(_, context),
    localeId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListBotResourceGenerationsCommand");
var de_ListBotsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botSummaries: (_) => de_BotSummaryList(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListBotsCommand");
var de_ListBotVersionReplicasCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersionReplicaSummaries: (_) => de_BotVersionReplicaSummaryList(_, context),
    nextToken: import_smithy_client.expectString,
    replicaRegion: import_smithy_client.expectString,
    sourceRegion: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListBotVersionReplicasCommand");
var de_ListBotVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersionSummaries: (_) => de_BotVersionSummaryList(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListBotVersionsCommand");
var de_ListBuiltInIntentsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    builtInIntentSummaries: import_smithy_client._json,
    localeId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListBuiltInIntentsCommand");
var de_ListBuiltInSlotTypesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    builtInSlotTypeSummaries: import_smithy_client._json,
    localeId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListBuiltInSlotTypesCommand");
var de_ListCustomVocabularyItemsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    customVocabularyItems: import_smithy_client._json,
    localeId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListCustomVocabularyItemsCommand");
var de_ListExportsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    exportSummaries: (_) => de_ExportSummaryList(_, context),
    localeId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListExportsCommand");
var de_ListImportsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    importSummaries: (_) => de_ImportSummaryList(_, context),
    localeId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListImportsCommand");
var de_ListIntentMetricsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString,
    results: (_) => de_AnalyticsIntentResults(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListIntentMetricsCommand");
var de_ListIntentPathsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nodeSummaries: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListIntentPathsCommand");
var de_ListIntentsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    intentSummaries: (_) => de_IntentSummaryList(_, context),
    localeId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListIntentsCommand");
var de_ListIntentStageMetricsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString,
    results: (_) => de_AnalyticsIntentStageResults(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListIntentStageMetricsCommand");
var de_ListRecommendedIntentsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botRecommendationId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    localeId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString,
    summaryList: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListRecommendedIntentsCommand");
var de_ListSessionAnalyticsDataCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString,
    sessions: (_) => de_SessionSpecifications(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListSessionAnalyticsDataCommand");
var de_ListSessionMetricsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString,
    results: (_) => de_AnalyticsSessionResults(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListSessionMetricsCommand");
var de_ListSlotsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    intentId: import_smithy_client.expectString,
    localeId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString,
    slotSummaries: (_) => de_SlotSummaryList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListSlotsCommand");
var de_ListSlotTypesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    localeId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString,
    slotTypeSummaries: (_) => de_SlotTypeSummaryList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListSlotTypesCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    tags: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTagsForResourceCommand");
var de_ListTestExecutionResultItemsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    testExecutionResults: (_) => de_TestExecutionResultItems(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTestExecutionResultItemsCommand");
var de_ListTestExecutionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    testExecutions: (_) => de_TestExecutionSummaryList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTestExecutionsCommand");
var de_ListTestSetRecordsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    testSetRecords: (_) => de_TestSetTurnRecordList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTestSetRecordsCommand");
var de_ListTestSetsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    testSets: (_) => de_TestSetSummaryList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTestSetsCommand");
var de_ListUtteranceAnalyticsDataCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString,
    utterances: (_) => de_UtteranceSpecifications(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListUtteranceAnalyticsDataCommand");
var de_ListUtteranceMetricsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    nextToken: import_smithy_client.expectString,
    results: (_) => de_AnalyticsUtteranceResults(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListUtteranceMetricsCommand");
var de_SearchAssociatedTranscriptsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    associatedTranscripts: import_smithy_client._json,
    botId: import_smithy_client.expectString,
    botRecommendationId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    localeId: import_smithy_client.expectString,
    nextIndex: import_smithy_client.expectInt32,
    totalResults: import_smithy_client.expectInt32
  });
  Object.assign(contents, doc);
  return contents;
}, "de_SearchAssociatedTranscriptsCommand");
var de_StartBotRecommendationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botRecommendationId: import_smithy_client.expectString,
    botRecommendationStatus: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    encryptionSetting: import_smithy_client._json,
    localeId: import_smithy_client.expectString,
    transcriptSourceSetting: (_) => de_TranscriptSourceSetting(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartBotRecommendationCommand");
var de_StartBotResourceGenerationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    generationId: import_smithy_client.expectString,
    generationInputPrompt: import_smithy_client.expectString,
    generationStatus: import_smithy_client.expectString,
    localeId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartBotResourceGenerationCommand");
var de_StartImportCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    importId: import_smithy_client.expectString,
    importStatus: import_smithy_client.expectString,
    mergeStrategy: import_smithy_client.expectString,
    resourceSpecification: (_) => de_ImportResourceSpecification(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartImportCommand");
var de_StartTestExecutionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    apiMode: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    target: import_smithy_client._json,
    testExecutionId: import_smithy_client.expectString,
    testExecutionModality: import_smithy_client.expectString,
    testSetId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartTestExecutionCommand");
var de_StartTestSetGenerationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    generationDataSource: (_) => de_TestSetGenerationDataSource(_, context),
    roleArn: import_smithy_client.expectString,
    storageLocation: import_smithy_client._json,
    testSetGenerationId: import_smithy_client.expectString,
    testSetGenerationStatus: import_smithy_client.expectString,
    testSetName: import_smithy_client.expectString,
    testSetTags: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartTestSetGenerationCommand");
var de_StopBotRecommendationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botRecommendationId: import_smithy_client.expectString,
    botRecommendationStatus: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    localeId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StopBotRecommendationCommand");
var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_TagResourceCommand");
var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UntagResourceCommand");
var de_UpdateBotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botMembers: import_smithy_client._json,
    botName: import_smithy_client.expectString,
    botStatus: import_smithy_client.expectString,
    botType: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    dataPrivacy: import_smithy_client._json,
    description: import_smithy_client.expectString,
    idleSessionTTLInSeconds: import_smithy_client.expectInt32,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    roleArn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateBotCommand");
var de_UpdateBotAliasCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botAliasId: import_smithy_client.expectString,
    botAliasLocaleSettings: import_smithy_client._json,
    botAliasName: import_smithy_client.expectString,
    botAliasStatus: import_smithy_client.expectString,
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    conversationLogSettings: import_smithy_client._json,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    sentimentAnalysisSettings: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateBotAliasCommand");
var de_UpdateBotLocaleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botLocaleStatus: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    failureReasons: import_smithy_client._json,
    generativeAISettings: import_smithy_client._json,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    localeId: import_smithy_client.expectString,
    localeName: import_smithy_client.expectString,
    nluIntentConfidenceThreshold: import_smithy_client.limitedParseDouble,
    recommendedActions: import_smithy_client._json,
    voiceSettings: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateBotLocaleCommand");
var de_UpdateBotRecommendationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botRecommendationId: import_smithy_client.expectString,
    botRecommendationStatus: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    encryptionSetting: import_smithy_client._json,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    localeId: import_smithy_client.expectString,
    transcriptSourceSetting: (_) => de_TranscriptSourceSetting(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateBotRecommendationCommand");
var de_UpdateExportCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    exportId: import_smithy_client.expectString,
    exportStatus: import_smithy_client.expectString,
    fileFormat: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    resourceSpecification: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateExportCommand");
var de_UpdateIntentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    dialogCodeHook: import_smithy_client._json,
    fulfillmentCodeHook: (_) => de_FulfillmentCodeHookSettings(_, context),
    initialResponseSetting: (_) => de_InitialResponseSetting(_, context),
    inputContexts: import_smithy_client._json,
    intentClosingSetting: (_) => de_IntentClosingSetting(_, context),
    intentConfirmationSetting: (_) => de_IntentConfirmationSetting(_, context),
    intentId: import_smithy_client.expectString,
    intentName: import_smithy_client.expectString,
    kendraConfiguration: import_smithy_client._json,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    localeId: import_smithy_client.expectString,
    outputContexts: import_smithy_client._json,
    parentIntentSignature: import_smithy_client.expectString,
    qnAIntentConfiguration: import_smithy_client._json,
    sampleUtterances: import_smithy_client._json,
    slotPriorities: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateIntentCommand");
var de_UpdateResourcePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    resourceArn: import_smithy_client.expectString,
    revisionId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateResourcePolicyCommand");
var de_UpdateSlotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    intentId: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    localeId: import_smithy_client.expectString,
    multipleValuesSetting: import_smithy_client._json,
    obfuscationSetting: import_smithy_client._json,
    slotId: import_smithy_client.expectString,
    slotName: import_smithy_client.expectString,
    slotTypeId: import_smithy_client.expectString,
    subSlotSetting: (_) => de_SubSlotSetting(_, context),
    valueElicitationSetting: (_) => de_SlotValueElicitationSetting(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateSlotCommand");
var de_UpdateSlotTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    compositeSlotTypeSetting: import_smithy_client._json,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    externalSourceSetting: import_smithy_client._json,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    localeId: import_smithy_client.expectString,
    parentSlotTypeSignature: import_smithy_client.expectString,
    slotTypeId: import_smithy_client.expectString,
    slotTypeName: import_smithy_client.expectString,
    slotTypeValues: import_smithy_client._json,
    valueSelectionSetting: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateSlotTypeCommand");
var de_UpdateTestSetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    modality: import_smithy_client.expectString,
    numTurns: import_smithy_client.expectInt32,
    roleArn: import_smithy_client.expectString,
    status: import_smithy_client.expectString,
    storageLocation: import_smithy_client._json,
    testSetId: import_smithy_client.expectString,
    testSetName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateTestSetCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServerException":
    case "com.amazonaws.lexmodelsv2#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.lexmodelsv2#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceQuotaExceededException":
    case "com.amazonaws.lexmodelsv2#ServiceQuotaExceededException":
      throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.lexmodelsv2#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.lexmodelsv2#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.lexmodelsv2#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "PreconditionFailedException":
    case "com.amazonaws.lexmodelsv2#PreconditionFailedException":
      throw await de_PreconditionFailedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(LexModelsV2ServiceException);
var de_ConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ConflictExceptionRes");
var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalServerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalServerExceptionRes");
var de_PreconditionFailedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new PreconditionFailedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_PreconditionFailedExceptionRes");
var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ResourceNotFoundExceptionRes");
var de_ServiceQuotaExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceQuotaExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ServiceQuotaExceededExceptionRes");
var de_ThrottlingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({
    [_rAS]: [() => void 0 !== parsedOutput.headers[_ra], () => (0, import_smithy_client.strictParseInt32)(parsedOutput.headers[_ra])]
  });
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ThrottlingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ThrottlingExceptionRes");
var de_ValidationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ValidationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ValidationExceptionRes");
var se_BotLocaleImportSpecification = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    botId: [],
    botVersion: [],
    localeId: [],
    nluIntentConfidenceThreshold: import_smithy_client.serializeFloat,
    voiceSettings: import_smithy_client._json
  });
}, "se_BotLocaleImportSpecification");
var se_ConditionalBranch = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    condition: import_smithy_client._json,
    name: [],
    nextStep: (_) => se_DialogState(_, context),
    response: import_smithy_client._json
  });
}, "se_ConditionalBranch");
var se_ConditionalBranches = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_ConditionalBranch(entry, context);
  });
}, "se_ConditionalBranches");
var se_ConditionalSpecification = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    active: [],
    conditionalBranches: (_) => se_ConditionalBranches(_, context),
    defaultBranch: (_) => se_DefaultConditionalBranch(_, context)
  });
}, "se_ConditionalSpecification");
var se_ConversationLogsDataSource = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    botAliasId: [],
    botId: [],
    filter: (_) => se_ConversationLogsDataSourceFilterBy(_, context),
    localeId: []
  });
}, "se_ConversationLogsDataSource");
var se_ConversationLogsDataSourceFilterBy = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    endTime: (_) => Math.round(_.getTime() / 1e3),
    inputMode: [],
    startTime: (_) => Math.round(_.getTime() / 1e3)
  });
}, "se_ConversationLogsDataSourceFilterBy");
var se_DateRangeFilter = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    endDateTime: (_) => Math.round(_.getTime() / 1e3),
    startDateTime: (_) => Math.round(_.getTime() / 1e3)
  });
}, "se_DateRangeFilter");
var se_DefaultConditionalBranch = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    nextStep: (_) => se_DialogState(_, context),
    response: import_smithy_client._json
  });
}, "se_DefaultConditionalBranch");
var se_DialogCodeHookInvocationSetting = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    active: [],
    enableCodeHookInvocation: [],
    invocationLabel: [],
    postCodeHookSpecification: (_) => se_PostDialogCodeHookInvocationSpecification(_, context)
  });
}, "se_DialogCodeHookInvocationSetting");
var se_DialogState = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    dialogAction: import_smithy_client._json,
    intent: (_) => se_IntentOverride(_, context),
    sessionAttributes: import_smithy_client._json
  });
}, "se_DialogState");
var se_FulfillmentCodeHookSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    active: [],
    enabled: [],
    fulfillmentUpdatesSpecification: import_smithy_client._json,
    postFulfillmentStatusSpecification: (_) => se_PostFulfillmentStatusSpecification(_, context)
  });
}, "se_FulfillmentCodeHookSettings");
var se_ImportResourceSpecification = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    botImportSpecification: import_smithy_client._json,
    botLocaleImportSpecification: (_) => se_BotLocaleImportSpecification(_, context),
    customVocabularyImportSpecification: import_smithy_client._json,
    testSetImportResourceSpecification: import_smithy_client._json
  });
}, "se_ImportResourceSpecification");
var se_InitialResponseSetting = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    codeHook: (_) => se_DialogCodeHookInvocationSetting(_, context),
    conditional: (_) => se_ConditionalSpecification(_, context),
    initialResponse: import_smithy_client._json,
    nextStep: (_) => se_DialogState(_, context)
  });
}, "se_InitialResponseSetting");
var se_IntentClosingSetting = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    active: [],
    closingResponse: import_smithy_client._json,
    conditional: (_) => se_ConditionalSpecification(_, context),
    nextStep: (_) => se_DialogState(_, context)
  });
}, "se_IntentClosingSetting");
var se_IntentConfirmationSetting = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    active: [],
    codeHook: (_) => se_DialogCodeHookInvocationSetting(_, context),
    confirmationConditional: (_) => se_ConditionalSpecification(_, context),
    confirmationNextStep: (_) => se_DialogState(_, context),
    confirmationResponse: import_smithy_client._json,
    declinationConditional: (_) => se_ConditionalSpecification(_, context),
    declinationNextStep: (_) => se_DialogState(_, context),
    declinationResponse: import_smithy_client._json,
    elicitationCodeHook: import_smithy_client._json,
    failureConditional: (_) => se_ConditionalSpecification(_, context),
    failureNextStep: (_) => se_DialogState(_, context),
    failureResponse: import_smithy_client._json,
    promptSpecification: import_smithy_client._json
  });
}, "se_IntentConfirmationSetting");
var se_IntentOverride = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    name: [],
    slots: (_) => se_SlotValueOverrideMap(_, context)
  });
}, "se_IntentOverride");
var se_LexTranscriptFilter = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    dateRangeFilter: (_) => se_DateRangeFilter(_, context)
  });
}, "se_LexTranscriptFilter");
var se_PostDialogCodeHookInvocationSpecification = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    failureConditional: (_) => se_ConditionalSpecification(_, context),
    failureNextStep: (_) => se_DialogState(_, context),
    failureResponse: import_smithy_client._json,
    successConditional: (_) => se_ConditionalSpecification(_, context),
    successNextStep: (_) => se_DialogState(_, context),
    successResponse: import_smithy_client._json,
    timeoutConditional: (_) => se_ConditionalSpecification(_, context),
    timeoutNextStep: (_) => se_DialogState(_, context),
    timeoutResponse: import_smithy_client._json
  });
}, "se_PostDialogCodeHookInvocationSpecification");
var se_PostFulfillmentStatusSpecification = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    failureConditional: (_) => se_ConditionalSpecification(_, context),
    failureNextStep: (_) => se_DialogState(_, context),
    failureResponse: import_smithy_client._json,
    successConditional: (_) => se_ConditionalSpecification(_, context),
    successNextStep: (_) => se_DialogState(_, context),
    successResponse: import_smithy_client._json,
    timeoutConditional: (_) => se_ConditionalSpecification(_, context),
    timeoutNextStep: (_) => se_DialogState(_, context),
    timeoutResponse: import_smithy_client._json
  });
}, "se_PostFulfillmentStatusSpecification");
var se_S3BucketTranscriptSource = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    kmsKeyArn: [],
    pathFormat: import_smithy_client._json,
    s3BucketName: [],
    transcriptFilter: (_) => se_TranscriptFilter(_, context),
    transcriptFormat: []
  });
}, "se_S3BucketTranscriptSource");
var se_SlotCaptureSetting = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    captureConditional: (_) => se_ConditionalSpecification(_, context),
    captureNextStep: (_) => se_DialogState(_, context),
    captureResponse: import_smithy_client._json,
    codeHook: (_) => se_DialogCodeHookInvocationSetting(_, context),
    elicitationCodeHook: import_smithy_client._json,
    failureConditional: (_) => se_ConditionalSpecification(_, context),
    failureNextStep: (_) => se_DialogState(_, context),
    failureResponse: import_smithy_client._json
  });
}, "se_SlotCaptureSetting");
var se_SlotValueElicitationSetting = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    defaultValueSpecification: import_smithy_client._json,
    promptSpecification: import_smithy_client._json,
    sampleUtterances: import_smithy_client._json,
    slotCaptureSetting: (_) => se_SlotCaptureSetting(_, context),
    slotConstraint: [],
    slotResolutionSetting: import_smithy_client._json,
    waitAndContinueSpecification: import_smithy_client._json
  });
}, "se_SlotValueElicitationSetting");
var se_SlotValueOverride = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    shape: [],
    value: import_smithy_client._json,
    values: (_) => se_SlotValues(_, context)
  });
}, "se_SlotValueOverride");
var se_SlotValueOverrideMap = /* @__PURE__ */ __name((input, context) => {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_SlotValueOverride(value, context);
    return acc;
  }, {});
}, "se_SlotValueOverrideMap");
var se_SlotValues = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_SlotValueOverride(entry, context);
  });
}, "se_SlotValues");
var se_Specifications = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    slotTypeId: [],
    valueElicitationSetting: import_smithy_client._json
  });
}, "se_Specifications");
var se_SubSlotSetting = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    expression: [],
    slotSpecifications: (_) => se_SubSlotSpecificationMap(_, context)
  });
}, "se_SubSlotSetting");
var se_SubSlotSpecificationMap = /* @__PURE__ */ __name((input, context) => {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_Specifications(value, context);
    return acc;
  }, {});
}, "se_SubSlotSpecificationMap");
var se_TestSetGenerationDataSource = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    conversationLogsDataSource: (_) => se_ConversationLogsDataSource(_, context)
  });
}, "se_TestSetGenerationDataSource");
var se_TranscriptFilter = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    lexTranscriptFilter: (_) => se_LexTranscriptFilter(_, context)
  });
}, "se_TranscriptFilter");
var se_TranscriptSourceSetting = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    s3BucketTranscriptSource: (_) => se_S3BucketTranscriptSource(_, context)
  });
}, "se_TranscriptSourceSetting");
var de_AggregatedUtterancesSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    containsDataFromDeletedResources: import_smithy_client.expectBoolean,
    hitCount: import_smithy_client.expectInt32,
    missedCount: import_smithy_client.expectInt32,
    utterance: import_smithy_client.expectString,
    utteranceFirstRecordedInAggregationDuration: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    utteranceLastRecordedInAggregationDuration: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_AggregatedUtterancesSummary");
var de_AggregatedUtterancesSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AggregatedUtterancesSummary(entry, context);
  });
  return retVal;
}, "de_AggregatedUtterancesSummaryList");
var de_AnalyticsIntentMetricResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    name: import_smithy_client.expectString,
    statistic: import_smithy_client.expectString,
    value: import_smithy_client.limitedParseDouble
  });
}, "de_AnalyticsIntentMetricResult");
var de_AnalyticsIntentMetricResults = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AnalyticsIntentMetricResult(entry, context);
  });
  return retVal;
}, "de_AnalyticsIntentMetricResults");
var de_AnalyticsIntentResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    binKeys: import_smithy_client._json,
    groupByKeys: import_smithy_client._json,
    metricsResults: (_) => de_AnalyticsIntentMetricResults(_, context)
  });
}, "de_AnalyticsIntentResult");
var de_AnalyticsIntentResults = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AnalyticsIntentResult(entry, context);
  });
  return retVal;
}, "de_AnalyticsIntentResults");
var de_AnalyticsIntentStageMetricResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    name: import_smithy_client.expectString,
    statistic: import_smithy_client.expectString,
    value: import_smithy_client.limitedParseDouble
  });
}, "de_AnalyticsIntentStageMetricResult");
var de_AnalyticsIntentStageMetricResults = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AnalyticsIntentStageMetricResult(entry, context);
  });
  return retVal;
}, "de_AnalyticsIntentStageMetricResults");
var de_AnalyticsIntentStageResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    binKeys: import_smithy_client._json,
    groupByKeys: import_smithy_client._json,
    metricsResults: (_) => de_AnalyticsIntentStageMetricResults(_, context)
  });
}, "de_AnalyticsIntentStageResult");
var de_AnalyticsIntentStageResults = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AnalyticsIntentStageResult(entry, context);
  });
  return retVal;
}, "de_AnalyticsIntentStageResults");
var de_AnalyticsSessionMetricResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    name: import_smithy_client.expectString,
    statistic: import_smithy_client.expectString,
    value: import_smithy_client.limitedParseDouble
  });
}, "de_AnalyticsSessionMetricResult");
var de_AnalyticsSessionMetricResults = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AnalyticsSessionMetricResult(entry, context);
  });
  return retVal;
}, "de_AnalyticsSessionMetricResults");
var de_AnalyticsSessionResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    binKeys: import_smithy_client._json,
    groupByKeys: import_smithy_client._json,
    metricsResults: (_) => de_AnalyticsSessionMetricResults(_, context)
  });
}, "de_AnalyticsSessionResult");
var de_AnalyticsSessionResults = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AnalyticsSessionResult(entry, context);
  });
  return retVal;
}, "de_AnalyticsSessionResults");
var de_AnalyticsUtteranceMetricResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    name: import_smithy_client.expectString,
    statistic: import_smithy_client.expectString,
    value: import_smithy_client.limitedParseDouble
  });
}, "de_AnalyticsUtteranceMetricResult");
var de_AnalyticsUtteranceMetricResults = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AnalyticsUtteranceMetricResult(entry, context);
  });
  return retVal;
}, "de_AnalyticsUtteranceMetricResults");
var de_AnalyticsUtteranceResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    attributeResults: import_smithy_client._json,
    binKeys: import_smithy_client._json,
    groupByKeys: import_smithy_client._json,
    metricsResults: (_) => de_AnalyticsUtteranceMetricResults(_, context)
  });
}, "de_AnalyticsUtteranceResult");
var de_AnalyticsUtteranceResults = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AnalyticsUtteranceResult(entry, context);
  });
  return retVal;
}, "de_AnalyticsUtteranceResults");
var de_BotAliasHistoryEvent = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    botVersion: import_smithy_client.expectString,
    endDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    startDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_BotAliasHistoryEvent");
var de_BotAliasHistoryEventsList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BotAliasHistoryEvent(entry, context);
  });
  return retVal;
}, "de_BotAliasHistoryEventsList");
var de_BotAliasReplicaSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    botAliasId: import_smithy_client.expectString,
    botAliasReplicationStatus: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    failureReasons: import_smithy_client._json,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_BotAliasReplicaSummary");
var de_BotAliasReplicaSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BotAliasReplicaSummary(entry, context);
  });
  return retVal;
}, "de_BotAliasReplicaSummaryList");
var de_BotAliasSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    botAliasId: import_smithy_client.expectString,
    botAliasName: import_smithy_client.expectString,
    botAliasStatus: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_BotAliasSummary");
var de_BotAliasSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BotAliasSummary(entry, context);
  });
  return retVal;
}, "de_BotAliasSummaryList");
var de_BotLocaleHistoryEvent = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    event: import_smithy_client.expectString,
    eventDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_BotLocaleHistoryEvent");
var de_BotLocaleHistoryEventsList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BotLocaleHistoryEvent(entry, context);
  });
  return retVal;
}, "de_BotLocaleHistoryEventsList");
var de_BotLocaleImportSpecification = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    botId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    localeId: import_smithy_client.expectString,
    nluIntentConfidenceThreshold: import_smithy_client.limitedParseDouble,
    voiceSettings: import_smithy_client._json
  });
}, "de_BotLocaleImportSpecification");
var de_BotLocaleSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    botLocaleStatus: import_smithy_client.expectString,
    description: import_smithy_client.expectString,
    lastBuildSubmittedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    localeId: import_smithy_client.expectString,
    localeName: import_smithy_client.expectString
  });
}, "de_BotLocaleSummary");
var de_BotLocaleSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BotLocaleSummary(entry, context);
  });
  return retVal;
}, "de_BotLocaleSummaryList");
var de_BotRecommendationSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    botRecommendationId: import_smithy_client.expectString,
    botRecommendationStatus: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_BotRecommendationSummary");
var de_BotRecommendationSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BotRecommendationSummary(entry, context);
  });
  return retVal;
}, "de_BotRecommendationSummaryList");
var de_BotReplicaSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    botReplicaStatus: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    failureReasons: import_smithy_client._json,
    replicaRegion: import_smithy_client.expectString
  });
}, "de_BotReplicaSummary");
var de_BotReplicaSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BotReplicaSummary(entry, context);
  });
  return retVal;
}, "de_BotReplicaSummaryList");
var de_BotSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    botId: import_smithy_client.expectString,
    botName: import_smithy_client.expectString,
    botStatus: import_smithy_client.expectString,
    botType: import_smithy_client.expectString,
    description: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    latestBotVersion: import_smithy_client.expectString
  });
}, "de_BotSummary");
var de_BotSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BotSummary(entry, context);
  });
  return retVal;
}, "de_BotSummaryList");
var de_BotVersionReplicaSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    botVersion: import_smithy_client.expectString,
    botVersionReplicationStatus: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    failureReasons: import_smithy_client._json
  });
}, "de_BotVersionReplicaSummary");
var de_BotVersionReplicaSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BotVersionReplicaSummary(entry, context);
  });
  return retVal;
}, "de_BotVersionReplicaSummaryList");
var de_BotVersionSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    botName: import_smithy_client.expectString,
    botStatus: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString
  });
}, "de_BotVersionSummary");
var de_BotVersionSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BotVersionSummary(entry, context);
  });
  return retVal;
}, "de_BotVersionSummaryList");
var de_ConditionalBranch = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    condition: import_smithy_client._json,
    name: import_smithy_client.expectString,
    nextStep: (_) => de_DialogState(_, context),
    response: import_smithy_client._json
  });
}, "de_ConditionalBranch");
var de_ConditionalBranches = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ConditionalBranch(entry, context);
  });
  return retVal;
}, "de_ConditionalBranches");
var de_ConditionalSpecification = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    active: import_smithy_client.expectBoolean,
    conditionalBranches: (_) => de_ConditionalBranches(_, context),
    defaultBranch: (_) => de_DefaultConditionalBranch(_, context)
  });
}, "de_ConditionalSpecification");
var de_ConversationLogsDataSource = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    botAliasId: import_smithy_client.expectString,
    botId: import_smithy_client.expectString,
    filter: (_) => de_ConversationLogsDataSourceFilterBy(_, context),
    localeId: import_smithy_client.expectString
  });
}, "de_ConversationLogsDataSource");
var de_ConversationLogsDataSourceFilterBy = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    endTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    inputMode: import_smithy_client.expectString,
    startTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_ConversationLogsDataSourceFilterBy");
var de_DateRangeFilter = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    endDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    startDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_DateRangeFilter");
var de_DefaultConditionalBranch = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    nextStep: (_) => de_DialogState(_, context),
    response: import_smithy_client._json
  });
}, "de_DefaultConditionalBranch");
var de_DialogCodeHookInvocationSetting = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    active: import_smithy_client.expectBoolean,
    enableCodeHookInvocation: import_smithy_client.expectBoolean,
    invocationLabel: import_smithy_client.expectString,
    postCodeHookSpecification: (_) => de_PostDialogCodeHookInvocationSpecification(_, context)
  });
}, "de_DialogCodeHookInvocationSetting");
var de_DialogState = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    dialogAction: import_smithy_client._json,
    intent: (_) => de_IntentOverride(_, context),
    sessionAttributes: import_smithy_client._json
  });
}, "de_DialogState");
var de_ExportSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    exportId: import_smithy_client.expectString,
    exportStatus: import_smithy_client.expectString,
    fileFormat: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    resourceSpecification: import_smithy_client._json
  });
}, "de_ExportSummary");
var de_ExportSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ExportSummary(entry, context);
  });
  return retVal;
}, "de_ExportSummaryList");
var de_FulfillmentCodeHookSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    active: import_smithy_client.expectBoolean,
    enabled: import_smithy_client.expectBoolean,
    fulfillmentUpdatesSpecification: import_smithy_client._json,
    postFulfillmentStatusSpecification: (_) => de_PostFulfillmentStatusSpecification(_, context)
  });
}, "de_FulfillmentCodeHookSettings");
var de_GenerationSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    generationId: import_smithy_client.expectString,
    generationStatus: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_GenerationSummary");
var de_GenerationSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_GenerationSummary(entry, context);
  });
  return retVal;
}, "de_GenerationSummaryList");
var de_ImportResourceSpecification = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    botImportSpecification: import_smithy_client._json,
    botLocaleImportSpecification: (_) => de_BotLocaleImportSpecification(_, context),
    customVocabularyImportSpecification: import_smithy_client._json,
    testSetImportResourceSpecification: import_smithy_client._json
  });
}, "de_ImportResourceSpecification");
var de_ImportSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    importId: import_smithy_client.expectString,
    importStatus: import_smithy_client.expectString,
    importedResourceId: import_smithy_client.expectString,
    importedResourceName: import_smithy_client.expectString,
    importedResourceType: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    mergeStrategy: import_smithy_client.expectString
  });
}, "de_ImportSummary");
var de_ImportSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ImportSummary(entry, context);
  });
  return retVal;
}, "de_ImportSummaryList");
var de_InitialResponseSetting = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    codeHook: (_) => de_DialogCodeHookInvocationSetting(_, context),
    conditional: (_) => de_ConditionalSpecification(_, context),
    initialResponse: import_smithy_client._json,
    nextStep: (_) => de_DialogState(_, context)
  });
}, "de_InitialResponseSetting");
var de_InputSessionStateSpecification = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    activeContexts: import_smithy_client._json,
    runtimeHints: (_) => de_RuntimeHints(_, context),
    sessionAttributes: import_smithy_client._json
  });
}, "de_InputSessionStateSpecification");
var de_IntentClosingSetting = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    active: import_smithy_client.expectBoolean,
    closingResponse: import_smithy_client._json,
    conditional: (_) => de_ConditionalSpecification(_, context),
    nextStep: (_) => de_DialogState(_, context)
  });
}, "de_IntentClosingSetting");
var de_IntentConfirmationSetting = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    active: import_smithy_client.expectBoolean,
    codeHook: (_) => de_DialogCodeHookInvocationSetting(_, context),
    confirmationConditional: (_) => de_ConditionalSpecification(_, context),
    confirmationNextStep: (_) => de_DialogState(_, context),
    confirmationResponse: import_smithy_client._json,
    declinationConditional: (_) => de_ConditionalSpecification(_, context),
    declinationNextStep: (_) => de_DialogState(_, context),
    declinationResponse: import_smithy_client._json,
    elicitationCodeHook: import_smithy_client._json,
    failureConditional: (_) => de_ConditionalSpecification(_, context),
    failureNextStep: (_) => de_DialogState(_, context),
    failureResponse: import_smithy_client._json,
    promptSpecification: import_smithy_client._json
  });
}, "de_IntentConfirmationSetting");
var de_IntentOverride = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    name: import_smithy_client.expectString,
    slots: (_) => de_SlotValueOverrideMap(_, context)
  });
}, "de_IntentOverride");
var de_IntentSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    description: import_smithy_client.expectString,
    inputContexts: import_smithy_client._json,
    intentId: import_smithy_client.expectString,
    intentName: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    outputContexts: import_smithy_client._json,
    parentIntentSignature: import_smithy_client.expectString
  });
}, "de_IntentSummary");
var de_IntentSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_IntentSummary(entry, context);
  });
  return retVal;
}, "de_IntentSummaryList");
var de_LexTranscriptFilter = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    dateRangeFilter: (_) => de_DateRangeFilter(_, context)
  });
}, "de_LexTranscriptFilter");
var de_PostDialogCodeHookInvocationSpecification = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    failureConditional: (_) => de_ConditionalSpecification(_, context),
    failureNextStep: (_) => de_DialogState(_, context),
    failureResponse: import_smithy_client._json,
    successConditional: (_) => de_ConditionalSpecification(_, context),
    successNextStep: (_) => de_DialogState(_, context),
    successResponse: import_smithy_client._json,
    timeoutConditional: (_) => de_ConditionalSpecification(_, context),
    timeoutNextStep: (_) => de_DialogState(_, context),
    timeoutResponse: import_smithy_client._json
  });
}, "de_PostDialogCodeHookInvocationSpecification");
var de_PostFulfillmentStatusSpecification = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    failureConditional: (_) => de_ConditionalSpecification(_, context),
    failureNextStep: (_) => de_DialogState(_, context),
    failureResponse: import_smithy_client._json,
    successConditional: (_) => de_ConditionalSpecification(_, context),
    successNextStep: (_) => de_DialogState(_, context),
    successResponse: import_smithy_client._json,
    timeoutConditional: (_) => de_ConditionalSpecification(_, context),
    timeoutNextStep: (_) => de_DialogState(_, context),
    timeoutResponse: import_smithy_client._json
  });
}, "de_PostFulfillmentStatusSpecification");
var de_RuntimeHintDetails = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    runtimeHintValues: import_smithy_client._json,
    subSlotHints: (_) => de_SlotHintsSlotMap(_, context)
  });
}, "de_RuntimeHintDetails");
var de_RuntimeHints = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    slotHints: (_) => de_SlotHintsIntentMap(_, context)
  });
}, "de_RuntimeHints");
var de_S3BucketTranscriptSource = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    kmsKeyArn: import_smithy_client.expectString,
    pathFormat: import_smithy_client._json,
    s3BucketName: import_smithy_client.expectString,
    transcriptFilter: (_) => de_TranscriptFilter(_, context),
    transcriptFormat: import_smithy_client.expectString
  });
}, "de_S3BucketTranscriptSource");
var de_SessionSpecification = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    botAliasId: import_smithy_client.expectString,
    botVersion: import_smithy_client.expectString,
    channel: import_smithy_client.expectString,
    conversationDurationSeconds: import_smithy_client.expectLong,
    conversationEndState: import_smithy_client.expectString,
    conversationEndTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    conversationStartTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    invokedIntentSamples: import_smithy_client._json,
    localeId: import_smithy_client.expectString,
    mode: import_smithy_client.expectString,
    numberOfTurns: import_smithy_client.expectLong,
    originatingRequestId: import_smithy_client.expectString,
    sessionId: import_smithy_client.expectString
  });
}, "de_SessionSpecification");
var de_SessionSpecifications = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_SessionSpecification(entry, context);
  });
  return retVal;
}, "de_SessionSpecifications");
var de_SlotCaptureSetting = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    captureConditional: (_) => de_ConditionalSpecification(_, context),
    captureNextStep: (_) => de_DialogState(_, context),
    captureResponse: import_smithy_client._json,
    codeHook: (_) => de_DialogCodeHookInvocationSetting(_, context),
    elicitationCodeHook: import_smithy_client._json,
    failureConditional: (_) => de_ConditionalSpecification(_, context),
    failureNextStep: (_) => de_DialogState(_, context),
    failureResponse: import_smithy_client._json
  });
}, "de_SlotCaptureSetting");
var de_SlotHintsIntentMap = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce(
    (acc, [key, value]) => {
      if (value === null) {
        return acc;
      }
      acc[key] = de_SlotHintsSlotMap(value, context);
      return acc;
    },
    {}
  );
}, "de_SlotHintsIntentMap");
var de_SlotHintsSlotMap = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_RuntimeHintDetails(value, context);
    return acc;
  }, {});
}, "de_SlotHintsSlotMap");
var de_SlotSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    description: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    slotConstraint: import_smithy_client.expectString,
    slotId: import_smithy_client.expectString,
    slotName: import_smithy_client.expectString,
    slotTypeId: import_smithy_client.expectString,
    valueElicitationPromptSpecification: import_smithy_client._json
  });
}, "de_SlotSummary");
var de_SlotSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_SlotSummary(entry, context);
  });
  return retVal;
}, "de_SlotSummaryList");
var de_SlotTypeSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    description: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    parentSlotTypeSignature: import_smithy_client.expectString,
    slotTypeCategory: import_smithy_client.expectString,
    slotTypeId: import_smithy_client.expectString,
    slotTypeName: import_smithy_client.expectString
  });
}, "de_SlotTypeSummary");
var de_SlotTypeSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_SlotTypeSummary(entry, context);
  });
  return retVal;
}, "de_SlotTypeSummaryList");
var de_SlotValueElicitationSetting = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    defaultValueSpecification: import_smithy_client._json,
    promptSpecification: import_smithy_client._json,
    sampleUtterances: import_smithy_client._json,
    slotCaptureSetting: (_) => de_SlotCaptureSetting(_, context),
    slotConstraint: import_smithy_client.expectString,
    slotResolutionSetting: import_smithy_client._json,
    waitAndContinueSpecification: import_smithy_client._json
  });
}, "de_SlotValueElicitationSetting");
var de_SlotValueOverride = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    shape: import_smithy_client.expectString,
    value: import_smithy_client._json,
    values: (_) => de_SlotValues(_, context)
  });
}, "de_SlotValueOverride");
var de_SlotValueOverrideMap = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_SlotValueOverride(value, context);
    return acc;
  }, {});
}, "de_SlotValueOverrideMap");
var de_SlotValues = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_SlotValueOverride(entry, context);
  });
  return retVal;
}, "de_SlotValues");
var de_Specifications = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    slotTypeId: import_smithy_client.expectString,
    valueElicitationSetting: import_smithy_client._json
  });
}, "de_Specifications");
var de_SubSlotSetting = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    expression: import_smithy_client.expectString,
    slotSpecifications: (_) => de_SubSlotSpecificationMap(_, context)
  });
}, "de_SubSlotSetting");
var de_SubSlotSpecificationMap = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_Specifications(value, context);
    return acc;
  }, {});
}, "de_SubSlotSpecificationMap");
var de_TestExecutionResultItems = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    conversationLevelTestResults: import_smithy_client._json,
    intentClassificationTestResults: import_smithy_client._json,
    intentLevelSlotResolutionTestResults: import_smithy_client._json,
    overallTestResults: import_smithy_client._json,
    utteranceLevelTestResults: (_) => de_UtteranceLevelTestResults(_, context)
  });
}, "de_TestExecutionResultItems");
var de_TestExecutionSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    apiMode: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    target: import_smithy_client._json,
    testExecutionId: import_smithy_client.expectString,
    testExecutionModality: import_smithy_client.expectString,
    testExecutionStatus: import_smithy_client.expectString,
    testSetId: import_smithy_client.expectString,
    testSetName: import_smithy_client.expectString
  });
}, "de_TestExecutionSummary");
var de_TestExecutionSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_TestExecutionSummary(entry, context);
  });
  return retVal;
}, "de_TestExecutionSummaryList");
var de_TestSetGenerationDataSource = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    conversationLogsDataSource: (_) => de_ConversationLogsDataSource(_, context)
  });
}, "de_TestSetGenerationDataSource");
var de_TestSetSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    lastUpdatedDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    modality: import_smithy_client.expectString,
    numTurns: import_smithy_client.expectInt32,
    roleArn: import_smithy_client.expectString,
    status: import_smithy_client.expectString,
    storageLocation: import_smithy_client._json,
    testSetId: import_smithy_client.expectString,
    testSetName: import_smithy_client.expectString
  });
}, "de_TestSetSummary");
var de_TestSetSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_TestSetSummary(entry, context);
  });
  return retVal;
}, "de_TestSetSummaryList");
var de_TestSetTurnRecord = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    conversationId: import_smithy_client.expectString,
    recordNumber: import_smithy_client.expectLong,
    turnNumber: import_smithy_client.expectInt32,
    turnSpecification: (_) => de_TurnSpecification(_, context)
  });
}, "de_TestSetTurnRecord");
var de_TestSetTurnRecordList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_TestSetTurnRecord(entry, context);
  });
  return retVal;
}, "de_TestSetTurnRecordList");
var de_TestSetTurnResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    agent: import_smithy_client._json,
    user: (_) => de_UserTurnResult(_, context)
  });
}, "de_TestSetTurnResult");
var de_TranscriptFilter = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    lexTranscriptFilter: (_) => de_LexTranscriptFilter(_, context)
  });
}, "de_TranscriptFilter");
var de_TranscriptSourceSetting = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    s3BucketTranscriptSource: (_) => de_S3BucketTranscriptSource(_, context)
  });
}, "de_TranscriptSourceSetting");
var de_TurnSpecification = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    agentTurn: import_smithy_client._json,
    userTurn: (_) => de_UserTurnSpecification(_, context)
  });
}, "de_TurnSpecification");
var de_UserTurnInputSpecification = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    requestAttributes: import_smithy_client._json,
    sessionState: (_) => de_InputSessionStateSpecification(_, context),
    utteranceInput: import_smithy_client._json
  });
}, "de_UserTurnInputSpecification");
var de_UserTurnIntentOutput = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    name: import_smithy_client.expectString,
    slots: (_) => de_UserTurnSlotOutputMap(_, context)
  });
}, "de_UserTurnIntentOutput");
var de_UserTurnOutputSpecification = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    activeContexts: import_smithy_client._json,
    intent: (_) => de_UserTurnIntentOutput(_, context),
    transcript: import_smithy_client.expectString
  });
}, "de_UserTurnOutputSpecification");
var de_UserTurnResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    actualOutput: (_) => de_UserTurnOutputSpecification(_, context),
    conversationLevelResult: import_smithy_client._json,
    endToEndResult: import_smithy_client.expectString,
    errorDetails: import_smithy_client._json,
    expectedOutput: (_) => de_UserTurnOutputSpecification(_, context),
    input: (_) => de_UserTurnInputSpecification(_, context),
    intentMatchResult: import_smithy_client.expectString,
    slotMatchResult: import_smithy_client.expectString,
    speechTranscriptionResult: import_smithy_client.expectString
  });
}, "de_UserTurnResult");
var de_UserTurnSlotOutput = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    subSlots: (_) => de_UserTurnSlotOutputMap(_, context),
    value: import_smithy_client.expectString,
    values: (_) => de_UserTurnSlotOutputList(_, context)
  });
}, "de_UserTurnSlotOutput");
var de_UserTurnSlotOutputList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_UserTurnSlotOutput(entry, context);
  });
  return retVal;
}, "de_UserTurnSlotOutputList");
var de_UserTurnSlotOutputMap = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_UserTurnSlotOutput(value, context);
    return acc;
  }, {});
}, "de_UserTurnSlotOutputMap");
var de_UserTurnSpecification = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    expected: (_) => de_UserTurnOutputSpecification(_, context),
    input: (_) => de_UserTurnInputSpecification(_, context)
  });
}, "de_UserTurnSpecification");
var de_UtteranceLevelTestResultItem = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    conversationId: import_smithy_client.expectString,
    recordNumber: import_smithy_client.expectLong,
    turnResult: (_) => de_TestSetTurnResult(_, context)
  });
}, "de_UtteranceLevelTestResultItem");
var de_UtteranceLevelTestResultItemList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_UtteranceLevelTestResultItem(entry, context);
  });
  return retVal;
}, "de_UtteranceLevelTestResultItemList");
var de_UtteranceLevelTestResults = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    items: (_) => de_UtteranceLevelTestResultItemList(_, context)
  });
}, "de_UtteranceLevelTestResults");
var de_UtteranceSpecification = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    associatedIntentName: import_smithy_client.expectString,
    associatedSlotName: import_smithy_client.expectString,
    audioVoiceDurationMillis: import_smithy_client.expectLong,
    botAliasId: import_smithy_client.expectString,
    botResponseAudioVoiceId: import_smithy_client.expectString,
    botResponses: import_smithy_client._json,
    botVersion: import_smithy_client.expectString,
    channel: import_smithy_client.expectString,
    conversationEndTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    conversationStartTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    dialogActionType: import_smithy_client.expectString,
    inputType: import_smithy_client.expectString,
    intentState: import_smithy_client.expectString,
    localeId: import_smithy_client.expectString,
    mode: import_smithy_client.expectString,
    outputType: import_smithy_client.expectString,
    sessionId: import_smithy_client.expectString,
    slotsFilledInSession: import_smithy_client.expectString,
    utterance: import_smithy_client.expectString,
    utteranceRequestId: import_smithy_client.expectString,
    utteranceTimestamp: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    utteranceUnderstood: import_smithy_client.expectBoolean
  });
}, "de_UtteranceSpecification");
var de_UtteranceSpecifications = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_UtteranceSpecification(entry, context);
  });
  return retVal;
}, "de_UtteranceSpecifications");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var _eRI = "expectedRevisionId";
var _lI = "localeId";
var _rAS = "retryAfterSeconds";
var _ra = "retry-after";
var _sI = "sessionId";
var _sRIUC = "skipResourceInUseCheck";
var _tK = "tagKeys";

// src/commands/BatchCreateCustomVocabularyItemCommand.ts
var _BatchCreateCustomVocabularyItemCommand = class _BatchCreateCustomVocabularyItemCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "BatchCreateCustomVocabularyItem", {}).n("LexModelsV2Client", "BatchCreateCustomVocabularyItemCommand").f(void 0, void 0).ser(se_BatchCreateCustomVocabularyItemCommand).de(de_BatchCreateCustomVocabularyItemCommand).build() {
};
__name(_BatchCreateCustomVocabularyItemCommand, "BatchCreateCustomVocabularyItemCommand");
var BatchCreateCustomVocabularyItemCommand = _BatchCreateCustomVocabularyItemCommand;

// src/commands/BatchDeleteCustomVocabularyItemCommand.ts




var _BatchDeleteCustomVocabularyItemCommand = class _BatchDeleteCustomVocabularyItemCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "BatchDeleteCustomVocabularyItem", {}).n("LexModelsV2Client", "BatchDeleteCustomVocabularyItemCommand").f(void 0, void 0).ser(se_BatchDeleteCustomVocabularyItemCommand).de(de_BatchDeleteCustomVocabularyItemCommand).build() {
};
__name(_BatchDeleteCustomVocabularyItemCommand, "BatchDeleteCustomVocabularyItemCommand");
var BatchDeleteCustomVocabularyItemCommand = _BatchDeleteCustomVocabularyItemCommand;

// src/commands/BatchUpdateCustomVocabularyItemCommand.ts




var _BatchUpdateCustomVocabularyItemCommand = class _BatchUpdateCustomVocabularyItemCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "BatchUpdateCustomVocabularyItem", {}).n("LexModelsV2Client", "BatchUpdateCustomVocabularyItemCommand").f(void 0, void 0).ser(se_BatchUpdateCustomVocabularyItemCommand).de(de_BatchUpdateCustomVocabularyItemCommand).build() {
};
__name(_BatchUpdateCustomVocabularyItemCommand, "BatchUpdateCustomVocabularyItemCommand");
var BatchUpdateCustomVocabularyItemCommand = _BatchUpdateCustomVocabularyItemCommand;

// src/commands/BuildBotLocaleCommand.ts




var _BuildBotLocaleCommand = class _BuildBotLocaleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "BuildBotLocale", {}).n("LexModelsV2Client", "BuildBotLocaleCommand").f(void 0, void 0).ser(se_BuildBotLocaleCommand).de(de_BuildBotLocaleCommand).build() {
};
__name(_BuildBotLocaleCommand, "BuildBotLocaleCommand");
var BuildBotLocaleCommand = _BuildBotLocaleCommand;

// src/commands/CreateBotAliasCommand.ts




var _CreateBotAliasCommand = class _CreateBotAliasCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "CreateBotAlias", {}).n("LexModelsV2Client", "CreateBotAliasCommand").f(void 0, void 0).ser(se_CreateBotAliasCommand).de(de_CreateBotAliasCommand).build() {
};
__name(_CreateBotAliasCommand, "CreateBotAliasCommand");
var CreateBotAliasCommand = _CreateBotAliasCommand;

// src/commands/CreateBotCommand.ts




var _CreateBotCommand = class _CreateBotCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "CreateBot", {}).n("LexModelsV2Client", "CreateBotCommand").f(void 0, void 0).ser(se_CreateBotCommand).de(de_CreateBotCommand).build() {
};
__name(_CreateBotCommand, "CreateBotCommand");
var CreateBotCommand = _CreateBotCommand;

// src/commands/CreateBotLocaleCommand.ts




var _CreateBotLocaleCommand = class _CreateBotLocaleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "CreateBotLocale", {}).n("LexModelsV2Client", "CreateBotLocaleCommand").f(void 0, void 0).ser(se_CreateBotLocaleCommand).de(de_CreateBotLocaleCommand).build() {
};
__name(_CreateBotLocaleCommand, "CreateBotLocaleCommand");
var CreateBotLocaleCommand = _CreateBotLocaleCommand;

// src/commands/CreateBotReplicaCommand.ts




var _CreateBotReplicaCommand = class _CreateBotReplicaCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "CreateBotReplica", {}).n("LexModelsV2Client", "CreateBotReplicaCommand").f(void 0, void 0).ser(se_CreateBotReplicaCommand).de(de_CreateBotReplicaCommand).build() {
};
__name(_CreateBotReplicaCommand, "CreateBotReplicaCommand");
var CreateBotReplicaCommand = _CreateBotReplicaCommand;

// src/commands/CreateBotVersionCommand.ts




var _CreateBotVersionCommand = class _CreateBotVersionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "CreateBotVersion", {}).n("LexModelsV2Client", "CreateBotVersionCommand").f(void 0, void 0).ser(se_CreateBotVersionCommand).de(de_CreateBotVersionCommand).build() {
};
__name(_CreateBotVersionCommand, "CreateBotVersionCommand");
var CreateBotVersionCommand = _CreateBotVersionCommand;

// src/commands/CreateExportCommand.ts




var _CreateExportCommand = class _CreateExportCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "CreateExport", {}).n("LexModelsV2Client", "CreateExportCommand").f(CreateExportRequestFilterSensitiveLog, void 0).ser(se_CreateExportCommand).de(de_CreateExportCommand).build() {
};
__name(_CreateExportCommand, "CreateExportCommand");
var CreateExportCommand = _CreateExportCommand;

// src/commands/CreateIntentCommand.ts




var _CreateIntentCommand = class _CreateIntentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "CreateIntent", {}).n("LexModelsV2Client", "CreateIntentCommand").f(void 0, void 0).ser(se_CreateIntentCommand).de(de_CreateIntentCommand).build() {
};
__name(_CreateIntentCommand, "CreateIntentCommand");
var CreateIntentCommand = _CreateIntentCommand;

// src/commands/CreateResourcePolicyCommand.ts




var _CreateResourcePolicyCommand = class _CreateResourcePolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "CreateResourcePolicy", {}).n("LexModelsV2Client", "CreateResourcePolicyCommand").f(void 0, void 0).ser(se_CreateResourcePolicyCommand).de(de_CreateResourcePolicyCommand).build() {
};
__name(_CreateResourcePolicyCommand, "CreateResourcePolicyCommand");
var CreateResourcePolicyCommand = _CreateResourcePolicyCommand;

// src/commands/CreateResourcePolicyStatementCommand.ts




var _CreateResourcePolicyStatementCommand = class _CreateResourcePolicyStatementCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "CreateResourcePolicyStatement", {}).n("LexModelsV2Client", "CreateResourcePolicyStatementCommand").f(void 0, void 0).ser(se_CreateResourcePolicyStatementCommand).de(de_CreateResourcePolicyStatementCommand).build() {
};
__name(_CreateResourcePolicyStatementCommand, "CreateResourcePolicyStatementCommand");
var CreateResourcePolicyStatementCommand = _CreateResourcePolicyStatementCommand;

// src/commands/CreateSlotCommand.ts




var _CreateSlotCommand = class _CreateSlotCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "CreateSlot", {}).n("LexModelsV2Client", "CreateSlotCommand").f(void 0, void 0).ser(se_CreateSlotCommand).de(de_CreateSlotCommand).build() {
};
__name(_CreateSlotCommand, "CreateSlotCommand");
var CreateSlotCommand = _CreateSlotCommand;

// src/commands/CreateSlotTypeCommand.ts




var _CreateSlotTypeCommand = class _CreateSlotTypeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "CreateSlotType", {}).n("LexModelsV2Client", "CreateSlotTypeCommand").f(void 0, void 0).ser(se_CreateSlotTypeCommand).de(de_CreateSlotTypeCommand).build() {
};
__name(_CreateSlotTypeCommand, "CreateSlotTypeCommand");
var CreateSlotTypeCommand = _CreateSlotTypeCommand;

// src/commands/CreateTestSetDiscrepancyReportCommand.ts




var _CreateTestSetDiscrepancyReportCommand = class _CreateTestSetDiscrepancyReportCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "CreateTestSetDiscrepancyReport", {}).n("LexModelsV2Client", "CreateTestSetDiscrepancyReportCommand").f(void 0, void 0).ser(se_CreateTestSetDiscrepancyReportCommand).de(de_CreateTestSetDiscrepancyReportCommand).build() {
};
__name(_CreateTestSetDiscrepancyReportCommand, "CreateTestSetDiscrepancyReportCommand");
var CreateTestSetDiscrepancyReportCommand = _CreateTestSetDiscrepancyReportCommand;

// src/commands/CreateUploadUrlCommand.ts




var _CreateUploadUrlCommand = class _CreateUploadUrlCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "CreateUploadUrl", {}).n("LexModelsV2Client", "CreateUploadUrlCommand").f(void 0, void 0).ser(se_CreateUploadUrlCommand).de(de_CreateUploadUrlCommand).build() {
};
__name(_CreateUploadUrlCommand, "CreateUploadUrlCommand");
var CreateUploadUrlCommand = _CreateUploadUrlCommand;

// src/commands/DeleteBotAliasCommand.ts




var _DeleteBotAliasCommand = class _DeleteBotAliasCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DeleteBotAlias", {}).n("LexModelsV2Client", "DeleteBotAliasCommand").f(void 0, void 0).ser(se_DeleteBotAliasCommand).de(de_DeleteBotAliasCommand).build() {
};
__name(_DeleteBotAliasCommand, "DeleteBotAliasCommand");
var DeleteBotAliasCommand = _DeleteBotAliasCommand;

// src/commands/DeleteBotCommand.ts




var _DeleteBotCommand = class _DeleteBotCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DeleteBot", {}).n("LexModelsV2Client", "DeleteBotCommand").f(void 0, void 0).ser(se_DeleteBotCommand).de(de_DeleteBotCommand).build() {
};
__name(_DeleteBotCommand, "DeleteBotCommand");
var DeleteBotCommand = _DeleteBotCommand;

// src/commands/DeleteBotLocaleCommand.ts




var _DeleteBotLocaleCommand = class _DeleteBotLocaleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DeleteBotLocale", {}).n("LexModelsV2Client", "DeleteBotLocaleCommand").f(void 0, void 0).ser(se_DeleteBotLocaleCommand).de(de_DeleteBotLocaleCommand).build() {
};
__name(_DeleteBotLocaleCommand, "DeleteBotLocaleCommand");
var DeleteBotLocaleCommand = _DeleteBotLocaleCommand;

// src/commands/DeleteBotReplicaCommand.ts




var _DeleteBotReplicaCommand = class _DeleteBotReplicaCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DeleteBotReplica", {}).n("LexModelsV2Client", "DeleteBotReplicaCommand").f(void 0, void 0).ser(se_DeleteBotReplicaCommand).de(de_DeleteBotReplicaCommand).build() {
};
__name(_DeleteBotReplicaCommand, "DeleteBotReplicaCommand");
var DeleteBotReplicaCommand = _DeleteBotReplicaCommand;

// src/commands/DeleteBotVersionCommand.ts




var _DeleteBotVersionCommand = class _DeleteBotVersionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DeleteBotVersion", {}).n("LexModelsV2Client", "DeleteBotVersionCommand").f(void 0, void 0).ser(se_DeleteBotVersionCommand).de(de_DeleteBotVersionCommand).build() {
};
__name(_DeleteBotVersionCommand, "DeleteBotVersionCommand");
var DeleteBotVersionCommand = _DeleteBotVersionCommand;

// src/commands/DeleteCustomVocabularyCommand.ts




var _DeleteCustomVocabularyCommand = class _DeleteCustomVocabularyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DeleteCustomVocabulary", {}).n("LexModelsV2Client", "DeleteCustomVocabularyCommand").f(void 0, void 0).ser(se_DeleteCustomVocabularyCommand).de(de_DeleteCustomVocabularyCommand).build() {
};
__name(_DeleteCustomVocabularyCommand, "DeleteCustomVocabularyCommand");
var DeleteCustomVocabularyCommand = _DeleteCustomVocabularyCommand;

// src/commands/DeleteExportCommand.ts




var _DeleteExportCommand = class _DeleteExportCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DeleteExport", {}).n("LexModelsV2Client", "DeleteExportCommand").f(void 0, void 0).ser(se_DeleteExportCommand).de(de_DeleteExportCommand).build() {
};
__name(_DeleteExportCommand, "DeleteExportCommand");
var DeleteExportCommand = _DeleteExportCommand;

// src/commands/DeleteImportCommand.ts




var _DeleteImportCommand = class _DeleteImportCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DeleteImport", {}).n("LexModelsV2Client", "DeleteImportCommand").f(void 0, void 0).ser(se_DeleteImportCommand).de(de_DeleteImportCommand).build() {
};
__name(_DeleteImportCommand, "DeleteImportCommand");
var DeleteImportCommand = _DeleteImportCommand;

// src/commands/DeleteIntentCommand.ts




var _DeleteIntentCommand = class _DeleteIntentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DeleteIntent", {}).n("LexModelsV2Client", "DeleteIntentCommand").f(void 0, void 0).ser(se_DeleteIntentCommand).de(de_DeleteIntentCommand).build() {
};
__name(_DeleteIntentCommand, "DeleteIntentCommand");
var DeleteIntentCommand = _DeleteIntentCommand;

// src/commands/DeleteResourcePolicyCommand.ts




var _DeleteResourcePolicyCommand = class _DeleteResourcePolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DeleteResourcePolicy", {}).n("LexModelsV2Client", "DeleteResourcePolicyCommand").f(void 0, void 0).ser(se_DeleteResourcePolicyCommand).de(de_DeleteResourcePolicyCommand).build() {
};
__name(_DeleteResourcePolicyCommand, "DeleteResourcePolicyCommand");
var DeleteResourcePolicyCommand = _DeleteResourcePolicyCommand;

// src/commands/DeleteResourcePolicyStatementCommand.ts




var _DeleteResourcePolicyStatementCommand = class _DeleteResourcePolicyStatementCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DeleteResourcePolicyStatement", {}).n("LexModelsV2Client", "DeleteResourcePolicyStatementCommand").f(void 0, void 0).ser(se_DeleteResourcePolicyStatementCommand).de(de_DeleteResourcePolicyStatementCommand).build() {
};
__name(_DeleteResourcePolicyStatementCommand, "DeleteResourcePolicyStatementCommand");
var DeleteResourcePolicyStatementCommand = _DeleteResourcePolicyStatementCommand;

// src/commands/DeleteSlotCommand.ts




var _DeleteSlotCommand = class _DeleteSlotCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DeleteSlot", {}).n("LexModelsV2Client", "DeleteSlotCommand").f(void 0, void 0).ser(se_DeleteSlotCommand).de(de_DeleteSlotCommand).build() {
};
__name(_DeleteSlotCommand, "DeleteSlotCommand");
var DeleteSlotCommand = _DeleteSlotCommand;

// src/commands/DeleteSlotTypeCommand.ts




var _DeleteSlotTypeCommand = class _DeleteSlotTypeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DeleteSlotType", {}).n("LexModelsV2Client", "DeleteSlotTypeCommand").f(void 0, void 0).ser(se_DeleteSlotTypeCommand).de(de_DeleteSlotTypeCommand).build() {
};
__name(_DeleteSlotTypeCommand, "DeleteSlotTypeCommand");
var DeleteSlotTypeCommand = _DeleteSlotTypeCommand;

// src/commands/DeleteTestSetCommand.ts




var _DeleteTestSetCommand = class _DeleteTestSetCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DeleteTestSet", {}).n("LexModelsV2Client", "DeleteTestSetCommand").f(void 0, void 0).ser(se_DeleteTestSetCommand).de(de_DeleteTestSetCommand).build() {
};
__name(_DeleteTestSetCommand, "DeleteTestSetCommand");
var DeleteTestSetCommand = _DeleteTestSetCommand;

// src/commands/DeleteUtterancesCommand.ts




var _DeleteUtterancesCommand = class _DeleteUtterancesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DeleteUtterances", {}).n("LexModelsV2Client", "DeleteUtterancesCommand").f(void 0, void 0).ser(se_DeleteUtterancesCommand).de(de_DeleteUtterancesCommand).build() {
};
__name(_DeleteUtterancesCommand, "DeleteUtterancesCommand");
var DeleteUtterancesCommand = _DeleteUtterancesCommand;

// src/commands/DescribeBotAliasCommand.ts




var _DescribeBotAliasCommand = class _DescribeBotAliasCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DescribeBotAlias", {}).n("LexModelsV2Client", "DescribeBotAliasCommand").f(void 0, void 0).ser(se_DescribeBotAliasCommand).de(de_DescribeBotAliasCommand).build() {
};
__name(_DescribeBotAliasCommand, "DescribeBotAliasCommand");
var DescribeBotAliasCommand = _DescribeBotAliasCommand;

// src/commands/DescribeBotCommand.ts




var _DescribeBotCommand = class _DescribeBotCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DescribeBot", {}).n("LexModelsV2Client", "DescribeBotCommand").f(void 0, void 0).ser(se_DescribeBotCommand).de(de_DescribeBotCommand).build() {
};
__name(_DescribeBotCommand, "DescribeBotCommand");
var DescribeBotCommand = _DescribeBotCommand;

// src/commands/DescribeBotLocaleCommand.ts




var _DescribeBotLocaleCommand = class _DescribeBotLocaleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DescribeBotLocale", {}).n("LexModelsV2Client", "DescribeBotLocaleCommand").f(void 0, void 0).ser(se_DescribeBotLocaleCommand).de(de_DescribeBotLocaleCommand).build() {
};
__name(_DescribeBotLocaleCommand, "DescribeBotLocaleCommand");
var DescribeBotLocaleCommand = _DescribeBotLocaleCommand;

// src/commands/DescribeBotRecommendationCommand.ts





// src/models/models_1.ts

var TranscriptFormat = {
  Lex: "Lex"
};
var GenerationStatus = {
  Complete: "Complete",
  Failed: "Failed",
  InProgress: "InProgress"
};
var MergeStrategy = {
  Append: "Append",
  FailOnConflict: "FailOnConflict",
  Overwrite: "Overwrite"
};
var TestSetModality = {
  Audio: "Audio",
  Text: "Text"
};
var TestExecutionApiMode = {
  NonStreaming: "NonStreaming",
  Streaming: "Streaming"
};
var TestExecutionModality = {
  Audio: "Audio",
  Text: "Text"
};
var TestExecutionStatus = {
  Completed: "Completed",
  Failed: "Failed",
  InProgress: "InProgress",
  Pending: "Pending",
  Stopped: "Stopped",
  Stopping: "Stopping",
  Waiting: "Waiting"
};
var TestSetStatus = {
  Deleting: "Deleting",
  Importing: "Importing",
  PendingAnnotation: "PendingAnnotation",
  Ready: "Ready",
  ValidationError: "ValidationError"
};
var TestSetDiscrepancyReportStatus = {
  Completed: "Completed",
  Failed: "Failed",
  InProgress: "InProgress"
};
var TestSetGenerationStatus = {
  Failed: "Failed",
  Generating: "Generating",
  Pending: "Pending",
  Ready: "Ready"
};
var ExportFilterName = {
  ExportResourceType: "ExportResourceType"
};
var ExportFilterOperator = {
  Contains: "CO",
  Equals: "EQ"
};
var ExportSortAttribute = {
  LastUpdatedDateTime: "LastUpdatedDateTime"
};
var GenerationSortByAttribute = {
  creationStartTime: "creationStartTime",
  lastUpdatedTime: "lastUpdatedTime"
};
var ImportFilterName = {
  ImportResourceType: "ImportResourceType"
};
var ImportFilterOperator = {
  Contains: "CO",
  Equals: "EQ"
};
var ImportResourceType = {
  Bot: "Bot",
  BotLocale: "BotLocale",
  CustomVocabulary: "CustomVocabulary",
  TestSet: "TestSet"
};
var ImportSortAttribute = {
  LastUpdatedDateTime: "LastUpdatedDateTime"
};
var IntentFilterName = {
  IntentName: "IntentName"
};
var IntentFilterOperator = {
  Contains: "CO",
  Equals: "EQ"
};
var IntentSortAttribute = {
  IntentName: "IntentName",
  LastUpdatedDateTime: "LastUpdatedDateTime"
};
var IntentState = {
  Failed: "Failed",
  Fulfilled: "Fulfilled",
  FulfillmentInProgress: "FulfillmentInProgress",
  InProgress: "InProgress",
  ReadyForFulfillment: "ReadyForFulfillment",
  Waiting: "Waiting"
};
var TimeDimension = {
  Days: "Days",
  Hours: "Hours",
  Weeks: "Weeks"
};
var SlotFilterName = {
  SlotName: "SlotName"
};
var SlotFilterOperator = {
  Contains: "CO",
  Equals: "EQ"
};
var SlotSortAttribute = {
  LastUpdatedDateTime: "LastUpdatedDateTime",
  SlotName: "SlotName"
};
var SlotTypeFilterName = {
  ExternalSourceType: "ExternalSourceType",
  SlotTypeName: "SlotTypeName"
};
var SlotTypeFilterOperator = {
  Contains: "CO",
  Equals: "EQ"
};
var SlotTypeSortAttribute = {
  LastUpdatedDateTime: "LastUpdatedDateTime",
  SlotTypeName: "SlotTypeName"
};
var SlotTypeCategory = {
  Composite: "Composite",
  Custom: "Custom",
  Extended: "Extended",
  ExternalGrammar: "ExternalGrammar"
};
var TestResultTypeFilter = {
  ConversationLevelTestResults: "ConversationLevelTestResults",
  IntentClassificationTestResults: "IntentClassificationTestResults",
  OverallTestResults: "OverallTestResults",
  SlotResolutionTestResults: "SlotResolutionTestResults",
  UtteranceLevelResults: "UtteranceLevelResults"
};
var TestExecutionSortAttribute = {
  CreationDateTime: "CreationDateTime",
  TestSetName: "TestSetName"
};
var TestSetSortAttribute = {
  LastUpdatedDateTime: "LastUpdatedDateTime",
  TestSetName: "TestSetName"
};
var UtteranceContentType = {
  CustomPayload: "CustomPayload",
  ImageResponseCard: "ImageResponseCard",
  PlainText: "PlainText",
  SSML: "SSML"
};
var SearchOrder = {
  Ascending: "Ascending",
  Descending: "Descending"
};
var DescribeBotRecommendationResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.encryptionSetting && { encryptionSetting: EncryptionSettingFilterSensitiveLog(obj.encryptionSetting) }
}), "DescribeBotRecommendationResponseFilterSensitiveLog");
var StartBotRecommendationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.encryptionSetting && { encryptionSetting: EncryptionSettingFilterSensitiveLog(obj.encryptionSetting) }
}), "StartBotRecommendationRequestFilterSensitiveLog");
var StartBotRecommendationResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.encryptionSetting && { encryptionSetting: EncryptionSettingFilterSensitiveLog(obj.encryptionSetting) }
}), "StartBotRecommendationResponseFilterSensitiveLog");
var StartImportRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.filePassword && { filePassword: import_smithy_client.SENSITIVE_STRING }
}), "StartImportRequestFilterSensitiveLog");
var UpdateBotRecommendationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.encryptionSetting && { encryptionSetting: EncryptionSettingFilterSensitiveLog(obj.encryptionSetting) }
}), "UpdateBotRecommendationRequestFilterSensitiveLog");
var UpdateBotRecommendationResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.encryptionSetting && { encryptionSetting: EncryptionSettingFilterSensitiveLog(obj.encryptionSetting) }
}), "UpdateBotRecommendationResponseFilterSensitiveLog");
var UpdateExportRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.filePassword && { filePassword: import_smithy_client.SENSITIVE_STRING }
}), "UpdateExportRequestFilterSensitiveLog");

// src/commands/DescribeBotRecommendationCommand.ts
var _DescribeBotRecommendationCommand = class _DescribeBotRecommendationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DescribeBotRecommendation", {}).n("LexModelsV2Client", "DescribeBotRecommendationCommand").f(void 0, DescribeBotRecommendationResponseFilterSensitiveLog).ser(se_DescribeBotRecommendationCommand).de(de_DescribeBotRecommendationCommand).build() {
};
__name(_DescribeBotRecommendationCommand, "DescribeBotRecommendationCommand");
var DescribeBotRecommendationCommand = _DescribeBotRecommendationCommand;

// src/commands/DescribeBotReplicaCommand.ts




var _DescribeBotReplicaCommand = class _DescribeBotReplicaCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DescribeBotReplica", {}).n("LexModelsV2Client", "DescribeBotReplicaCommand").f(void 0, void 0).ser(se_DescribeBotReplicaCommand).de(de_DescribeBotReplicaCommand).build() {
};
__name(_DescribeBotReplicaCommand, "DescribeBotReplicaCommand");
var DescribeBotReplicaCommand = _DescribeBotReplicaCommand;

// src/commands/DescribeBotResourceGenerationCommand.ts




var _DescribeBotResourceGenerationCommand = class _DescribeBotResourceGenerationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DescribeBotResourceGeneration", {}).n("LexModelsV2Client", "DescribeBotResourceGenerationCommand").f(void 0, void 0).ser(se_DescribeBotResourceGenerationCommand).de(de_DescribeBotResourceGenerationCommand).build() {
};
__name(_DescribeBotResourceGenerationCommand, "DescribeBotResourceGenerationCommand");
var DescribeBotResourceGenerationCommand = _DescribeBotResourceGenerationCommand;

// src/commands/DescribeBotVersionCommand.ts




var _DescribeBotVersionCommand = class _DescribeBotVersionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DescribeBotVersion", {}).n("LexModelsV2Client", "DescribeBotVersionCommand").f(void 0, void 0).ser(se_DescribeBotVersionCommand).de(de_DescribeBotVersionCommand).build() {
};
__name(_DescribeBotVersionCommand, "DescribeBotVersionCommand");
var DescribeBotVersionCommand = _DescribeBotVersionCommand;

// src/commands/DescribeCustomVocabularyMetadataCommand.ts




var _DescribeCustomVocabularyMetadataCommand = class _DescribeCustomVocabularyMetadataCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DescribeCustomVocabularyMetadata", {}).n("LexModelsV2Client", "DescribeCustomVocabularyMetadataCommand").f(void 0, void 0).ser(se_DescribeCustomVocabularyMetadataCommand).de(de_DescribeCustomVocabularyMetadataCommand).build() {
};
__name(_DescribeCustomVocabularyMetadataCommand, "DescribeCustomVocabularyMetadataCommand");
var DescribeCustomVocabularyMetadataCommand = _DescribeCustomVocabularyMetadataCommand;

// src/commands/DescribeExportCommand.ts




var _DescribeExportCommand = class _DescribeExportCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DescribeExport", {}).n("LexModelsV2Client", "DescribeExportCommand").f(void 0, void 0).ser(se_DescribeExportCommand).de(de_DescribeExportCommand).build() {
};
__name(_DescribeExportCommand, "DescribeExportCommand");
var DescribeExportCommand = _DescribeExportCommand;

// src/commands/DescribeImportCommand.ts




var _DescribeImportCommand = class _DescribeImportCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DescribeImport", {}).n("LexModelsV2Client", "DescribeImportCommand").f(void 0, void 0).ser(se_DescribeImportCommand).de(de_DescribeImportCommand).build() {
};
__name(_DescribeImportCommand, "DescribeImportCommand");
var DescribeImportCommand = _DescribeImportCommand;

// src/commands/DescribeIntentCommand.ts




var _DescribeIntentCommand = class _DescribeIntentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DescribeIntent", {}).n("LexModelsV2Client", "DescribeIntentCommand").f(void 0, void 0).ser(se_DescribeIntentCommand).de(de_DescribeIntentCommand).build() {
};
__name(_DescribeIntentCommand, "DescribeIntentCommand");
var DescribeIntentCommand = _DescribeIntentCommand;

// src/commands/DescribeResourcePolicyCommand.ts




var _DescribeResourcePolicyCommand = class _DescribeResourcePolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DescribeResourcePolicy", {}).n("LexModelsV2Client", "DescribeResourcePolicyCommand").f(void 0, void 0).ser(se_DescribeResourcePolicyCommand).de(de_DescribeResourcePolicyCommand).build() {
};
__name(_DescribeResourcePolicyCommand, "DescribeResourcePolicyCommand");
var DescribeResourcePolicyCommand = _DescribeResourcePolicyCommand;

// src/commands/DescribeSlotCommand.ts




var _DescribeSlotCommand = class _DescribeSlotCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DescribeSlot", {}).n("LexModelsV2Client", "DescribeSlotCommand").f(void 0, void 0).ser(se_DescribeSlotCommand).de(de_DescribeSlotCommand).build() {
};
__name(_DescribeSlotCommand, "DescribeSlotCommand");
var DescribeSlotCommand = _DescribeSlotCommand;

// src/commands/DescribeSlotTypeCommand.ts




var _DescribeSlotTypeCommand = class _DescribeSlotTypeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DescribeSlotType", {}).n("LexModelsV2Client", "DescribeSlotTypeCommand").f(void 0, void 0).ser(se_DescribeSlotTypeCommand).de(de_DescribeSlotTypeCommand).build() {
};
__name(_DescribeSlotTypeCommand, "DescribeSlotTypeCommand");
var DescribeSlotTypeCommand = _DescribeSlotTypeCommand;

// src/commands/DescribeTestExecutionCommand.ts




var _DescribeTestExecutionCommand = class _DescribeTestExecutionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DescribeTestExecution", {}).n("LexModelsV2Client", "DescribeTestExecutionCommand").f(void 0, void 0).ser(se_DescribeTestExecutionCommand).de(de_DescribeTestExecutionCommand).build() {
};
__name(_DescribeTestExecutionCommand, "DescribeTestExecutionCommand");
var DescribeTestExecutionCommand = _DescribeTestExecutionCommand;

// src/commands/DescribeTestSetCommand.ts




var _DescribeTestSetCommand = class _DescribeTestSetCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DescribeTestSet", {}).n("LexModelsV2Client", "DescribeTestSetCommand").f(void 0, void 0).ser(se_DescribeTestSetCommand).de(de_DescribeTestSetCommand).build() {
};
__name(_DescribeTestSetCommand, "DescribeTestSetCommand");
var DescribeTestSetCommand = _DescribeTestSetCommand;

// src/commands/DescribeTestSetDiscrepancyReportCommand.ts




var _DescribeTestSetDiscrepancyReportCommand = class _DescribeTestSetDiscrepancyReportCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DescribeTestSetDiscrepancyReport", {}).n("LexModelsV2Client", "DescribeTestSetDiscrepancyReportCommand").f(void 0, void 0).ser(se_DescribeTestSetDiscrepancyReportCommand).de(de_DescribeTestSetDiscrepancyReportCommand).build() {
};
__name(_DescribeTestSetDiscrepancyReportCommand, "DescribeTestSetDiscrepancyReportCommand");
var DescribeTestSetDiscrepancyReportCommand = _DescribeTestSetDiscrepancyReportCommand;

// src/commands/DescribeTestSetGenerationCommand.ts




var _DescribeTestSetGenerationCommand = class _DescribeTestSetGenerationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "DescribeTestSetGeneration", {}).n("LexModelsV2Client", "DescribeTestSetGenerationCommand").f(void 0, void 0).ser(se_DescribeTestSetGenerationCommand).de(de_DescribeTestSetGenerationCommand).build() {
};
__name(_DescribeTestSetGenerationCommand, "DescribeTestSetGenerationCommand");
var DescribeTestSetGenerationCommand = _DescribeTestSetGenerationCommand;

// src/commands/GenerateBotElementCommand.ts




var _GenerateBotElementCommand = class _GenerateBotElementCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "GenerateBotElement", {}).n("LexModelsV2Client", "GenerateBotElementCommand").f(void 0, void 0).ser(se_GenerateBotElementCommand).de(de_GenerateBotElementCommand).build() {
};
__name(_GenerateBotElementCommand, "GenerateBotElementCommand");
var GenerateBotElementCommand = _GenerateBotElementCommand;

// src/commands/GetTestExecutionArtifactsUrlCommand.ts




var _GetTestExecutionArtifactsUrlCommand = class _GetTestExecutionArtifactsUrlCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "GetTestExecutionArtifactsUrl", {}).n("LexModelsV2Client", "GetTestExecutionArtifactsUrlCommand").f(void 0, void 0).ser(se_GetTestExecutionArtifactsUrlCommand).de(de_GetTestExecutionArtifactsUrlCommand).build() {
};
__name(_GetTestExecutionArtifactsUrlCommand, "GetTestExecutionArtifactsUrlCommand");
var GetTestExecutionArtifactsUrlCommand = _GetTestExecutionArtifactsUrlCommand;

// src/commands/ListAggregatedUtterancesCommand.ts




var _ListAggregatedUtterancesCommand = class _ListAggregatedUtterancesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListAggregatedUtterances", {}).n("LexModelsV2Client", "ListAggregatedUtterancesCommand").f(void 0, void 0).ser(se_ListAggregatedUtterancesCommand).de(de_ListAggregatedUtterancesCommand).build() {
};
__name(_ListAggregatedUtterancesCommand, "ListAggregatedUtterancesCommand");
var ListAggregatedUtterancesCommand = _ListAggregatedUtterancesCommand;

// src/commands/ListBotAliasesCommand.ts




var _ListBotAliasesCommand = class _ListBotAliasesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListBotAliases", {}).n("LexModelsV2Client", "ListBotAliasesCommand").f(void 0, void 0).ser(se_ListBotAliasesCommand).de(de_ListBotAliasesCommand).build() {
};
__name(_ListBotAliasesCommand, "ListBotAliasesCommand");
var ListBotAliasesCommand = _ListBotAliasesCommand;

// src/commands/ListBotAliasReplicasCommand.ts




var _ListBotAliasReplicasCommand = class _ListBotAliasReplicasCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListBotAliasReplicas", {}).n("LexModelsV2Client", "ListBotAliasReplicasCommand").f(void 0, void 0).ser(se_ListBotAliasReplicasCommand).de(de_ListBotAliasReplicasCommand).build() {
};
__name(_ListBotAliasReplicasCommand, "ListBotAliasReplicasCommand");
var ListBotAliasReplicasCommand = _ListBotAliasReplicasCommand;

// src/commands/ListBotLocalesCommand.ts




var _ListBotLocalesCommand = class _ListBotLocalesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListBotLocales", {}).n("LexModelsV2Client", "ListBotLocalesCommand").f(void 0, void 0).ser(se_ListBotLocalesCommand).de(de_ListBotLocalesCommand).build() {
};
__name(_ListBotLocalesCommand, "ListBotLocalesCommand");
var ListBotLocalesCommand = _ListBotLocalesCommand;

// src/commands/ListBotRecommendationsCommand.ts




var _ListBotRecommendationsCommand = class _ListBotRecommendationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListBotRecommendations", {}).n("LexModelsV2Client", "ListBotRecommendationsCommand").f(void 0, void 0).ser(se_ListBotRecommendationsCommand).de(de_ListBotRecommendationsCommand).build() {
};
__name(_ListBotRecommendationsCommand, "ListBotRecommendationsCommand");
var ListBotRecommendationsCommand = _ListBotRecommendationsCommand;

// src/commands/ListBotReplicasCommand.ts




var _ListBotReplicasCommand = class _ListBotReplicasCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListBotReplicas", {}).n("LexModelsV2Client", "ListBotReplicasCommand").f(void 0, void 0).ser(se_ListBotReplicasCommand).de(de_ListBotReplicasCommand).build() {
};
__name(_ListBotReplicasCommand, "ListBotReplicasCommand");
var ListBotReplicasCommand = _ListBotReplicasCommand;

// src/commands/ListBotResourceGenerationsCommand.ts




var _ListBotResourceGenerationsCommand = class _ListBotResourceGenerationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListBotResourceGenerations", {}).n("LexModelsV2Client", "ListBotResourceGenerationsCommand").f(void 0, void 0).ser(se_ListBotResourceGenerationsCommand).de(de_ListBotResourceGenerationsCommand).build() {
};
__name(_ListBotResourceGenerationsCommand, "ListBotResourceGenerationsCommand");
var ListBotResourceGenerationsCommand = _ListBotResourceGenerationsCommand;

// src/commands/ListBotsCommand.ts




var _ListBotsCommand = class _ListBotsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListBots", {}).n("LexModelsV2Client", "ListBotsCommand").f(void 0, void 0).ser(se_ListBotsCommand).de(de_ListBotsCommand).build() {
};
__name(_ListBotsCommand, "ListBotsCommand");
var ListBotsCommand = _ListBotsCommand;

// src/commands/ListBotVersionReplicasCommand.ts




var _ListBotVersionReplicasCommand = class _ListBotVersionReplicasCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListBotVersionReplicas", {}).n("LexModelsV2Client", "ListBotVersionReplicasCommand").f(void 0, void 0).ser(se_ListBotVersionReplicasCommand).de(de_ListBotVersionReplicasCommand).build() {
};
__name(_ListBotVersionReplicasCommand, "ListBotVersionReplicasCommand");
var ListBotVersionReplicasCommand = _ListBotVersionReplicasCommand;

// src/commands/ListBotVersionsCommand.ts




var _ListBotVersionsCommand = class _ListBotVersionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListBotVersions", {}).n("LexModelsV2Client", "ListBotVersionsCommand").f(void 0, void 0).ser(se_ListBotVersionsCommand).de(de_ListBotVersionsCommand).build() {
};
__name(_ListBotVersionsCommand, "ListBotVersionsCommand");
var ListBotVersionsCommand = _ListBotVersionsCommand;

// src/commands/ListBuiltInIntentsCommand.ts




var _ListBuiltInIntentsCommand = class _ListBuiltInIntentsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListBuiltInIntents", {}).n("LexModelsV2Client", "ListBuiltInIntentsCommand").f(void 0, void 0).ser(se_ListBuiltInIntentsCommand).de(de_ListBuiltInIntentsCommand).build() {
};
__name(_ListBuiltInIntentsCommand, "ListBuiltInIntentsCommand");
var ListBuiltInIntentsCommand = _ListBuiltInIntentsCommand;

// src/commands/ListBuiltInSlotTypesCommand.ts




var _ListBuiltInSlotTypesCommand = class _ListBuiltInSlotTypesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListBuiltInSlotTypes", {}).n("LexModelsV2Client", "ListBuiltInSlotTypesCommand").f(void 0, void 0).ser(se_ListBuiltInSlotTypesCommand).de(de_ListBuiltInSlotTypesCommand).build() {
};
__name(_ListBuiltInSlotTypesCommand, "ListBuiltInSlotTypesCommand");
var ListBuiltInSlotTypesCommand = _ListBuiltInSlotTypesCommand;

// src/commands/ListCustomVocabularyItemsCommand.ts




var _ListCustomVocabularyItemsCommand = class _ListCustomVocabularyItemsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListCustomVocabularyItems", {}).n("LexModelsV2Client", "ListCustomVocabularyItemsCommand").f(void 0, void 0).ser(se_ListCustomVocabularyItemsCommand).de(de_ListCustomVocabularyItemsCommand).build() {
};
__name(_ListCustomVocabularyItemsCommand, "ListCustomVocabularyItemsCommand");
var ListCustomVocabularyItemsCommand = _ListCustomVocabularyItemsCommand;

// src/commands/ListExportsCommand.ts




var _ListExportsCommand = class _ListExportsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListExports", {}).n("LexModelsV2Client", "ListExportsCommand").f(void 0, void 0).ser(se_ListExportsCommand).de(de_ListExportsCommand).build() {
};
__name(_ListExportsCommand, "ListExportsCommand");
var ListExportsCommand = _ListExportsCommand;

// src/commands/ListImportsCommand.ts




var _ListImportsCommand = class _ListImportsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListImports", {}).n("LexModelsV2Client", "ListImportsCommand").f(void 0, void 0).ser(se_ListImportsCommand).de(de_ListImportsCommand).build() {
};
__name(_ListImportsCommand, "ListImportsCommand");
var ListImportsCommand = _ListImportsCommand;

// src/commands/ListIntentMetricsCommand.ts




var _ListIntentMetricsCommand = class _ListIntentMetricsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListIntentMetrics", {}).n("LexModelsV2Client", "ListIntentMetricsCommand").f(void 0, void 0).ser(se_ListIntentMetricsCommand).de(de_ListIntentMetricsCommand).build() {
};
__name(_ListIntentMetricsCommand, "ListIntentMetricsCommand");
var ListIntentMetricsCommand = _ListIntentMetricsCommand;

// src/commands/ListIntentPathsCommand.ts




var _ListIntentPathsCommand = class _ListIntentPathsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListIntentPaths", {}).n("LexModelsV2Client", "ListIntentPathsCommand").f(void 0, void 0).ser(se_ListIntentPathsCommand).de(de_ListIntentPathsCommand).build() {
};
__name(_ListIntentPathsCommand, "ListIntentPathsCommand");
var ListIntentPathsCommand = _ListIntentPathsCommand;

// src/commands/ListIntentsCommand.ts




var _ListIntentsCommand = class _ListIntentsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListIntents", {}).n("LexModelsV2Client", "ListIntentsCommand").f(void 0, void 0).ser(se_ListIntentsCommand).de(de_ListIntentsCommand).build() {
};
__name(_ListIntentsCommand, "ListIntentsCommand");
var ListIntentsCommand = _ListIntentsCommand;

// src/commands/ListIntentStageMetricsCommand.ts




var _ListIntentStageMetricsCommand = class _ListIntentStageMetricsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListIntentStageMetrics", {}).n("LexModelsV2Client", "ListIntentStageMetricsCommand").f(void 0, void 0).ser(se_ListIntentStageMetricsCommand).de(de_ListIntentStageMetricsCommand).build() {
};
__name(_ListIntentStageMetricsCommand, "ListIntentStageMetricsCommand");
var ListIntentStageMetricsCommand = _ListIntentStageMetricsCommand;

// src/commands/ListRecommendedIntentsCommand.ts




var _ListRecommendedIntentsCommand = class _ListRecommendedIntentsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListRecommendedIntents", {}).n("LexModelsV2Client", "ListRecommendedIntentsCommand").f(void 0, void 0).ser(se_ListRecommendedIntentsCommand).de(de_ListRecommendedIntentsCommand).build() {
};
__name(_ListRecommendedIntentsCommand, "ListRecommendedIntentsCommand");
var ListRecommendedIntentsCommand = _ListRecommendedIntentsCommand;

// src/commands/ListSessionAnalyticsDataCommand.ts




var _ListSessionAnalyticsDataCommand = class _ListSessionAnalyticsDataCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListSessionAnalyticsData", {}).n("LexModelsV2Client", "ListSessionAnalyticsDataCommand").f(void 0, void 0).ser(se_ListSessionAnalyticsDataCommand).de(de_ListSessionAnalyticsDataCommand).build() {
};
__name(_ListSessionAnalyticsDataCommand, "ListSessionAnalyticsDataCommand");
var ListSessionAnalyticsDataCommand = _ListSessionAnalyticsDataCommand;

// src/commands/ListSessionMetricsCommand.ts




var _ListSessionMetricsCommand = class _ListSessionMetricsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListSessionMetrics", {}).n("LexModelsV2Client", "ListSessionMetricsCommand").f(void 0, void 0).ser(se_ListSessionMetricsCommand).de(de_ListSessionMetricsCommand).build() {
};
__name(_ListSessionMetricsCommand, "ListSessionMetricsCommand");
var ListSessionMetricsCommand = _ListSessionMetricsCommand;

// src/commands/ListSlotsCommand.ts




var _ListSlotsCommand = class _ListSlotsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListSlots", {}).n("LexModelsV2Client", "ListSlotsCommand").f(void 0, void 0).ser(se_ListSlotsCommand).de(de_ListSlotsCommand).build() {
};
__name(_ListSlotsCommand, "ListSlotsCommand");
var ListSlotsCommand = _ListSlotsCommand;

// src/commands/ListSlotTypesCommand.ts




var _ListSlotTypesCommand = class _ListSlotTypesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListSlotTypes", {}).n("LexModelsV2Client", "ListSlotTypesCommand").f(void 0, void 0).ser(se_ListSlotTypesCommand).de(de_ListSlotTypesCommand).build() {
};
__name(_ListSlotTypesCommand, "ListSlotTypesCommand");
var ListSlotTypesCommand = _ListSlotTypesCommand;

// src/commands/ListTagsForResourceCommand.ts




var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListTagsForResource", {}).n("LexModelsV2Client", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};
__name(_ListTagsForResourceCommand, "ListTagsForResourceCommand");
var ListTagsForResourceCommand = _ListTagsForResourceCommand;

// src/commands/ListTestExecutionResultItemsCommand.ts




var _ListTestExecutionResultItemsCommand = class _ListTestExecutionResultItemsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListTestExecutionResultItems", {}).n("LexModelsV2Client", "ListTestExecutionResultItemsCommand").f(void 0, void 0).ser(se_ListTestExecutionResultItemsCommand).de(de_ListTestExecutionResultItemsCommand).build() {
};
__name(_ListTestExecutionResultItemsCommand, "ListTestExecutionResultItemsCommand");
var ListTestExecutionResultItemsCommand = _ListTestExecutionResultItemsCommand;

// src/commands/ListTestExecutionsCommand.ts




var _ListTestExecutionsCommand = class _ListTestExecutionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListTestExecutions", {}).n("LexModelsV2Client", "ListTestExecutionsCommand").f(void 0, void 0).ser(se_ListTestExecutionsCommand).de(de_ListTestExecutionsCommand).build() {
};
__name(_ListTestExecutionsCommand, "ListTestExecutionsCommand");
var ListTestExecutionsCommand = _ListTestExecutionsCommand;

// src/commands/ListTestSetRecordsCommand.ts




var _ListTestSetRecordsCommand = class _ListTestSetRecordsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListTestSetRecords", {}).n("LexModelsV2Client", "ListTestSetRecordsCommand").f(void 0, void 0).ser(se_ListTestSetRecordsCommand).de(de_ListTestSetRecordsCommand).build() {
};
__name(_ListTestSetRecordsCommand, "ListTestSetRecordsCommand");
var ListTestSetRecordsCommand = _ListTestSetRecordsCommand;

// src/commands/ListTestSetsCommand.ts




var _ListTestSetsCommand = class _ListTestSetsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListTestSets", {}).n("LexModelsV2Client", "ListTestSetsCommand").f(void 0, void 0).ser(se_ListTestSetsCommand).de(de_ListTestSetsCommand).build() {
};
__name(_ListTestSetsCommand, "ListTestSetsCommand");
var ListTestSetsCommand = _ListTestSetsCommand;

// src/commands/ListUtteranceAnalyticsDataCommand.ts




var _ListUtteranceAnalyticsDataCommand = class _ListUtteranceAnalyticsDataCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListUtteranceAnalyticsData", {}).n("LexModelsV2Client", "ListUtteranceAnalyticsDataCommand").f(void 0, void 0).ser(se_ListUtteranceAnalyticsDataCommand).de(de_ListUtteranceAnalyticsDataCommand).build() {
};
__name(_ListUtteranceAnalyticsDataCommand, "ListUtteranceAnalyticsDataCommand");
var ListUtteranceAnalyticsDataCommand = _ListUtteranceAnalyticsDataCommand;

// src/commands/ListUtteranceMetricsCommand.ts




var _ListUtteranceMetricsCommand = class _ListUtteranceMetricsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "ListUtteranceMetrics", {}).n("LexModelsV2Client", "ListUtteranceMetricsCommand").f(void 0, void 0).ser(se_ListUtteranceMetricsCommand).de(de_ListUtteranceMetricsCommand).build() {
};
__name(_ListUtteranceMetricsCommand, "ListUtteranceMetricsCommand");
var ListUtteranceMetricsCommand = _ListUtteranceMetricsCommand;

// src/commands/SearchAssociatedTranscriptsCommand.ts




var _SearchAssociatedTranscriptsCommand = class _SearchAssociatedTranscriptsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "SearchAssociatedTranscripts", {}).n("LexModelsV2Client", "SearchAssociatedTranscriptsCommand").f(void 0, void 0).ser(se_SearchAssociatedTranscriptsCommand).de(de_SearchAssociatedTranscriptsCommand).build() {
};
__name(_SearchAssociatedTranscriptsCommand, "SearchAssociatedTranscriptsCommand");
var SearchAssociatedTranscriptsCommand = _SearchAssociatedTranscriptsCommand;

// src/commands/StartBotRecommendationCommand.ts




var _StartBotRecommendationCommand = class _StartBotRecommendationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "StartBotRecommendation", {}).n("LexModelsV2Client", "StartBotRecommendationCommand").f(StartBotRecommendationRequestFilterSensitiveLog, StartBotRecommendationResponseFilterSensitiveLog).ser(se_StartBotRecommendationCommand).de(de_StartBotRecommendationCommand).build() {
};
__name(_StartBotRecommendationCommand, "StartBotRecommendationCommand");
var StartBotRecommendationCommand = _StartBotRecommendationCommand;

// src/commands/StartBotResourceGenerationCommand.ts




var _StartBotResourceGenerationCommand = class _StartBotResourceGenerationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "StartBotResourceGeneration", {}).n("LexModelsV2Client", "StartBotResourceGenerationCommand").f(void 0, void 0).ser(se_StartBotResourceGenerationCommand).de(de_StartBotResourceGenerationCommand).build() {
};
__name(_StartBotResourceGenerationCommand, "StartBotResourceGenerationCommand");
var StartBotResourceGenerationCommand = _StartBotResourceGenerationCommand;

// src/commands/StartImportCommand.ts




var _StartImportCommand = class _StartImportCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "StartImport", {}).n("LexModelsV2Client", "StartImportCommand").f(StartImportRequestFilterSensitiveLog, void 0).ser(se_StartImportCommand).de(de_StartImportCommand).build() {
};
__name(_StartImportCommand, "StartImportCommand");
var StartImportCommand = _StartImportCommand;

// src/commands/StartTestExecutionCommand.ts




var _StartTestExecutionCommand = class _StartTestExecutionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "StartTestExecution", {}).n("LexModelsV2Client", "StartTestExecutionCommand").f(void 0, void 0).ser(se_StartTestExecutionCommand).de(de_StartTestExecutionCommand).build() {
};
__name(_StartTestExecutionCommand, "StartTestExecutionCommand");
var StartTestExecutionCommand = _StartTestExecutionCommand;

// src/commands/StartTestSetGenerationCommand.ts




var _StartTestSetGenerationCommand = class _StartTestSetGenerationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "StartTestSetGeneration", {}).n("LexModelsV2Client", "StartTestSetGenerationCommand").f(void 0, void 0).ser(se_StartTestSetGenerationCommand).de(de_StartTestSetGenerationCommand).build() {
};
__name(_StartTestSetGenerationCommand, "StartTestSetGenerationCommand");
var StartTestSetGenerationCommand = _StartTestSetGenerationCommand;

// src/commands/StopBotRecommendationCommand.ts




var _StopBotRecommendationCommand = class _StopBotRecommendationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "StopBotRecommendation", {}).n("LexModelsV2Client", "StopBotRecommendationCommand").f(void 0, void 0).ser(se_StopBotRecommendationCommand).de(de_StopBotRecommendationCommand).build() {
};
__name(_StopBotRecommendationCommand, "StopBotRecommendationCommand");
var StopBotRecommendationCommand = _StopBotRecommendationCommand;

// src/commands/TagResourceCommand.ts




var _TagResourceCommand = class _TagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "TagResource", {}).n("LexModelsV2Client", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};
__name(_TagResourceCommand, "TagResourceCommand");
var TagResourceCommand = _TagResourceCommand;

// src/commands/UntagResourceCommand.ts




var _UntagResourceCommand = class _UntagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "UntagResource", {}).n("LexModelsV2Client", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};
__name(_UntagResourceCommand, "UntagResourceCommand");
var UntagResourceCommand = _UntagResourceCommand;

// src/commands/UpdateBotAliasCommand.ts




var _UpdateBotAliasCommand = class _UpdateBotAliasCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "UpdateBotAlias", {}).n("LexModelsV2Client", "UpdateBotAliasCommand").f(void 0, void 0).ser(se_UpdateBotAliasCommand).de(de_UpdateBotAliasCommand).build() {
};
__name(_UpdateBotAliasCommand, "UpdateBotAliasCommand");
var UpdateBotAliasCommand = _UpdateBotAliasCommand;

// src/commands/UpdateBotCommand.ts




var _UpdateBotCommand = class _UpdateBotCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "UpdateBot", {}).n("LexModelsV2Client", "UpdateBotCommand").f(void 0, void 0).ser(se_UpdateBotCommand).de(de_UpdateBotCommand).build() {
};
__name(_UpdateBotCommand, "UpdateBotCommand");
var UpdateBotCommand = _UpdateBotCommand;

// src/commands/UpdateBotLocaleCommand.ts




var _UpdateBotLocaleCommand = class _UpdateBotLocaleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "UpdateBotLocale", {}).n("LexModelsV2Client", "UpdateBotLocaleCommand").f(void 0, void 0).ser(se_UpdateBotLocaleCommand).de(de_UpdateBotLocaleCommand).build() {
};
__name(_UpdateBotLocaleCommand, "UpdateBotLocaleCommand");
var UpdateBotLocaleCommand = _UpdateBotLocaleCommand;

// src/commands/UpdateBotRecommendationCommand.ts




var _UpdateBotRecommendationCommand = class _UpdateBotRecommendationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "UpdateBotRecommendation", {}).n("LexModelsV2Client", "UpdateBotRecommendationCommand").f(UpdateBotRecommendationRequestFilterSensitiveLog, UpdateBotRecommendationResponseFilterSensitiveLog).ser(se_UpdateBotRecommendationCommand).de(de_UpdateBotRecommendationCommand).build() {
};
__name(_UpdateBotRecommendationCommand, "UpdateBotRecommendationCommand");
var UpdateBotRecommendationCommand = _UpdateBotRecommendationCommand;

// src/commands/UpdateExportCommand.ts




var _UpdateExportCommand = class _UpdateExportCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "UpdateExport", {}).n("LexModelsV2Client", "UpdateExportCommand").f(UpdateExportRequestFilterSensitiveLog, void 0).ser(se_UpdateExportCommand).de(de_UpdateExportCommand).build() {
};
__name(_UpdateExportCommand, "UpdateExportCommand");
var UpdateExportCommand = _UpdateExportCommand;

// src/commands/UpdateIntentCommand.ts




var _UpdateIntentCommand = class _UpdateIntentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "UpdateIntent", {}).n("LexModelsV2Client", "UpdateIntentCommand").f(void 0, void 0).ser(se_UpdateIntentCommand).de(de_UpdateIntentCommand).build() {
};
__name(_UpdateIntentCommand, "UpdateIntentCommand");
var UpdateIntentCommand = _UpdateIntentCommand;

// src/commands/UpdateResourcePolicyCommand.ts




var _UpdateResourcePolicyCommand = class _UpdateResourcePolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "UpdateResourcePolicy", {}).n("LexModelsV2Client", "UpdateResourcePolicyCommand").f(void 0, void 0).ser(se_UpdateResourcePolicyCommand).de(de_UpdateResourcePolicyCommand).build() {
};
__name(_UpdateResourcePolicyCommand, "UpdateResourcePolicyCommand");
var UpdateResourcePolicyCommand = _UpdateResourcePolicyCommand;

// src/commands/UpdateSlotCommand.ts




var _UpdateSlotCommand = class _UpdateSlotCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "UpdateSlot", {}).n("LexModelsV2Client", "UpdateSlotCommand").f(void 0, void 0).ser(se_UpdateSlotCommand).de(de_UpdateSlotCommand).build() {
};
__name(_UpdateSlotCommand, "UpdateSlotCommand");
var UpdateSlotCommand = _UpdateSlotCommand;

// src/commands/UpdateSlotTypeCommand.ts




var _UpdateSlotTypeCommand = class _UpdateSlotTypeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "UpdateSlotType", {}).n("LexModelsV2Client", "UpdateSlotTypeCommand").f(void 0, void 0).ser(se_UpdateSlotTypeCommand).de(de_UpdateSlotTypeCommand).build() {
};
__name(_UpdateSlotTypeCommand, "UpdateSlotTypeCommand");
var UpdateSlotTypeCommand = _UpdateSlotTypeCommand;

// src/commands/UpdateTestSetCommand.ts




var _UpdateTestSetCommand = class _UpdateTestSetCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LexModelBuildingServiceV2", "UpdateTestSet", {}).n("LexModelsV2Client", "UpdateTestSetCommand").f(void 0, void 0).ser(se_UpdateTestSetCommand).de(de_UpdateTestSetCommand).build() {
};
__name(_UpdateTestSetCommand, "UpdateTestSetCommand");
var UpdateTestSetCommand = _UpdateTestSetCommand;

// src/LexModelsV2.ts
var commands = {
  BatchCreateCustomVocabularyItemCommand,
  BatchDeleteCustomVocabularyItemCommand,
  BatchUpdateCustomVocabularyItemCommand,
  BuildBotLocaleCommand,
  CreateBotCommand,
  CreateBotAliasCommand,
  CreateBotLocaleCommand,
  CreateBotReplicaCommand,
  CreateBotVersionCommand,
  CreateExportCommand,
  CreateIntentCommand,
  CreateResourcePolicyCommand,
  CreateResourcePolicyStatementCommand,
  CreateSlotCommand,
  CreateSlotTypeCommand,
  CreateTestSetDiscrepancyReportCommand,
  CreateUploadUrlCommand,
  DeleteBotCommand,
  DeleteBotAliasCommand,
  DeleteBotLocaleCommand,
  DeleteBotReplicaCommand,
  DeleteBotVersionCommand,
  DeleteCustomVocabularyCommand,
  DeleteExportCommand,
  DeleteImportCommand,
  DeleteIntentCommand,
  DeleteResourcePolicyCommand,
  DeleteResourcePolicyStatementCommand,
  DeleteSlotCommand,
  DeleteSlotTypeCommand,
  DeleteTestSetCommand,
  DeleteUtterancesCommand,
  DescribeBotCommand,
  DescribeBotAliasCommand,
  DescribeBotLocaleCommand,
  DescribeBotRecommendationCommand,
  DescribeBotReplicaCommand,
  DescribeBotResourceGenerationCommand,
  DescribeBotVersionCommand,
  DescribeCustomVocabularyMetadataCommand,
  DescribeExportCommand,
  DescribeImportCommand,
  DescribeIntentCommand,
  DescribeResourcePolicyCommand,
  DescribeSlotCommand,
  DescribeSlotTypeCommand,
  DescribeTestExecutionCommand,
  DescribeTestSetCommand,
  DescribeTestSetDiscrepancyReportCommand,
  DescribeTestSetGenerationCommand,
  GenerateBotElementCommand,
  GetTestExecutionArtifactsUrlCommand,
  ListAggregatedUtterancesCommand,
  ListBotAliasesCommand,
  ListBotAliasReplicasCommand,
  ListBotLocalesCommand,
  ListBotRecommendationsCommand,
  ListBotReplicasCommand,
  ListBotResourceGenerationsCommand,
  ListBotsCommand,
  ListBotVersionReplicasCommand,
  ListBotVersionsCommand,
  ListBuiltInIntentsCommand,
  ListBuiltInSlotTypesCommand,
  ListCustomVocabularyItemsCommand,
  ListExportsCommand,
  ListImportsCommand,
  ListIntentMetricsCommand,
  ListIntentPathsCommand,
  ListIntentsCommand,
  ListIntentStageMetricsCommand,
  ListRecommendedIntentsCommand,
  ListSessionAnalyticsDataCommand,
  ListSessionMetricsCommand,
  ListSlotsCommand,
  ListSlotTypesCommand,
  ListTagsForResourceCommand,
  ListTestExecutionResultItemsCommand,
  ListTestExecutionsCommand,
  ListTestSetRecordsCommand,
  ListTestSetsCommand,
  ListUtteranceAnalyticsDataCommand,
  ListUtteranceMetricsCommand,
  SearchAssociatedTranscriptsCommand,
  StartBotRecommendationCommand,
  StartBotResourceGenerationCommand,
  StartImportCommand,
  StartTestExecutionCommand,
  StartTestSetGenerationCommand,
  StopBotRecommendationCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateBotCommand,
  UpdateBotAliasCommand,
  UpdateBotLocaleCommand,
  UpdateBotRecommendationCommand,
  UpdateExportCommand,
  UpdateIntentCommand,
  UpdateResourcePolicyCommand,
  UpdateSlotCommand,
  UpdateSlotTypeCommand,
  UpdateTestSetCommand
};
var _LexModelsV2 = class _LexModelsV2 extends LexModelsV2Client {
};
__name(_LexModelsV2, "LexModelsV2");
var LexModelsV2 = _LexModelsV2;
(0, import_smithy_client.createAggregatedClient)(commands, LexModelsV2);

// src/pagination/ListAggregatedUtterancesPaginator.ts

var paginateListAggregatedUtterances = (0, import_core.createPaginator)(LexModelsV2Client, ListAggregatedUtterancesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListBotAliasReplicasPaginator.ts

var paginateListBotAliasReplicas = (0, import_core.createPaginator)(LexModelsV2Client, ListBotAliasReplicasCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListBotAliasesPaginator.ts

var paginateListBotAliases = (0, import_core.createPaginator)(LexModelsV2Client, ListBotAliasesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListBotLocalesPaginator.ts

var paginateListBotLocales = (0, import_core.createPaginator)(LexModelsV2Client, ListBotLocalesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListBotRecommendationsPaginator.ts

var paginateListBotRecommendations = (0, import_core.createPaginator)(LexModelsV2Client, ListBotRecommendationsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListBotResourceGenerationsPaginator.ts

var paginateListBotResourceGenerations = (0, import_core.createPaginator)(LexModelsV2Client, ListBotResourceGenerationsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListBotVersionReplicasPaginator.ts

var paginateListBotVersionReplicas = (0, import_core.createPaginator)(LexModelsV2Client, ListBotVersionReplicasCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListBotVersionsPaginator.ts

var paginateListBotVersions = (0, import_core.createPaginator)(LexModelsV2Client, ListBotVersionsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListBotsPaginator.ts

var paginateListBots = (0, import_core.createPaginator)(LexModelsV2Client, ListBotsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListBuiltInIntentsPaginator.ts

var paginateListBuiltInIntents = (0, import_core.createPaginator)(LexModelsV2Client, ListBuiltInIntentsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListBuiltInSlotTypesPaginator.ts

var paginateListBuiltInSlotTypes = (0, import_core.createPaginator)(LexModelsV2Client, ListBuiltInSlotTypesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListCustomVocabularyItemsPaginator.ts

var paginateListCustomVocabularyItems = (0, import_core.createPaginator)(LexModelsV2Client, ListCustomVocabularyItemsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListExportsPaginator.ts

var paginateListExports = (0, import_core.createPaginator)(LexModelsV2Client, ListExportsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListImportsPaginator.ts

var paginateListImports = (0, import_core.createPaginator)(LexModelsV2Client, ListImportsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListIntentMetricsPaginator.ts

var paginateListIntentMetrics = (0, import_core.createPaginator)(LexModelsV2Client, ListIntentMetricsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListIntentStageMetricsPaginator.ts

var paginateListIntentStageMetrics = (0, import_core.createPaginator)(LexModelsV2Client, ListIntentStageMetricsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListIntentsPaginator.ts

var paginateListIntents = (0, import_core.createPaginator)(LexModelsV2Client, ListIntentsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListRecommendedIntentsPaginator.ts

var paginateListRecommendedIntents = (0, import_core.createPaginator)(LexModelsV2Client, ListRecommendedIntentsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListSessionAnalyticsDataPaginator.ts

var paginateListSessionAnalyticsData = (0, import_core.createPaginator)(LexModelsV2Client, ListSessionAnalyticsDataCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListSessionMetricsPaginator.ts

var paginateListSessionMetrics = (0, import_core.createPaginator)(LexModelsV2Client, ListSessionMetricsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListSlotTypesPaginator.ts

var paginateListSlotTypes = (0, import_core.createPaginator)(LexModelsV2Client, ListSlotTypesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListSlotsPaginator.ts

var paginateListSlots = (0, import_core.createPaginator)(LexModelsV2Client, ListSlotsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListTestExecutionResultItemsPaginator.ts

var paginateListTestExecutionResultItems = (0, import_core.createPaginator)(LexModelsV2Client, ListTestExecutionResultItemsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListTestExecutionsPaginator.ts

var paginateListTestExecutions = (0, import_core.createPaginator)(LexModelsV2Client, ListTestExecutionsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListTestSetRecordsPaginator.ts

var paginateListTestSetRecords = (0, import_core.createPaginator)(LexModelsV2Client, ListTestSetRecordsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListTestSetsPaginator.ts

var paginateListTestSets = (0, import_core.createPaginator)(LexModelsV2Client, ListTestSetsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListUtteranceAnalyticsDataPaginator.ts

var paginateListUtteranceAnalyticsData = (0, import_core.createPaginator)(LexModelsV2Client, ListUtteranceAnalyticsDataCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListUtteranceMetricsPaginator.ts

var paginateListUtteranceMetrics = (0, import_core.createPaginator)(LexModelsV2Client, ListUtteranceMetricsCommand, "nextToken", "nextToken", "maxResults");

// src/waiters/waitForBotAliasAvailable.ts
var import_util_waiter = require("@smithy/util-waiter");
var checkState = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeBotAliasCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botAliasStatus;
      }, "returnComparator");
      if (returnComparator() === "Available") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botAliasStatus;
      }, "returnComparator");
      if (returnComparator() === "Failed") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botAliasStatus;
      }, "returnComparator");
      if (returnComparator() === "Deleting") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForBotAliasAvailable = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 10, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
}, "waitForBotAliasAvailable");
var waitUntilBotAliasAvailable = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 10, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilBotAliasAvailable");

// src/waiters/waitForBotAvailable.ts

var checkState2 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeBotCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botStatus;
      }, "returnComparator");
      if (returnComparator() === "Available") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botStatus;
      }, "returnComparator");
      if (returnComparator() === "Deleting") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botStatus;
      }, "returnComparator");
      if (returnComparator() === "Failed") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botStatus;
      }, "returnComparator");
      if (returnComparator() === "Inactive") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForBotAvailable = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 10, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
}, "waitForBotAvailable");
var waitUntilBotAvailable = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 10, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilBotAvailable");

// src/waiters/waitForBotExportCompleted.ts

var checkState3 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeExportCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.exportStatus;
      }, "returnComparator");
      if (returnComparator() === "Completed") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.exportStatus;
      }, "returnComparator");
      if (returnComparator() === "Deleting") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.exportStatus;
      }, "returnComparator");
      if (returnComparator() === "Failed") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForBotExportCompleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 10, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
}, "waitForBotExportCompleted");
var waitUntilBotExportCompleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 10, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilBotExportCompleted");

// src/waiters/waitForBotImportCompleted.ts

var checkState4 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeImportCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.importStatus;
      }, "returnComparator");
      if (returnComparator() === "Completed") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.importStatus;
      }, "returnComparator");
      if (returnComparator() === "Deleting") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.importStatus;
      }, "returnComparator");
      if (returnComparator() === "Failed") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForBotImportCompleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 10, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
}, "waitForBotImportCompleted");
var waitUntilBotImportCompleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 10, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilBotImportCompleted");

// src/waiters/waitForBotLocaleBuilt.ts

var checkState5 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeBotLocaleCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botLocaleStatus;
      }, "returnComparator");
      if (returnComparator() === "Built") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botLocaleStatus;
      }, "returnComparator");
      if (returnComparator() === "Deleting") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botLocaleStatus;
      }, "returnComparator");
      if (returnComparator() === "Failed") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botLocaleStatus;
      }, "returnComparator");
      if (returnComparator() === "NotBuilt") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForBotLocaleBuilt = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 10, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState5);
}, "waitForBotLocaleBuilt");
var waitUntilBotLocaleBuilt = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 10, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState5);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilBotLocaleBuilt");

// src/waiters/waitForBotLocaleCreated.ts

var checkState6 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeBotLocaleCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botLocaleStatus;
      }, "returnComparator");
      if (returnComparator() === "Built") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botLocaleStatus;
      }, "returnComparator");
      if (returnComparator() === "ReadyExpressTesting") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botLocaleStatus;
      }, "returnComparator");
      if (returnComparator() === "NotBuilt") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botLocaleStatus;
      }, "returnComparator");
      if (returnComparator() === "Deleting") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botLocaleStatus;
      }, "returnComparator");
      if (returnComparator() === "Failed") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForBotLocaleCreated = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 10, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState6);
}, "waitForBotLocaleCreated");
var waitUntilBotLocaleCreated = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 10, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState6);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilBotLocaleCreated");

// src/waiters/waitForBotLocaleExpressTestingAvailable.ts

var checkState7 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeBotLocaleCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botLocaleStatus;
      }, "returnComparator");
      if (returnComparator() === "Built") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botLocaleStatus;
      }, "returnComparator");
      if (returnComparator() === "ReadyExpressTesting") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botLocaleStatus;
      }, "returnComparator");
      if (returnComparator() === "Deleting") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botLocaleStatus;
      }, "returnComparator");
      if (returnComparator() === "Failed") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botLocaleStatus;
      }, "returnComparator");
      if (returnComparator() === "NotBuilt") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForBotLocaleExpressTestingAvailable = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 10, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState7);
}, "waitForBotLocaleExpressTestingAvailable");
var waitUntilBotLocaleExpressTestingAvailable = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 10, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState7);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilBotLocaleExpressTestingAvailable");

// src/waiters/waitForBotVersionAvailable.ts

var checkState8 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeBotVersionCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botStatus;
      }, "returnComparator");
      if (returnComparator() === "Available") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botStatus;
      }, "returnComparator");
      if (returnComparator() === "Deleting") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.botStatus;
      }, "returnComparator");
      if (returnComparator() === "Failed") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "ResourceNotFoundException") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForBotVersionAvailable = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 10, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState8);
}, "waitForBotVersionAvailable");
var waitUntilBotVersionAvailable = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 10, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState8);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilBotVersionAvailable");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  LexModelsV2ServiceException,
  __Client,
  LexModelsV2Client,
  LexModelsV2,
  $Command,
  BatchCreateCustomVocabularyItemCommand,
  BatchDeleteCustomVocabularyItemCommand,
  BatchUpdateCustomVocabularyItemCommand,
  BuildBotLocaleCommand,
  CreateBotAliasCommand,
  CreateBotCommand,
  CreateBotLocaleCommand,
  CreateBotReplicaCommand,
  CreateBotVersionCommand,
  CreateExportCommand,
  CreateIntentCommand,
  CreateResourcePolicyCommand,
  CreateResourcePolicyStatementCommand,
  CreateSlotCommand,
  CreateSlotTypeCommand,
  CreateTestSetDiscrepancyReportCommand,
  CreateUploadUrlCommand,
  DeleteBotAliasCommand,
  DeleteBotCommand,
  DeleteBotLocaleCommand,
  DeleteBotReplicaCommand,
  DeleteBotVersionCommand,
  DeleteCustomVocabularyCommand,
  DeleteExportCommand,
  DeleteImportCommand,
  DeleteIntentCommand,
  DeleteResourcePolicyCommand,
  DeleteResourcePolicyStatementCommand,
  DeleteSlotCommand,
  DeleteSlotTypeCommand,
  DeleteTestSetCommand,
  DeleteUtterancesCommand,
  DescribeBotAliasCommand,
  DescribeBotCommand,
  DescribeBotLocaleCommand,
  DescribeBotRecommendationCommand,
  DescribeBotReplicaCommand,
  DescribeBotResourceGenerationCommand,
  DescribeBotVersionCommand,
  DescribeCustomVocabularyMetadataCommand,
  DescribeExportCommand,
  DescribeImportCommand,
  DescribeIntentCommand,
  DescribeResourcePolicyCommand,
  DescribeSlotCommand,
  DescribeSlotTypeCommand,
  DescribeTestExecutionCommand,
  DescribeTestSetCommand,
  DescribeTestSetDiscrepancyReportCommand,
  DescribeTestSetGenerationCommand,
  GenerateBotElementCommand,
  GetTestExecutionArtifactsUrlCommand,
  ListAggregatedUtterancesCommand,
  ListBotAliasReplicasCommand,
  ListBotAliasesCommand,
  ListBotLocalesCommand,
  ListBotRecommendationsCommand,
  ListBotReplicasCommand,
  ListBotResourceGenerationsCommand,
  ListBotVersionReplicasCommand,
  ListBotVersionsCommand,
  ListBotsCommand,
  ListBuiltInIntentsCommand,
  ListBuiltInSlotTypesCommand,
  ListCustomVocabularyItemsCommand,
  ListExportsCommand,
  ListImportsCommand,
  ListIntentMetricsCommand,
  ListIntentPathsCommand,
  ListIntentStageMetricsCommand,
  ListIntentsCommand,
  ListRecommendedIntentsCommand,
  ListSessionAnalyticsDataCommand,
  ListSessionMetricsCommand,
  ListSlotTypesCommand,
  ListSlotsCommand,
  ListTagsForResourceCommand,
  ListTestExecutionResultItemsCommand,
  ListTestExecutionsCommand,
  ListTestSetRecordsCommand,
  ListTestSetsCommand,
  ListUtteranceAnalyticsDataCommand,
  ListUtteranceMetricsCommand,
  SearchAssociatedTranscriptsCommand,
  StartBotRecommendationCommand,
  StartBotResourceGenerationCommand,
  StartImportCommand,
  StartTestExecutionCommand,
  StartTestSetGenerationCommand,
  StopBotRecommendationCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateBotAliasCommand,
  UpdateBotCommand,
  UpdateBotLocaleCommand,
  UpdateBotRecommendationCommand,
  UpdateExportCommand,
  UpdateIntentCommand,
  UpdateResourcePolicyCommand,
  UpdateSlotCommand,
  UpdateSlotTypeCommand,
  UpdateTestSetCommand,
  paginateListAggregatedUtterances,
  paginateListBotAliasReplicas,
  paginateListBotAliases,
  paginateListBotLocales,
  paginateListBotRecommendations,
  paginateListBotResourceGenerations,
  paginateListBotVersionReplicas,
  paginateListBotVersions,
  paginateListBots,
  paginateListBuiltInIntents,
  paginateListBuiltInSlotTypes,
  paginateListCustomVocabularyItems,
  paginateListExports,
  paginateListImports,
  paginateListIntentMetrics,
  paginateListIntentStageMetrics,
  paginateListIntents,
  paginateListRecommendedIntents,
  paginateListSessionAnalyticsData,
  paginateListSessionMetrics,
  paginateListSlotTypes,
  paginateListSlots,
  paginateListTestExecutionResultItems,
  paginateListTestExecutions,
  paginateListTestSetRecords,
  paginateListTestSets,
  paginateListUtteranceAnalyticsData,
  paginateListUtteranceMetrics,
  waitForBotAliasAvailable,
  waitUntilBotAliasAvailable,
  waitForBotAvailable,
  waitUntilBotAvailable,
  waitForBotExportCompleted,
  waitUntilBotExportCompleted,
  waitForBotImportCompleted,
  waitUntilBotImportCompleted,
  waitForBotLocaleBuilt,
  waitUntilBotLocaleBuilt,
  waitForBotLocaleCreated,
  waitUntilBotLocaleCreated,
  waitForBotLocaleExpressTestingAvailable,
  waitUntilBotLocaleExpressTestingAvailable,
  waitForBotVersionAvailable,
  waitUntilBotVersionAvailable,
  AudioRecognitionStrategy,
  AggregatedUtterancesFilterName,
  AggregatedUtterancesFilterOperator,
  AggregatedUtterancesSortAttribute,
  SortOrder,
  AnalyticsInterval,
  AnalyticsBinByName,
  AnalyticsSortOrder,
  AnalyticsCommonFilterName,
  AnalyticsFilterOperator,
  AnalyticsIntentField,
  AnalyticsIntentFilterName,
  AnalyticsIntentMetricName,
  AnalyticsMetricStatistic,
  AnalyticsNodeType,
  AnalyticsIntentStageField,
  AnalyticsIntentStageFilterName,
  AnalyticsIntentStageMetricName,
  AnalyticsModality,
  AnalyticsSessionField,
  AnalyticsSessionFilterName,
  AnalyticsSessionMetricName,
  AnalyticsSessionSortByName,
  AnalyticsUtteranceAttributeName,
  AnalyticsUtteranceField,
  AnalyticsUtteranceFilterName,
  AnalyticsUtteranceMetricName,
  AnalyticsUtteranceSortByName,
  AssociatedTranscriptFilterName,
  ErrorCode,
  InternalServerException,
  ResourceNotFoundException,
  ServiceQuotaExceededException,
  ThrottlingException,
  ValidationException,
  BotAliasReplicationStatus,
  BotAliasStatus,
  BotFilterName,
  BotFilterOperator,
  BotLocaleFilterName,
  BotLocaleFilterOperator,
  VoiceEngine,
  BotLocaleSortAttribute,
  BotLocaleStatus,
  BotRecommendationStatus,
  BotReplicaStatus,
  BotSortAttribute,
  BotStatus,
  BotType,
  BotVersionReplicaSortAttribute,
  BotVersionReplicationStatus,
  BotVersionSortAttribute,
  ConflictException,
  PreconditionFailedException,
  BuiltInIntentSortAttribute,
  BuiltInSlotTypeSortAttribute,
  DialogActionType,
  SlotShape,
  ConversationEndState,
  TestResultMatchStatus,
  ConversationLogsInputModeFilter,
  ImportExportFileFormat,
  ExportStatus,
  MessageSelectionStrategy,
  PromptAttempt,
  Effect,
  ObfuscationSettingType,
  SlotConstraint,
  SlotResolutionStrategy,
  SlotValueResolutionStrategy,
  CustomVocabularyStatus,
  ImportStatus,
  CreateExportRequestFilterSensitiveLog,
  EncryptionSettingFilterSensitiveLog,
  TranscriptFormat,
  GenerationStatus,
  MergeStrategy,
  TestSetModality,
  TestExecutionApiMode,
  TestExecutionModality,
  TestExecutionStatus,
  TestSetStatus,
  TestSetDiscrepancyReportStatus,
  TestSetGenerationStatus,
  ExportFilterName,
  ExportFilterOperator,
  ExportSortAttribute,
  GenerationSortByAttribute,
  ImportFilterName,
  ImportFilterOperator,
  ImportResourceType,
  ImportSortAttribute,
  IntentFilterName,
  IntentFilterOperator,
  IntentSortAttribute,
  IntentState,
  TimeDimension,
  SlotFilterName,
  SlotFilterOperator,
  SlotSortAttribute,
  SlotTypeFilterName,
  SlotTypeFilterOperator,
  SlotTypeSortAttribute,
  SlotTypeCategory,
  TestResultTypeFilter,
  TestExecutionSortAttribute,
  TestSetSortAttribute,
  UtteranceContentType,
  SearchOrder,
  DescribeBotRecommendationResponseFilterSensitiveLog,
  StartBotRecommendationRequestFilterSensitiveLog,
  StartBotRecommendationResponseFilterSensitiveLog,
  StartImportRequestFilterSensitiveLog,
  UpdateBotRecommendationRequestFilterSensitiveLog,
  UpdateBotRecommendationResponseFilterSensitiveLog,
  UpdateExportRequestFilterSensitiveLog
});

