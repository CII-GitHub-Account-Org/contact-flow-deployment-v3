import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { LexModelsV2ServiceException as __BaseException } from "./LexModelsV2ServiceException";
export const AudioRecognitionStrategy = {
    UseSlotValuesAsCustomVocabulary: "UseSlotValuesAsCustomVocabulary",
};
export const AggregatedUtterancesFilterName = {
    Utterance: "Utterance",
};
export const AggregatedUtterancesFilterOperator = {
    Contains: "CO",
    Equals: "EQ",
};
export const AggregatedUtterancesSortAttribute = {
    HitCount: "HitCount",
    MissedCount: "MissedCount",
};
export const SortOrder = {
    Ascending: "Ascending",
    Descending: "Descending",
};
export const AnalyticsInterval = {
    OneDay: "OneDay",
    OneHour: "OneHour",
};
export const AnalyticsBinByName = {
    ConversationStartTime: "ConversationStartTime",
    UtteranceTimestamp: "UtteranceTimestamp",
};
export const AnalyticsSortOrder = {
    Ascending: "Ascending",
    Descending: "Descending",
};
export const AnalyticsCommonFilterName = {
    BotAliasId: "BotAliasId",
    BotVersion: "BotVersion",
    Channel: "Channel",
    LocaleId: "LocaleId",
    Modality: "Modality",
};
export const AnalyticsFilterOperator = {
    Equals: "EQ",
    GreaterThan: "GT",
    LessThan: "LT",
};
export const AnalyticsIntentField = {
    IntentEndState: "IntentEndState",
    IntentLevel: "IntentLevel",
    IntentName: "IntentName",
};
export const AnalyticsIntentFilterName = {
    BotAliasId: "BotAliasId",
    BotVersion: "BotVersion",
    Channel: "Channel",
    IntentEndState: "IntentEndState",
    IntentName: "IntentName",
    LocaleId: "LocaleId",
    Modality: "Modality",
    OriginatingRequestId: "OriginatingRequestId",
    SessionId: "SessionId",
};
export const AnalyticsIntentMetricName = {
    Count: "Count",
    Dropped: "Dropped",
    Failure: "Failure",
    Success: "Success",
    Switched: "Switched",
};
export const AnalyticsMetricStatistic = {
    Avg: "Avg",
    Max: "Max",
    Sum: "Sum",
};
export const AnalyticsNodeType = {
    Exit: "Exit",
    Inner: "Inner",
};
export const AnalyticsIntentStageField = {
    IntentStageName: "IntentStageName",
    SwitchedToIntent: "SwitchedToIntent",
};
export const AnalyticsIntentStageFilterName = {
    BotAliasId: "BotAliasId",
    BotVersion: "BotVersion",
    Channel: "Channel",
    IntentName: "IntentName",
    IntentStageName: "IntentStageName",
    LocaleId: "LocaleId",
    Modality: "Modality",
    OriginatingRequestId: "OriginatingRequestId",
    SessionId: "SessionId",
};
export const AnalyticsIntentStageMetricName = {
    Count: "Count",
    Dropped: "Dropped",
    Failed: "Failed",
    Retry: "Retry",
    Success: "Success",
};
export const AnalyticsModality = {
    DTMF: "DTMF",
    MultiMode: "MultiMode",
    Speech: "Speech",
    Text: "Text",
};
export const AnalyticsSessionField = {
    ConversationEndState: "ConversationEndState",
    LocaleId: "LocaleId",
};
export const AnalyticsSessionFilterName = {
    BotAliasId: "BotAliasId",
    BotVersion: "BotVersion",
    Channel: "Channel",
    ConversationEndState: "ConversationEndState",
    Duration: "Duration",
    IntentPath: "IntentPath",
    LocaleId: "LocaleId",
    Modality: "Modality",
    OriginatingRequestId: "OriginatingRequestId",
    SessionId: "SessionId",
};
export const AnalyticsSessionMetricName = {
    Concurrency: "Concurrency",
    Count: "Count",
    Dropped: "Dropped",
    Duration: "Duration",
    Failure: "Failure",
    Success: "Success",
    TurnsPerConversation: "TurnsPerConversation",
};
export const AnalyticsSessionSortByName = {
    ConversationStartTime: "ConversationStartTime",
    Duration: "Duration",
    NumberOfTurns: "NumberOfTurns",
};
export const AnalyticsUtteranceAttributeName = {
    LastUsedIntent: "LastUsedIntent",
};
export const AnalyticsUtteranceField = {
    UtteranceState: "UtteranceState",
    UtteranceText: "UtteranceText",
};
export const AnalyticsUtteranceFilterName = {
    BotAliasId: "BotAliasId",
    BotVersion: "BotVersion",
    Channel: "Channel",
    LocaleId: "LocaleId",
    Modality: "Modality",
    OriginatingRequestId: "OriginatingRequestId",
    SessionId: "SessionId",
    UtteranceState: "UtteranceState",
    UtteranceText: "UtteranceText",
};
export const AnalyticsUtteranceMetricName = {
    Count: "Count",
    Detected: "Detected",
    Missed: "Missed",
    UtteranceTimestamp: "UtteranceTimestamp",
};
export const AnalyticsUtteranceSortByName = {
    UtteranceTimestamp: "UtteranceTimestamp",
};
export const AssociatedTranscriptFilterName = {
    IntentId: "IntentId",
    SlotTypeId: "SlotTypeId",
};
export const ErrorCode = {
    DUPLICATE_INPUT: "DUPLICATE_INPUT",
    INTERNAL_SERVER_FAILURE: "INTERNAL_SERVER_FAILURE",
    RESOURCE_ALREADY_EXISTS: "RESOURCE_ALREADY_EXISTS",
    RESOURCE_DOES_NOT_EXIST: "RESOURCE_DOES_NOT_EXIST",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
export const BotAliasReplicationStatus = {
    Available: "Available",
    Creating: "Creating",
    Deleting: "Deleting",
    Failed: "Failed",
    Updating: "Updating",
};
export const BotAliasStatus = {
    Available: "Available",
    Creating: "Creating",
    Deleting: "Deleting",
    Failed: "Failed",
};
export const BotFilterName = {
    BotName: "BotName",
    BotType: "BotType",
};
export const BotFilterOperator = {
    Contains: "CO",
    Equals: "EQ",
    NotEquals: "NE",
};
export const BotLocaleFilterName = {
    BotLocaleName: "BotLocaleName",
};
export const BotLocaleFilterOperator = {
    Contains: "CO",
    Equals: "EQ",
};
export const VoiceEngine = {
    Neural: "neural",
    Standard: "standard",
};
export const BotLocaleSortAttribute = {
    BotLocaleName: "BotLocaleName",
};
export const BotLocaleStatus = {
    Building: "Building",
    Built: "Built",
    Creating: "Creating",
    Deleting: "Deleting",
    Failed: "Failed",
    Importing: "Importing",
    NotBuilt: "NotBuilt",
    Processing: "Processing",
    ReadyExpressTesting: "ReadyExpressTesting",
};
export const BotRecommendationStatus = {
    Available: "Available",
    Deleted: "Deleted",
    Deleting: "Deleting",
    Downloading: "Downloading",
    Failed: "Failed",
    Processing: "Processing",
    Stopped: "Stopped",
    Stopping: "Stopping",
    Updating: "Updating",
};
export const BotReplicaStatus = {
    Deleting: "Deleting",
    Enabled: "Enabled",
    Enabling: "Enabling",
    Failed: "Failed",
};
export const BotSortAttribute = {
    BotName: "BotName",
};
export const BotStatus = {
    Available: "Available",
    Creating: "Creating",
    Deleting: "Deleting",
    Failed: "Failed",
    Importing: "Importing",
    Inactive: "Inactive",
    Updating: "Updating",
    Versioning: "Versioning",
};
export const BotType = {
    Bot: "Bot",
    BotNetwork: "BotNetwork",
};
export const BotVersionReplicaSortAttribute = {
    BotVersion: "BotVersion",
};
export const BotVersionReplicationStatus = {
    Available: "Available",
    Creating: "Creating",
    Deleting: "Deleting",
    Failed: "Failed",
};
export const BotVersionSortAttribute = {
    BotVersion: "BotVersion",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
export class PreconditionFailedException extends __BaseException {
    constructor(opts) {
        super({
            name: "PreconditionFailedException",
            $fault: "client",
            ...opts,
        });
        this.name = "PreconditionFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PreconditionFailedException.prototype);
    }
}
export const BuiltInIntentSortAttribute = {
    IntentSignature: "IntentSignature",
};
export const BuiltInSlotTypeSortAttribute = {
    SlotTypeSignature: "SlotTypeSignature",
};
export const DialogActionType = {
    CloseIntent: "CloseIntent",
    ConfirmIntent: "ConfirmIntent",
    ElicitIntent: "ElicitIntent",
    ElicitSlot: "ElicitSlot",
    EndConversation: "EndConversation",
    EvaluateConditional: "EvaluateConditional",
    FulfillIntent: "FulfillIntent",
    InvokeDialogCodeHook: "InvokeDialogCodeHook",
    StartIntent: "StartIntent",
};
export const SlotShape = {
    List: "List",
    Scalar: "Scalar",
};
export const ConversationEndState = {
    Dropped: "Dropped",
    Failure: "Failure",
    Success: "Success",
};
export const TestResultMatchStatus = {
    ExecutionError: "ExecutionError",
    Matched: "Matched",
    Mismatched: "Mismatched",
};
export const ConversationLogsInputModeFilter = {
    Speech: "Speech",
    Text: "Text",
};
export const ImportExportFileFormat = {
    CSV: "CSV",
    LexJson: "LexJson",
    TSV: "TSV",
};
export const ExportStatus = {
    Completed: "Completed",
    Deleting: "Deleting",
    Failed: "Failed",
    InProgress: "InProgress",
};
export const MessageSelectionStrategy = {
    Ordered: "Ordered",
    Random: "Random",
};
export const PromptAttempt = {
    Initial: "Initial",
    Retry1: "Retry1",
    Retry2: "Retry2",
    Retry3: "Retry3",
    Retry4: "Retry4",
    Retry5: "Retry5",
};
export const Effect = {
    Allow: "Allow",
    Deny: "Deny",
};
export const ObfuscationSettingType = {
    DefaultObfuscation: "DefaultObfuscation",
    None: "None",
};
export const SlotConstraint = {
    Optional: "Optional",
    Required: "Required",
};
export const SlotResolutionStrategy = {
    Default: "Default",
    EnhancedFallback: "EnhancedFallback",
};
export const SlotValueResolutionStrategy = {
    Concatenation: "Concatenation",
    OriginalValue: "OriginalValue",
    TopResolution: "TopResolution",
};
export const CustomVocabularyStatus = {
    Creating: "Creating",
    Deleting: "Deleting",
    Exporting: "Exporting",
    Importing: "Importing",
    Ready: "Ready",
};
export const ImportStatus = {
    Completed: "Completed",
    Deleting: "Deleting",
    Failed: "Failed",
    InProgress: "InProgress",
};
export const CreateExportRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.filePassword && { filePassword: SENSITIVE_STRING }),
});
export const EncryptionSettingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.botLocaleExportPassword && { botLocaleExportPassword: SENSITIVE_STRING }),
    ...(obj.associatedTranscriptsPassword && { associatedTranscriptsPassword: SENSITIVE_STRING }),
});
