import {
  ActiveContext,
  AgentTurnResult,
  AgentTurnSpecification,
  AggregatedUtterancesFilter,
  AggregatedUtterancesSortBy,
  AggregatedUtterancesSummary,
  AnalyticsBinBySpecification,
  AnalyticsIntentFilter,
  AnalyticsIntentGroupBySpecification,
  AnalyticsIntentMetric,
  AnalyticsIntentNodeSummary,
  AnalyticsIntentResult,
  AnalyticsIntentStageFilter,
  AnalyticsIntentStageGroupBySpecification,
  AnalyticsIntentStageMetric,
  AnalyticsIntentStageResult,
  AnalyticsModality,
  AnalyticsPathFilter,
  AnalyticsSessionFilter,
  AnalyticsSessionGroupBySpecification,
  AnalyticsSessionMetric,
  AnalyticsSessionResult,
  AnalyticsSessionSortByName,
  AnalyticsSortOrder,
  AnalyticsUtteranceAttribute,
  AnalyticsUtteranceFilter,
  AnalyticsUtteranceGroupBySpecification,
  AnalyticsUtteranceMetric,
  AnalyticsUtteranceResult,
  AnalyticsUtteranceSortByName,
  AssociatedTranscript,
  AssociatedTranscriptFilter,
  BotAliasLocaleSettings,
  BotAliasReplicaSummary,
  BotAliasStatus,
  BotAliasSummary,
  BotAliasTestExecutionTarget,
  BotFilter,
  BotImportSpecification,
  BotLocaleFilter,
  BotLocaleImportSpecification,
  BotLocaleSortBy,
  BotLocaleStatus,
  BotLocaleSummary,
  BotMember,
  BotRecommendationResults,
  BotRecommendationStatus,
  BotRecommendationSummary,
  BotReplicaStatus,
  BotReplicaSummary,
  BotSortBy,
  BotStatus,
  BotSummary,
  BotType,
  BotVersionReplicaSortBy,
  BotVersionReplicaSummary,
  BotVersionSortBy,
  BotVersionSummary,
  BuiltInIntentSortBy,
  BuiltInIntentSummary,
  BuiltInSlotTypeSortBy,
  BuiltInSlotTypeSummary,
  CompositeSlotTypeSetting,
  Condition,
  ConversationEndState,
  ConversationLevelResultDetail,
  ConversationLevelTestResults,
  ConversationLevelTestResultsFilterBy,
  ConversationLogsDataSource,
  ConversationLogSettings,
  CustomVocabularyImportSpecification,
  CustomVocabularyItem,
  CustomVocabularyStatus,
  DataPrivacy,
  DateRangeFilter,
  DialogAction,
  DialogCodeHookSettings,
  ElicitationCodeHookInvocationSetting,
  EncryptionSetting,
  ExecutionErrorDetails,
  ExportResourceSpecification,
  ExportStatus,
  ExternalSourceSetting,
  FulfillmentUpdatesSpecification,
  GenerativeAISettings,
  ImageResponseCard,
  ImportExportFileFormat,
  ImportStatus,
  InputContext,
  KendraConfiguration,
  MultipleValuesSetting,
  ObfuscationSetting,
  OutputContext,
  ParentBotNetwork,
  PromptSpecification,
  QnAIntentConfiguration,
  ResponseSpecification,
  SampleUtterance,
  SentimentAnalysisSettings,
  SlotConstraint,
  SlotDefaultValueSpecification,
  SlotResolutionSetting,
  SlotShape,
  SlotTypeValue,
  SlotValue,
  SlotValueSelectionSetting,
  SortOrder,
  SubSlotSetting,
  TestResultMatchStatus,
  TestSetDiscrepancyReportResourceTarget,
  VoiceSettings,
  WaitAndContinueSpecification,
} from "./models_0";
export interface PathFormat {
  objectPrefixes?: string[];
}
export interface LexTranscriptFilter {
  dateRangeFilter?: DateRangeFilter;
}
export interface TranscriptFilter {
  lexTranscriptFilter?: LexTranscriptFilter;
}
export declare const TranscriptFormat: {
  readonly Lex: "Lex";
};
export type TranscriptFormat =
  (typeof TranscriptFormat)[keyof typeof TranscriptFormat];
export interface S3BucketTranscriptSource {
  s3BucketName: string | undefined;
  pathFormat?: PathFormat;
  transcriptFormat: TranscriptFormat | undefined;
  transcriptFilter?: TranscriptFilter;
  kmsKeyArn?: string;
}
export interface TranscriptSourceSetting {
  s3BucketTranscriptSource?: S3BucketTranscriptSource;
}
export interface DescribeBotRecommendationResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  botRecommendationStatus?: BotRecommendationStatus;
  botRecommendationId?: string;
  failureReasons?: string[];
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  transcriptSourceSetting?: TranscriptSourceSetting;
  encryptionSetting?: EncryptionSetting;
  botRecommendationResults?: BotRecommendationResults;
}
export interface DescribeBotReplicaRequest {
  botId: string | undefined;
  replicaRegion: string | undefined;
}
export interface DescribeBotReplicaResponse {
  botId?: string;
  replicaRegion?: string;
  sourceRegion?: string;
  creationDateTime?: Date;
  botReplicaStatus?: BotReplicaStatus;
  failureReasons?: string[];
}
export interface DescribeBotResourceGenerationRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  generationId: string | undefined;
}
export declare const GenerationStatus: {
  readonly Complete: "Complete";
  readonly Failed: "Failed";
  readonly InProgress: "InProgress";
};
export type GenerationStatus =
  (typeof GenerationStatus)[keyof typeof GenerationStatus];
export interface DescribeBotResourceGenerationResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  generationId?: string;
  failureReasons?: string[];
  generationStatus?: GenerationStatus;
  generationInputPrompt?: string;
  generatedBotLocaleUrl?: string;
  creationDateTime?: Date;
  modelArn?: string;
  lastUpdatedDateTime?: Date;
}
export interface DescribeBotVersionRequest {
  botId: string | undefined;
  botVersion: string | undefined;
}
export interface DescribeBotVersionResponse {
  botId?: string;
  botName?: string;
  botVersion?: string;
  description?: string;
  roleArn?: string;
  dataPrivacy?: DataPrivacy;
  idleSessionTTLInSeconds?: number;
  botStatus?: BotStatus;
  failureReasons?: string[];
  creationDateTime?: Date;
  parentBotNetworks?: ParentBotNetwork[];
  botType?: BotType;
  botMembers?: BotMember[];
}
export interface DescribeCustomVocabularyMetadataRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
}
export interface DescribeCustomVocabularyMetadataResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  customVocabularyStatus?: CustomVocabularyStatus;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface DescribeExportRequest {
  exportId: string | undefined;
}
export interface DescribeExportResponse {
  exportId?: string;
  resourceSpecification?: ExportResourceSpecification;
  fileFormat?: ImportExportFileFormat;
  exportStatus?: ExportStatus;
  failureReasons?: string[];
  downloadUrl?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface DescribeImportRequest {
  importId: string | undefined;
}
export declare const MergeStrategy: {
  readonly Append: "Append";
  readonly FailOnConflict: "FailOnConflict";
  readonly Overwrite: "Overwrite";
};
export type MergeStrategy = (typeof MergeStrategy)[keyof typeof MergeStrategy];
export interface TestSetImportInputLocation {
  s3BucketName: string | undefined;
  s3Path: string | undefined;
}
export declare const TestSetModality: {
  readonly Audio: "Audio";
  readonly Text: "Text";
};
export type TestSetModality =
  (typeof TestSetModality)[keyof typeof TestSetModality];
export interface TestSetStorageLocation {
  s3BucketName: string | undefined;
  s3Path: string | undefined;
  kmsKeyArn?: string;
}
export interface TestSetImportResourceSpecification {
  testSetName: string | undefined;
  description?: string;
  roleArn: string | undefined;
  storageLocation: TestSetStorageLocation | undefined;
  importInputLocation: TestSetImportInputLocation | undefined;
  modality: TestSetModality | undefined;
  testSetTags?: Record<string, string>;
}
export interface ImportResourceSpecification {
  botImportSpecification?: BotImportSpecification;
  botLocaleImportSpecification?: BotLocaleImportSpecification;
  customVocabularyImportSpecification?: CustomVocabularyImportSpecification;
  testSetImportResourceSpecification?: TestSetImportResourceSpecification;
}
export interface DescribeImportResponse {
  importId?: string;
  resourceSpecification?: ImportResourceSpecification;
  importedResourceId?: string;
  importedResourceName?: string;
  mergeStrategy?: MergeStrategy;
  importStatus?: ImportStatus;
  failureReasons?: string[];
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface DescribeIntentRequest {
  intentId: string | undefined;
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
}
export interface SlotPriority {
  priority: number | undefined;
  slotId: string | undefined;
}
export interface DescribeResourcePolicyRequest {
  resourceArn: string | undefined;
}
export interface DescribeResourcePolicyResponse {
  resourceArn?: string;
  policy?: string;
  revisionId?: string;
}
export interface DescribeSlotRequest {
  slotId: string | undefined;
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  intentId: string | undefined;
}
export interface DescribeSlotTypeRequest {
  slotTypeId: string | undefined;
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
}
export interface DescribeSlotTypeResponse {
  slotTypeId?: string;
  slotTypeName?: string;
  description?: string;
  slotTypeValues?: SlotTypeValue[];
  valueSelectionSetting?: SlotValueSelectionSetting;
  parentSlotTypeSignature?: string;
  botId?: string;
  botVersion?: string;
  localeId?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  externalSourceSetting?: ExternalSourceSetting;
  compositeSlotTypeSetting?: CompositeSlotTypeSetting;
}
export interface DescribeTestExecutionRequest {
  testExecutionId: string | undefined;
}
export declare const TestExecutionApiMode: {
  readonly NonStreaming: "NonStreaming";
  readonly Streaming: "Streaming";
};
export type TestExecutionApiMode =
  (typeof TestExecutionApiMode)[keyof typeof TestExecutionApiMode];
export interface TestExecutionTarget {
  botAliasTarget?: BotAliasTestExecutionTarget;
}
export declare const TestExecutionModality: {
  readonly Audio: "Audio";
  readonly Text: "Text";
};
export type TestExecutionModality =
  (typeof TestExecutionModality)[keyof typeof TestExecutionModality];
export declare const TestExecutionStatus: {
  readonly Completed: "Completed";
  readonly Failed: "Failed";
  readonly InProgress: "InProgress";
  readonly Pending: "Pending";
  readonly Stopped: "Stopped";
  readonly Stopping: "Stopping";
  readonly Waiting: "Waiting";
};
export type TestExecutionStatus =
  (typeof TestExecutionStatus)[keyof typeof TestExecutionStatus];
export interface DescribeTestExecutionResponse {
  testExecutionId?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  testExecutionStatus?: TestExecutionStatus;
  testSetId?: string;
  testSetName?: string;
  target?: TestExecutionTarget;
  apiMode?: TestExecutionApiMode;
  testExecutionModality?: TestExecutionModality;
  failureReasons?: string[];
}
export interface DescribeTestSetRequest {
  testSetId: string | undefined;
}
export declare const TestSetStatus: {
  readonly Deleting: "Deleting";
  readonly Importing: "Importing";
  readonly PendingAnnotation: "PendingAnnotation";
  readonly Ready: "Ready";
  readonly ValidationError: "ValidationError";
};
export type TestSetStatus = (typeof TestSetStatus)[keyof typeof TestSetStatus];
export interface DescribeTestSetResponse {
  testSetId?: string;
  testSetName?: string;
  description?: string;
  modality?: TestSetModality;
  status?: TestSetStatus;
  roleArn?: string;
  numTurns?: number;
  storageLocation?: TestSetStorageLocation;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface DescribeTestSetDiscrepancyReportRequest {
  testSetDiscrepancyReportId: string | undefined;
}
export declare const TestSetDiscrepancyReportStatus: {
  readonly Completed: "Completed";
  readonly Failed: "Failed";
  readonly InProgress: "InProgress";
};
export type TestSetDiscrepancyReportStatus =
  (typeof TestSetDiscrepancyReportStatus)[keyof typeof TestSetDiscrepancyReportStatus];
export interface TestSetIntentDiscrepancyItem {
  intentName: string | undefined;
  errorMessage: string | undefined;
}
export interface TestSetSlotDiscrepancyItem {
  intentName: string | undefined;
  slotName: string | undefined;
  errorMessage: string | undefined;
}
export interface TestSetDiscrepancyErrors {
  intentDiscrepancies: TestSetIntentDiscrepancyItem[] | undefined;
  slotDiscrepancies: TestSetSlotDiscrepancyItem[] | undefined;
}
export interface DescribeTestSetDiscrepancyReportResponse {
  testSetDiscrepancyReportId?: string;
  testSetId?: string;
  creationDateTime?: Date;
  target?: TestSetDiscrepancyReportResourceTarget;
  testSetDiscrepancyReportStatus?: TestSetDiscrepancyReportStatus;
  lastUpdatedDataTime?: Date;
  testSetDiscrepancyTopErrors?: TestSetDiscrepancyErrors;
  testSetDiscrepancyRawOutputUrl?: string;
  failureReasons?: string[];
}
export interface DescribeTestSetGenerationRequest {
  testSetGenerationId: string | undefined;
}
export interface TestSetGenerationDataSource {
  conversationLogsDataSource?: ConversationLogsDataSource;
}
export declare const TestSetGenerationStatus: {
  readonly Failed: "Failed";
  readonly Generating: "Generating";
  readonly Pending: "Pending";
  readonly Ready: "Ready";
};
export type TestSetGenerationStatus =
  (typeof TestSetGenerationStatus)[keyof typeof TestSetGenerationStatus];
export interface DescribeTestSetGenerationResponse {
  testSetGenerationId?: string;
  testSetGenerationStatus?: TestSetGenerationStatus;
  failureReasons?: string[];
  testSetId?: string;
  testSetName?: string;
  description?: string;
  storageLocation?: TestSetStorageLocation;
  generationDataSource?: TestSetGenerationDataSource;
  roleArn?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export declare const ExportFilterName: {
  readonly ExportResourceType: "ExportResourceType";
};
export type ExportFilterName =
  (typeof ExportFilterName)[keyof typeof ExportFilterName];
export declare const ExportFilterOperator: {
  readonly Contains: "CO";
  readonly Equals: "EQ";
};
export type ExportFilterOperator =
  (typeof ExportFilterOperator)[keyof typeof ExportFilterOperator];
export interface ExportFilter {
  name: ExportFilterName | undefined;
  values: string[] | undefined;
  operator: ExportFilterOperator | undefined;
}
export declare const ExportSortAttribute: {
  readonly LastUpdatedDateTime: "LastUpdatedDateTime";
};
export type ExportSortAttribute =
  (typeof ExportSortAttribute)[keyof typeof ExportSortAttribute];
export interface ExportSortBy {
  attribute: ExportSortAttribute | undefined;
  order: SortOrder | undefined;
}
export interface ExportSummary {
  exportId?: string;
  resourceSpecification?: ExportResourceSpecification;
  fileFormat?: ImportExportFileFormat;
  exportStatus?: ExportStatus;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface GenerateBotElementRequest {
  intentId: string | undefined;
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
}
export interface GenerateBotElementResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  intentId?: string;
  sampleUtterances?: SampleUtterance[];
}
export declare const GenerationSortByAttribute: {
  readonly creationStartTime: "creationStartTime";
  readonly lastUpdatedTime: "lastUpdatedTime";
};
export type GenerationSortByAttribute =
  (typeof GenerationSortByAttribute)[keyof typeof GenerationSortByAttribute];
export interface GenerationSortBy {
  attribute: GenerationSortByAttribute | undefined;
  order: SortOrder | undefined;
}
export interface GenerationSummary {
  generationId?: string;
  generationStatus?: GenerationStatus;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface GetTestExecutionArtifactsUrlRequest {
  testExecutionId: string | undefined;
}
export interface GetTestExecutionArtifactsUrlResponse {
  testExecutionId?: string;
  downloadArtifactsUrl?: string;
}
export declare const ImportFilterName: {
  readonly ImportResourceType: "ImportResourceType";
};
export type ImportFilterName =
  (typeof ImportFilterName)[keyof typeof ImportFilterName];
export declare const ImportFilterOperator: {
  readonly Contains: "CO";
  readonly Equals: "EQ";
};
export type ImportFilterOperator =
  (typeof ImportFilterOperator)[keyof typeof ImportFilterOperator];
export interface ImportFilter {
  name: ImportFilterName | undefined;
  values: string[] | undefined;
  operator: ImportFilterOperator | undefined;
}
export declare const ImportResourceType: {
  readonly Bot: "Bot";
  readonly BotLocale: "BotLocale";
  readonly CustomVocabulary: "CustomVocabulary";
  readonly TestSet: "TestSet";
};
export type ImportResourceType =
  (typeof ImportResourceType)[keyof typeof ImportResourceType];
export declare const ImportSortAttribute: {
  readonly LastUpdatedDateTime: "LastUpdatedDateTime";
};
export type ImportSortAttribute =
  (typeof ImportSortAttribute)[keyof typeof ImportSortAttribute];
export interface ImportSortBy {
  attribute: ImportSortAttribute | undefined;
  order: SortOrder | undefined;
}
export interface ImportSummary {
  importId?: string;
  importedResourceId?: string;
  importedResourceName?: string;
  importStatus?: ImportStatus;
  mergeStrategy?: MergeStrategy;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  importedResourceType?: ImportResourceType;
}
export interface RuntimeHintValue {
  phrase: string | undefined;
}
export interface IntentClassificationTestResultItemCounts {
  totalResultCount: number | undefined;
  speechTranscriptionResultCounts?: Partial<
    Record<TestResultMatchStatus, number>
  >;
  intentMatchResultCounts:
    | Partial<Record<TestResultMatchStatus, number>>
    | undefined;
}
export interface IntentClassificationTestResultItem {
  intentName: string | undefined;
  multiTurnConversation: boolean | undefined;
  resultCounts: IntentClassificationTestResultItemCounts | undefined;
}
export interface IntentClassificationTestResults {
  items: IntentClassificationTestResultItem[] | undefined;
}
export declare const IntentFilterName: {
  readonly IntentName: "IntentName";
};
export type IntentFilterName =
  (typeof IntentFilterName)[keyof typeof IntentFilterName];
export declare const IntentFilterOperator: {
  readonly Contains: "CO";
  readonly Equals: "EQ";
};
export type IntentFilterOperator =
  (typeof IntentFilterOperator)[keyof typeof IntentFilterOperator];
export interface IntentFilter {
  name: IntentFilterName | undefined;
  values: string[] | undefined;
  operator: IntentFilterOperator | undefined;
}
export interface SlotResolutionTestResultItemCounts {
  totalResultCount: number | undefined;
  speechTranscriptionResultCounts?: Partial<
    Record<TestResultMatchStatus, number>
  >;
  slotMatchResultCounts:
    | Partial<Record<TestResultMatchStatus, number>>
    | undefined;
}
export interface SlotResolutionTestResultItem {
  slotName: string | undefined;
  resultCounts: SlotResolutionTestResultItemCounts | undefined;
}
export interface IntentLevelSlotResolutionTestResultItem {
  intentName: string | undefined;
  multiTurnConversation: boolean | undefined;
  slotResolutionResults: SlotResolutionTestResultItem[] | undefined;
}
export interface IntentLevelSlotResolutionTestResults {
  items: IntentLevelSlotResolutionTestResultItem[] | undefined;
}
export declare const IntentSortAttribute: {
  readonly IntentName: "IntentName";
  readonly LastUpdatedDateTime: "LastUpdatedDateTime";
};
export type IntentSortAttribute =
  (typeof IntentSortAttribute)[keyof typeof IntentSortAttribute];
export interface IntentSortBy {
  attribute: IntentSortAttribute | undefined;
  order: SortOrder | undefined;
}
export declare const IntentState: {
  readonly Failed: "Failed";
  readonly Fulfilled: "Fulfilled";
  readonly FulfillmentInProgress: "FulfillmentInProgress";
  readonly InProgress: "InProgress";
  readonly ReadyForFulfillment: "ReadyForFulfillment";
  readonly Waiting: "Waiting";
};
export type IntentState = (typeof IntentState)[keyof typeof IntentState];
export interface IntentSummary {
  intentId?: string;
  intentName?: string;
  description?: string;
  parentIntentSignature?: string;
  inputContexts?: InputContext[];
  outputContexts?: OutputContext[];
  lastUpdatedDateTime?: Date;
}
export interface InvokedIntentSample {
  intentName?: string;
}
export declare const TimeDimension: {
  readonly Days: "Days";
  readonly Hours: "Hours";
  readonly Weeks: "Weeks";
};
export type TimeDimension = (typeof TimeDimension)[keyof typeof TimeDimension];
export interface RelativeAggregationDuration {
  timeDimension: TimeDimension | undefined;
  timeValue: number | undefined;
}
export interface UtteranceAggregationDuration {
  relativeAggregationDuration: RelativeAggregationDuration | undefined;
}
export interface ListAggregatedUtterancesRequest {
  botId: string | undefined;
  botAliasId?: string;
  botVersion?: string;
  localeId: string | undefined;
  aggregationDuration: UtteranceAggregationDuration | undefined;
  sortBy?: AggregatedUtterancesSortBy;
  filters?: AggregatedUtterancesFilter[];
  maxResults?: number;
  nextToken?: string;
}
export interface ListAggregatedUtterancesResponse {
  botId?: string;
  botAliasId?: string;
  botVersion?: string;
  localeId?: string;
  aggregationDuration?: UtteranceAggregationDuration;
  aggregationWindowStartTime?: Date;
  aggregationWindowEndTime?: Date;
  aggregationLastRefreshedDateTime?: Date;
  aggregatedUtterancesSummaries?: AggregatedUtterancesSummary[];
  nextToken?: string;
}
export interface ListBotAliasesRequest {
  botId: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ListBotAliasesResponse {
  botAliasSummaries?: BotAliasSummary[];
  nextToken?: string;
  botId?: string;
}
export interface ListBotAliasReplicasRequest {
  botId: string | undefined;
  replicaRegion: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ListBotAliasReplicasResponse {
  botId?: string;
  sourceRegion?: string;
  replicaRegion?: string;
  botAliasReplicaSummaries?: BotAliasReplicaSummary[];
  nextToken?: string;
}
export interface ListBotLocalesRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  sortBy?: BotLocaleSortBy;
  filters?: BotLocaleFilter[];
  maxResults?: number;
  nextToken?: string;
}
export interface ListBotLocalesResponse {
  botId?: string;
  botVersion?: string;
  nextToken?: string;
  botLocaleSummaries?: BotLocaleSummary[];
}
export interface ListBotRecommendationsRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ListBotRecommendationsResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  botRecommendationSummaries?: BotRecommendationSummary[];
  nextToken?: string;
}
export interface ListBotReplicasRequest {
  botId: string | undefined;
}
export interface ListBotReplicasResponse {
  botId?: string;
  sourceRegion?: string;
  botReplicaSummaries?: BotReplicaSummary[];
}
export interface ListBotResourceGenerationsRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  sortBy?: GenerationSortBy;
  maxResults?: number;
  nextToken?: string;
}
export interface ListBotResourceGenerationsResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  generationSummaries?: GenerationSummary[];
  nextToken?: string;
}
export interface ListBotsRequest {
  sortBy?: BotSortBy;
  filters?: BotFilter[];
  maxResults?: number;
  nextToken?: string;
}
export interface ListBotsResponse {
  botSummaries?: BotSummary[];
  nextToken?: string;
}
export interface ListBotVersionReplicasRequest {
  botId: string | undefined;
  replicaRegion: string | undefined;
  maxResults?: number;
  nextToken?: string;
  sortBy?: BotVersionReplicaSortBy;
}
export interface ListBotVersionReplicasResponse {
  botId?: string;
  sourceRegion?: string;
  replicaRegion?: string;
  botVersionReplicaSummaries?: BotVersionReplicaSummary[];
  nextToken?: string;
}
export interface ListBotVersionsRequest {
  botId: string | undefined;
  sortBy?: BotVersionSortBy;
  maxResults?: number;
  nextToken?: string;
}
export interface ListBotVersionsResponse {
  botId?: string;
  botVersionSummaries?: BotVersionSummary[];
  nextToken?: string;
}
export interface ListBuiltInIntentsRequest {
  localeId: string | undefined;
  sortBy?: BuiltInIntentSortBy;
  maxResults?: number;
  nextToken?: string;
}
export interface ListBuiltInIntentsResponse {
  builtInIntentSummaries?: BuiltInIntentSummary[];
  nextToken?: string;
  localeId?: string;
}
export interface ListBuiltInSlotTypesRequest {
  localeId: string | undefined;
  sortBy?: BuiltInSlotTypeSortBy;
  maxResults?: number;
  nextToken?: string;
}
export interface ListBuiltInSlotTypesResponse {
  builtInSlotTypeSummaries?: BuiltInSlotTypeSummary[];
  nextToken?: string;
  localeId?: string;
}
export interface ListCustomVocabularyItemsRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ListCustomVocabularyItemsResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  customVocabularyItems?: CustomVocabularyItem[];
  nextToken?: string;
}
export interface ListExportsRequest {
  botId?: string;
  botVersion?: string;
  sortBy?: ExportSortBy;
  filters?: ExportFilter[];
  maxResults?: number;
  nextToken?: string;
  localeId?: string;
}
export interface ListExportsResponse {
  botId?: string;
  botVersion?: string;
  exportSummaries?: ExportSummary[];
  nextToken?: string;
  localeId?: string;
}
export interface ListImportsRequest {
  botId?: string;
  botVersion?: string;
  sortBy?: ImportSortBy;
  filters?: ImportFilter[];
  maxResults?: number;
  nextToken?: string;
  localeId?: string;
}
export interface ListImportsResponse {
  botId?: string;
  botVersion?: string;
  importSummaries?: ImportSummary[];
  nextToken?: string;
  localeId?: string;
}
export interface ListIntentMetricsRequest {
  botId: string | undefined;
  startDateTime: Date | undefined;
  endDateTime: Date | undefined;
  metrics: AnalyticsIntentMetric[] | undefined;
  binBy?: AnalyticsBinBySpecification[];
  groupBy?: AnalyticsIntentGroupBySpecification[];
  filters?: AnalyticsIntentFilter[];
  maxResults?: number;
  nextToken?: string;
}
export interface ListIntentMetricsResponse {
  botId?: string;
  results?: AnalyticsIntentResult[];
  nextToken?: string;
}
export interface ListIntentPathsRequest {
  botId: string | undefined;
  startDateTime: Date | undefined;
  endDateTime: Date | undefined;
  intentPath: string | undefined;
  filters?: AnalyticsPathFilter[];
}
export interface ListIntentPathsResponse {
  nodeSummaries?: AnalyticsIntentNodeSummary[];
}
export interface ListIntentsRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  sortBy?: IntentSortBy;
  filters?: IntentFilter[];
  maxResults?: number;
  nextToken?: string;
}
export interface ListIntentsResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  intentSummaries?: IntentSummary[];
  nextToken?: string;
}
export interface ListIntentStageMetricsRequest {
  botId: string | undefined;
  startDateTime: Date | undefined;
  endDateTime: Date | undefined;
  metrics: AnalyticsIntentStageMetric[] | undefined;
  binBy?: AnalyticsBinBySpecification[];
  groupBy?: AnalyticsIntentStageGroupBySpecification[];
  filters?: AnalyticsIntentStageFilter[];
  maxResults?: number;
  nextToken?: string;
}
export interface ListIntentStageMetricsResponse {
  botId?: string;
  results?: AnalyticsIntentStageResult[];
  nextToken?: string;
}
export interface ListRecommendedIntentsRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  botRecommendationId: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface RecommendedIntentSummary {
  intentId?: string;
  intentName?: string;
  sampleUtterancesCount?: number;
}
export interface ListRecommendedIntentsResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  botRecommendationId?: string;
  summaryList?: RecommendedIntentSummary[];
  nextToken?: string;
}
export interface SessionDataSortBy {
  name: AnalyticsSessionSortByName | undefined;
  order: AnalyticsSortOrder | undefined;
}
export interface ListSessionAnalyticsDataRequest {
  botId: string | undefined;
  startDateTime: Date | undefined;
  endDateTime: Date | undefined;
  sortBy?: SessionDataSortBy;
  filters?: AnalyticsSessionFilter[];
  maxResults?: number;
  nextToken?: string;
}
export interface SessionSpecification {
  botAliasId?: string;
  botVersion?: string;
  localeId?: string;
  channel?: string;
  sessionId?: string;
  conversationStartTime?: Date;
  conversationEndTime?: Date;
  conversationDurationSeconds?: number;
  conversationEndState?: ConversationEndState;
  mode?: AnalyticsModality;
  numberOfTurns?: number;
  invokedIntentSamples?: InvokedIntentSample[];
  originatingRequestId?: string;
}
export interface ListSessionAnalyticsDataResponse {
  botId?: string;
  nextToken?: string;
  sessions?: SessionSpecification[];
}
export interface ListSessionMetricsRequest {
  botId: string | undefined;
  startDateTime: Date | undefined;
  endDateTime: Date | undefined;
  metrics: AnalyticsSessionMetric[] | undefined;
  binBy?: AnalyticsBinBySpecification[];
  groupBy?: AnalyticsSessionGroupBySpecification[];
  filters?: AnalyticsSessionFilter[];
  maxResults?: number;
  nextToken?: string;
}
export interface ListSessionMetricsResponse {
  botId?: string;
  results?: AnalyticsSessionResult[];
  nextToken?: string;
}
export declare const SlotFilterName: {
  readonly SlotName: "SlotName";
};
export type SlotFilterName =
  (typeof SlotFilterName)[keyof typeof SlotFilterName];
export declare const SlotFilterOperator: {
  readonly Contains: "CO";
  readonly Equals: "EQ";
};
export type SlotFilterOperator =
  (typeof SlotFilterOperator)[keyof typeof SlotFilterOperator];
export interface SlotFilter {
  name: SlotFilterName | undefined;
  values: string[] | undefined;
  operator: SlotFilterOperator | undefined;
}
export declare const SlotSortAttribute: {
  readonly LastUpdatedDateTime: "LastUpdatedDateTime";
  readonly SlotName: "SlotName";
};
export type SlotSortAttribute =
  (typeof SlotSortAttribute)[keyof typeof SlotSortAttribute];
export interface SlotSortBy {
  attribute: SlotSortAttribute | undefined;
  order: SortOrder | undefined;
}
export interface ListSlotsRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  intentId: string | undefined;
  sortBy?: SlotSortBy;
  filters?: SlotFilter[];
  maxResults?: number;
  nextToken?: string;
}
export interface SlotSummary {
  slotId?: string;
  slotName?: string;
  description?: string;
  slotConstraint?: SlotConstraint;
  slotTypeId?: string;
  valueElicitationPromptSpecification?: PromptSpecification;
  lastUpdatedDateTime?: Date;
}
export interface ListSlotsResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  intentId?: string;
  slotSummaries?: SlotSummary[];
  nextToken?: string;
}
export declare const SlotTypeFilterName: {
  readonly ExternalSourceType: "ExternalSourceType";
  readonly SlotTypeName: "SlotTypeName";
};
export type SlotTypeFilterName =
  (typeof SlotTypeFilterName)[keyof typeof SlotTypeFilterName];
export declare const SlotTypeFilterOperator: {
  readonly Contains: "CO";
  readonly Equals: "EQ";
};
export type SlotTypeFilterOperator =
  (typeof SlotTypeFilterOperator)[keyof typeof SlotTypeFilterOperator];
export interface SlotTypeFilter {
  name: SlotTypeFilterName | undefined;
  values: string[] | undefined;
  operator: SlotTypeFilterOperator | undefined;
}
export declare const SlotTypeSortAttribute: {
  readonly LastUpdatedDateTime: "LastUpdatedDateTime";
  readonly SlotTypeName: "SlotTypeName";
};
export type SlotTypeSortAttribute =
  (typeof SlotTypeSortAttribute)[keyof typeof SlotTypeSortAttribute];
export interface SlotTypeSortBy {
  attribute: SlotTypeSortAttribute | undefined;
  order: SortOrder | undefined;
}
export interface ListSlotTypesRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  sortBy?: SlotTypeSortBy;
  filters?: SlotTypeFilter[];
  maxResults?: number;
  nextToken?: string;
}
export declare const SlotTypeCategory: {
  readonly Composite: "Composite";
  readonly Custom: "Custom";
  readonly Extended: "Extended";
  readonly ExternalGrammar: "ExternalGrammar";
};
export type SlotTypeCategory =
  (typeof SlotTypeCategory)[keyof typeof SlotTypeCategory];
export interface SlotTypeSummary {
  slotTypeId?: string;
  slotTypeName?: string;
  description?: string;
  parentSlotTypeSignature?: string;
  lastUpdatedDateTime?: Date;
  slotTypeCategory?: SlotTypeCategory;
}
export interface ListSlotTypesResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  slotTypeSummaries?: SlotTypeSummary[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceARN: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export declare const TestResultTypeFilter: {
  readonly ConversationLevelTestResults: "ConversationLevelTestResults";
  readonly IntentClassificationTestResults: "IntentClassificationTestResults";
  readonly OverallTestResults: "OverallTestResults";
  readonly SlotResolutionTestResults: "SlotResolutionTestResults";
  readonly UtteranceLevelResults: "UtteranceLevelResults";
};
export type TestResultTypeFilter =
  (typeof TestResultTypeFilter)[keyof typeof TestResultTypeFilter];
export interface TestExecutionResultFilterBy {
  resultTypeFilter: TestResultTypeFilter | undefined;
  conversationLevelTestResultsFilterBy?: ConversationLevelTestResultsFilterBy;
}
export interface ListTestExecutionResultItemsRequest {
  testExecutionId: string | undefined;
  resultFilterBy: TestExecutionResultFilterBy | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface OverallTestResultItem {
  multiTurnConversation: boolean | undefined;
  totalResultCount: number | undefined;
  speechTranscriptionResultCounts?: Partial<
    Record<TestResultMatchStatus, number>
  >;
  endToEndResultCounts:
    | Partial<Record<TestResultMatchStatus, number>>
    | undefined;
}
export interface OverallTestResults {
  items: OverallTestResultItem[] | undefined;
}
export interface UtteranceAudioInputSpecification {
  audioFileS3Location: string | undefined;
}
export interface UtteranceInputSpecification {
  textInput?: string;
  audioInput?: UtteranceAudioInputSpecification;
}
export declare const TestExecutionSortAttribute: {
  readonly CreationDateTime: "CreationDateTime";
  readonly TestSetName: "TestSetName";
};
export type TestExecutionSortAttribute =
  (typeof TestExecutionSortAttribute)[keyof typeof TestExecutionSortAttribute];
export interface TestExecutionSortBy {
  attribute: TestExecutionSortAttribute | undefined;
  order: SortOrder | undefined;
}
export interface ListTestExecutionsRequest {
  sortBy?: TestExecutionSortBy;
  maxResults?: number;
  nextToken?: string;
}
export interface TestExecutionSummary {
  testExecutionId?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  testExecutionStatus?: TestExecutionStatus;
  testSetId?: string;
  testSetName?: string;
  target?: TestExecutionTarget;
  apiMode?: TestExecutionApiMode;
  testExecutionModality?: TestExecutionModality;
}
export interface ListTestExecutionsResponse {
  testExecutions?: TestExecutionSummary[];
  nextToken?: string;
}
export interface ListTestSetRecordsRequest {
  testSetId: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export declare const TestSetSortAttribute: {
  readonly LastUpdatedDateTime: "LastUpdatedDateTime";
  readonly TestSetName: "TestSetName";
};
export type TestSetSortAttribute =
  (typeof TestSetSortAttribute)[keyof typeof TestSetSortAttribute];
export interface TestSetSortBy {
  attribute: TestSetSortAttribute | undefined;
  order: SortOrder | undefined;
}
export interface ListTestSetsRequest {
  sortBy?: TestSetSortBy;
  maxResults?: number;
  nextToken?: string;
}
export interface TestSetSummary {
  testSetId?: string;
  testSetName?: string;
  description?: string;
  modality?: TestSetModality;
  status?: TestSetStatus;
  roleArn?: string;
  numTurns?: number;
  storageLocation?: TestSetStorageLocation;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface ListTestSetsResponse {
  testSets?: TestSetSummary[];
  nextToken?: string;
}
export interface UtteranceDataSortBy {
  name: AnalyticsUtteranceSortByName | undefined;
  order: AnalyticsSortOrder | undefined;
}
export interface ListUtteranceAnalyticsDataRequest {
  botId: string | undefined;
  startDateTime: Date | undefined;
  endDateTime: Date | undefined;
  sortBy?: UtteranceDataSortBy;
  filters?: AnalyticsUtteranceFilter[];
  maxResults?: number;
  nextToken?: string;
}
export declare const UtteranceContentType: {
  readonly CustomPayload: "CustomPayload";
  readonly ImageResponseCard: "ImageResponseCard";
  readonly PlainText: "PlainText";
  readonly SSML: "SSML";
};
export type UtteranceContentType =
  (typeof UtteranceContentType)[keyof typeof UtteranceContentType];
export interface UtteranceBotResponse {
  content?: string;
  contentType?: UtteranceContentType;
  imageResponseCard?: ImageResponseCard;
}
export interface UtteranceSpecification {
  botAliasId?: string;
  botVersion?: string;
  localeId?: string;
  sessionId?: string;
  channel?: string;
  mode?: AnalyticsModality;
  conversationStartTime?: Date;
  conversationEndTime?: Date;
  utterance?: string;
  utteranceTimestamp?: Date;
  audioVoiceDurationMillis?: number;
  utteranceUnderstood?: boolean;
  inputType?: string;
  outputType?: string;
  associatedIntentName?: string;
  associatedSlotName?: string;
  intentState?: IntentState;
  dialogActionType?: string;
  botResponseAudioVoiceId?: string;
  slotsFilledInSession?: string;
  utteranceRequestId?: string;
  botResponses?: UtteranceBotResponse[];
}
export interface ListUtteranceAnalyticsDataResponse {
  botId?: string;
  nextToken?: string;
  utterances?: UtteranceSpecification[];
}
export interface ListUtteranceMetricsRequest {
  botId: string | undefined;
  startDateTime: Date | undefined;
  endDateTime: Date | undefined;
  metrics: AnalyticsUtteranceMetric[] | undefined;
  binBy?: AnalyticsBinBySpecification[];
  groupBy?: AnalyticsUtteranceGroupBySpecification[];
  attributes?: AnalyticsUtteranceAttribute[];
  filters?: AnalyticsUtteranceFilter[];
  maxResults?: number;
  nextToken?: string;
}
export interface ListUtteranceMetricsResponse {
  botId?: string;
  results?: AnalyticsUtteranceResult[];
  nextToken?: string;
}
export declare const SearchOrder: {
  readonly Ascending: "Ascending";
  readonly Descending: "Descending";
};
export type SearchOrder = (typeof SearchOrder)[keyof typeof SearchOrder];
export interface SearchAssociatedTranscriptsRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  botRecommendationId: string | undefined;
  searchOrder?: SearchOrder;
  filters: AssociatedTranscriptFilter[] | undefined;
  maxResults?: number;
  nextIndex?: number;
}
export interface SearchAssociatedTranscriptsResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  botRecommendationId?: string;
  nextIndex?: number;
  associatedTranscripts?: AssociatedTranscript[];
  totalResults?: number;
}
export interface StartBotRecommendationRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  transcriptSourceSetting: TranscriptSourceSetting | undefined;
  encryptionSetting?: EncryptionSetting;
}
export interface StartBotRecommendationResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  botRecommendationStatus?: BotRecommendationStatus;
  botRecommendationId?: string;
  creationDateTime?: Date;
  transcriptSourceSetting?: TranscriptSourceSetting;
  encryptionSetting?: EncryptionSetting;
}
export interface StartBotResourceGenerationRequest {
  generationInputPrompt: string | undefined;
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
}
export interface StartBotResourceGenerationResponse {
  generationInputPrompt?: string;
  generationId?: string;
  botId?: string;
  botVersion?: string;
  localeId?: string;
  generationStatus?: GenerationStatus;
  creationDateTime?: Date;
}
export interface StartImportRequest {
  importId: string | undefined;
  resourceSpecification: ImportResourceSpecification | undefined;
  mergeStrategy: MergeStrategy | undefined;
  filePassword?: string;
}
export interface StartImportResponse {
  importId?: string;
  resourceSpecification?: ImportResourceSpecification;
  mergeStrategy?: MergeStrategy;
  importStatus?: ImportStatus;
  creationDateTime?: Date;
}
export interface StartTestExecutionRequest {
  testSetId: string | undefined;
  target: TestExecutionTarget | undefined;
  apiMode: TestExecutionApiMode | undefined;
  testExecutionModality?: TestExecutionModality;
}
export interface StartTestExecutionResponse {
  testExecutionId?: string;
  creationDateTime?: Date;
  testSetId?: string;
  target?: TestExecutionTarget;
  apiMode?: TestExecutionApiMode;
  testExecutionModality?: TestExecutionModality;
}
export interface StartTestSetGenerationRequest {
  testSetName: string | undefined;
  description?: string;
  storageLocation: TestSetStorageLocation | undefined;
  generationDataSource: TestSetGenerationDataSource | undefined;
  roleArn: string | undefined;
  testSetTags?: Record<string, string>;
}
export interface StartTestSetGenerationResponse {
  testSetGenerationId?: string;
  creationDateTime?: Date;
  testSetGenerationStatus?: TestSetGenerationStatus;
  testSetName?: string;
  description?: string;
  storageLocation?: TestSetStorageLocation;
  generationDataSource?: TestSetGenerationDataSource;
  roleArn?: string;
  testSetTags?: Record<string, string>;
}
export interface StopBotRecommendationRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  botRecommendationId: string | undefined;
}
export interface StopBotRecommendationResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  botRecommendationStatus?: BotRecommendationStatus;
  botRecommendationId?: string;
}
export interface TagResourceRequest {
  resourceARN: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceARN: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateBotRequest {
  botId: string | undefined;
  botName: string | undefined;
  description?: string;
  roleArn: string | undefined;
  dataPrivacy: DataPrivacy | undefined;
  idleSessionTTLInSeconds: number | undefined;
  botType?: BotType;
  botMembers?: BotMember[];
}
export interface UpdateBotResponse {
  botId?: string;
  botName?: string;
  description?: string;
  roleArn?: string;
  dataPrivacy?: DataPrivacy;
  idleSessionTTLInSeconds?: number;
  botStatus?: BotStatus;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  botType?: BotType;
  botMembers?: BotMember[];
}
export interface UpdateBotAliasRequest {
  botAliasId: string | undefined;
  botAliasName: string | undefined;
  description?: string;
  botVersion?: string;
  botAliasLocaleSettings?: Record<string, BotAliasLocaleSettings>;
  conversationLogSettings?: ConversationLogSettings;
  sentimentAnalysisSettings?: SentimentAnalysisSettings;
  botId: string | undefined;
}
export interface UpdateBotAliasResponse {
  botAliasId?: string;
  botAliasName?: string;
  description?: string;
  botVersion?: string;
  botAliasLocaleSettings?: Record<string, BotAliasLocaleSettings>;
  conversationLogSettings?: ConversationLogSettings;
  sentimentAnalysisSettings?: SentimentAnalysisSettings;
  botAliasStatus?: BotAliasStatus;
  botId?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface UpdateBotLocaleRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  description?: string;
  nluIntentConfidenceThreshold: number | undefined;
  voiceSettings?: VoiceSettings;
  generativeAISettings?: GenerativeAISettings;
}
export interface UpdateBotLocaleResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  localeName?: string;
  description?: string;
  nluIntentConfidenceThreshold?: number;
  voiceSettings?: VoiceSettings;
  botLocaleStatus?: BotLocaleStatus;
  failureReasons?: string[];
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  recommendedActions?: string[];
  generativeAISettings?: GenerativeAISettings;
}
export interface UpdateBotRecommendationRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  botRecommendationId: string | undefined;
  encryptionSetting: EncryptionSetting | undefined;
}
export interface UpdateBotRecommendationResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  botRecommendationStatus?: BotRecommendationStatus;
  botRecommendationId?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  transcriptSourceSetting?: TranscriptSourceSetting;
  encryptionSetting?: EncryptionSetting;
}
export interface UpdateExportRequest {
  exportId: string | undefined;
  filePassword?: string;
}
export interface UpdateExportResponse {
  exportId?: string;
  resourceSpecification?: ExportResourceSpecification;
  fileFormat?: ImportExportFileFormat;
  exportStatus?: ExportStatus;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface UpdateResourcePolicyRequest {
  resourceArn: string | undefined;
  policy: string | undefined;
  expectedRevisionId?: string;
}
export interface UpdateResourcePolicyResponse {
  resourceArn?: string;
  revisionId?: string;
}
export interface UpdateSlotTypeRequest {
  slotTypeId: string | undefined;
  slotTypeName: string | undefined;
  description?: string;
  slotTypeValues?: SlotTypeValue[];
  valueSelectionSetting?: SlotValueSelectionSetting;
  parentSlotTypeSignature?: string;
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  externalSourceSetting?: ExternalSourceSetting;
  compositeSlotTypeSetting?: CompositeSlotTypeSetting;
}
export interface UpdateSlotTypeResponse {
  slotTypeId?: string;
  slotTypeName?: string;
  description?: string;
  slotTypeValues?: SlotTypeValue[];
  valueSelectionSetting?: SlotValueSelectionSetting;
  parentSlotTypeSignature?: string;
  botId?: string;
  botVersion?: string;
  localeId?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  externalSourceSetting?: ExternalSourceSetting;
  compositeSlotTypeSetting?: CompositeSlotTypeSetting;
}
export interface UpdateTestSetRequest {
  testSetId: string | undefined;
  testSetName: string | undefined;
  description?: string;
}
export interface UpdateTestSetResponse {
  testSetId?: string;
  testSetName?: string;
  description?: string;
  modality?: TestSetModality;
  status?: TestSetStatus;
  roleArn?: string;
  numTurns?: number;
  storageLocation?: TestSetStorageLocation;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface RuntimeHintDetails {
  runtimeHintValues?: RuntimeHintValue[];
  subSlotHints?: Record<string, RuntimeHintDetails>;
}
export interface SlotValueOverride {
  shape?: SlotShape;
  value?: SlotValue;
  values?: SlotValueOverride[];
}
export interface IntentOverride {
  name?: string;
  slots?: Record<string, SlotValueOverride>;
}
export interface RuntimeHints {
  slotHints?: Record<string, Record<string, RuntimeHintDetails>>;
}
export interface UserTurnSlotOutput {
  value?: string;
  values?: UserTurnSlotOutput[];
  subSlots?: Record<string, UserTurnSlotOutput>;
}
export interface DialogState {
  dialogAction?: DialogAction;
  intent?: IntentOverride;
  sessionAttributes?: Record<string, string>;
}
export interface InputSessionStateSpecification {
  sessionAttributes?: Record<string, string>;
  activeContexts?: ActiveContext[];
  runtimeHints?: RuntimeHints;
}
export interface ConditionalBranch {
  name: string | undefined;
  condition: Condition | undefined;
  nextStep: DialogState | undefined;
  response?: ResponseSpecification;
}
export interface DefaultConditionalBranch {
  nextStep?: DialogState;
  response?: ResponseSpecification;
}
export interface UserTurnInputSpecification {
  utteranceInput: UtteranceInputSpecification | undefined;
  requestAttributes?: Record<string, string>;
  sessionState?: InputSessionStateSpecification;
}
export interface UserTurnIntentOutput {
  name: string | undefined;
  slots?: Record<string, UserTurnSlotOutput>;
}
export interface UserTurnOutputSpecification {
  intent: UserTurnIntentOutput | undefined;
  activeContexts?: ActiveContext[];
  transcript?: string;
}
export interface ConditionalSpecification {
  active: boolean | undefined;
  conditionalBranches: ConditionalBranch[] | undefined;
  defaultBranch: DefaultConditionalBranch | undefined;
}
export interface UserTurnSpecification {
  input: UserTurnInputSpecification | undefined;
  expected: UserTurnOutputSpecification | undefined;
}
export interface TurnSpecification {
  agentTurn?: AgentTurnSpecification;
  userTurn?: UserTurnSpecification;
}
export interface IntentClosingSetting {
  closingResponse?: ResponseSpecification;
  active?: boolean;
  nextStep?: DialogState;
  conditional?: ConditionalSpecification;
}
export interface TestSetTurnRecord {
  recordNumber: number | undefined;
  conversationId?: string;
  turnNumber?: number;
  turnSpecification: TurnSpecification | undefined;
}
export interface UserTurnResult {
  input: UserTurnInputSpecification | undefined;
  expectedOutput: UserTurnOutputSpecification | undefined;
  actualOutput?: UserTurnOutputSpecification;
  errorDetails?: ExecutionErrorDetails;
  endToEndResult?: TestResultMatchStatus;
  intentMatchResult?: TestResultMatchStatus;
  slotMatchResult?: TestResultMatchStatus;
  speechTranscriptionResult?: TestResultMatchStatus;
  conversationLevelResult?: ConversationLevelResultDetail;
}
export interface ListTestSetRecordsResponse {
  testSetRecords?: TestSetTurnRecord[];
  nextToken?: string;
}
export interface TestSetTurnResult {
  agent?: AgentTurnResult;
  user?: UserTurnResult;
}
export interface UtteranceLevelTestResultItem {
  recordNumber: number | undefined;
  conversationId?: string;
  turnResult: TestSetTurnResult | undefined;
}
export interface UtteranceLevelTestResults {
  items: UtteranceLevelTestResultItem[] | undefined;
}
export interface TestExecutionResultItems {
  overallTestResults?: OverallTestResults;
  conversationLevelTestResults?: ConversationLevelTestResults;
  intentClassificationTestResults?: IntentClassificationTestResults;
  intentLevelSlotResolutionTestResults?: IntentLevelSlotResolutionTestResults;
  utteranceLevelTestResults?: UtteranceLevelTestResults;
}
export interface ListTestExecutionResultItemsResponse {
  testExecutionResults?: TestExecutionResultItems;
  nextToken?: string;
}
export interface PostDialogCodeHookInvocationSpecification {
  successResponse?: ResponseSpecification;
  successNextStep?: DialogState;
  successConditional?: ConditionalSpecification;
  failureResponse?: ResponseSpecification;
  failureNextStep?: DialogState;
  failureConditional?: ConditionalSpecification;
  timeoutResponse?: ResponseSpecification;
  timeoutNextStep?: DialogState;
  timeoutConditional?: ConditionalSpecification;
}
export interface PostFulfillmentStatusSpecification {
  successResponse?: ResponseSpecification;
  failureResponse?: ResponseSpecification;
  timeoutResponse?: ResponseSpecification;
  successNextStep?: DialogState;
  successConditional?: ConditionalSpecification;
  failureNextStep?: DialogState;
  failureConditional?: ConditionalSpecification;
  timeoutNextStep?: DialogState;
  timeoutConditional?: ConditionalSpecification;
}
export interface DialogCodeHookInvocationSetting {
  enableCodeHookInvocation: boolean | undefined;
  active: boolean | undefined;
  invocationLabel?: string;
  postCodeHookSpecification:
    | PostDialogCodeHookInvocationSpecification
    | undefined;
}
export interface FulfillmentCodeHookSettings {
  enabled: boolean | undefined;
  postFulfillmentStatusSpecification?: PostFulfillmentStatusSpecification;
  fulfillmentUpdatesSpecification?: FulfillmentUpdatesSpecification;
  active?: boolean;
}
export interface InitialResponseSetting {
  initialResponse?: ResponseSpecification;
  nextStep?: DialogState;
  conditional?: ConditionalSpecification;
  codeHook?: DialogCodeHookInvocationSetting;
}
export interface SlotCaptureSetting {
  captureResponse?: ResponseSpecification;
  captureNextStep?: DialogState;
  captureConditional?: ConditionalSpecification;
  failureResponse?: ResponseSpecification;
  failureNextStep?: DialogState;
  failureConditional?: ConditionalSpecification;
  codeHook?: DialogCodeHookInvocationSetting;
  elicitationCodeHook?: ElicitationCodeHookInvocationSetting;
}
export interface SlotValueElicitationSetting {
  defaultValueSpecification?: SlotDefaultValueSpecification;
  slotConstraint: SlotConstraint | undefined;
  promptSpecification?: PromptSpecification;
  sampleUtterances?: SampleUtterance[];
  waitAndContinueSpecification?: WaitAndContinueSpecification;
  slotCaptureSetting?: SlotCaptureSetting;
  slotResolutionSetting?: SlotResolutionSetting;
}
export interface IntentConfirmationSetting {
  promptSpecification: PromptSpecification | undefined;
  declinationResponse?: ResponseSpecification;
  active?: boolean;
  confirmationResponse?: ResponseSpecification;
  confirmationNextStep?: DialogState;
  confirmationConditional?: ConditionalSpecification;
  declinationNextStep?: DialogState;
  declinationConditional?: ConditionalSpecification;
  failureResponse?: ResponseSpecification;
  failureNextStep?: DialogState;
  failureConditional?: ConditionalSpecification;
  codeHook?: DialogCodeHookInvocationSetting;
  elicitationCodeHook?: ElicitationCodeHookInvocationSetting;
}
export interface CreateSlotRequest {
  slotName: string | undefined;
  description?: string;
  slotTypeId?: string;
  valueElicitationSetting: SlotValueElicitationSetting | undefined;
  obfuscationSetting?: ObfuscationSetting;
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  intentId: string | undefined;
  multipleValuesSetting?: MultipleValuesSetting;
  subSlotSetting?: SubSlotSetting;
}
export interface CreateSlotResponse {
  slotId?: string;
  slotName?: string;
  description?: string;
  slotTypeId?: string;
  valueElicitationSetting?: SlotValueElicitationSetting;
  obfuscationSetting?: ObfuscationSetting;
  botId?: string;
  botVersion?: string;
  localeId?: string;
  intentId?: string;
  creationDateTime?: Date;
  multipleValuesSetting?: MultipleValuesSetting;
  subSlotSetting?: SubSlotSetting;
}
export interface DescribeSlotResponse {
  slotId?: string;
  slotName?: string;
  description?: string;
  slotTypeId?: string;
  valueElicitationSetting?: SlotValueElicitationSetting;
  obfuscationSetting?: ObfuscationSetting;
  botId?: string;
  botVersion?: string;
  localeId?: string;
  intentId?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  multipleValuesSetting?: MultipleValuesSetting;
  subSlotSetting?: SubSlotSetting;
}
export interface UpdateSlotRequest {
  slotId: string | undefined;
  slotName: string | undefined;
  description?: string;
  slotTypeId?: string;
  valueElicitationSetting: SlotValueElicitationSetting | undefined;
  obfuscationSetting?: ObfuscationSetting;
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  intentId: string | undefined;
  multipleValuesSetting?: MultipleValuesSetting;
  subSlotSetting?: SubSlotSetting;
}
export interface UpdateSlotResponse {
  slotId?: string;
  slotName?: string;
  description?: string;
  slotTypeId?: string;
  valueElicitationSetting?: SlotValueElicitationSetting;
  obfuscationSetting?: ObfuscationSetting;
  botId?: string;
  botVersion?: string;
  localeId?: string;
  intentId?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  multipleValuesSetting?: MultipleValuesSetting;
  subSlotSetting?: SubSlotSetting;
}
export interface CreateIntentRequest {
  intentName: string | undefined;
  description?: string;
  parentIntentSignature?: string;
  sampleUtterances?: SampleUtterance[];
  dialogCodeHook?: DialogCodeHookSettings;
  fulfillmentCodeHook?: FulfillmentCodeHookSettings;
  intentConfirmationSetting?: IntentConfirmationSetting;
  intentClosingSetting?: IntentClosingSetting;
  inputContexts?: InputContext[];
  outputContexts?: OutputContext[];
  kendraConfiguration?: KendraConfiguration;
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  initialResponseSetting?: InitialResponseSetting;
  qnAIntentConfiguration?: QnAIntentConfiguration;
}
export interface CreateIntentResponse {
  intentId?: string;
  intentName?: string;
  description?: string;
  parentIntentSignature?: string;
  sampleUtterances?: SampleUtterance[];
  dialogCodeHook?: DialogCodeHookSettings;
  fulfillmentCodeHook?: FulfillmentCodeHookSettings;
  intentConfirmationSetting?: IntentConfirmationSetting;
  intentClosingSetting?: IntentClosingSetting;
  inputContexts?: InputContext[];
  outputContexts?: OutputContext[];
  kendraConfiguration?: KendraConfiguration;
  botId?: string;
  botVersion?: string;
  localeId?: string;
  creationDateTime?: Date;
  initialResponseSetting?: InitialResponseSetting;
  qnAIntentConfiguration?: QnAIntentConfiguration;
}
export interface DescribeIntentResponse {
  intentId?: string;
  intentName?: string;
  description?: string;
  parentIntentSignature?: string;
  sampleUtterances?: SampleUtterance[];
  dialogCodeHook?: DialogCodeHookSettings;
  fulfillmentCodeHook?: FulfillmentCodeHookSettings;
  slotPriorities?: SlotPriority[];
  intentConfirmationSetting?: IntentConfirmationSetting;
  intentClosingSetting?: IntentClosingSetting;
  inputContexts?: InputContext[];
  outputContexts?: OutputContext[];
  kendraConfiguration?: KendraConfiguration;
  botId?: string;
  botVersion?: string;
  localeId?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  initialResponseSetting?: InitialResponseSetting;
  qnAIntentConfiguration?: QnAIntentConfiguration;
}
export interface UpdateIntentRequest {
  intentId: string | undefined;
  intentName: string | undefined;
  description?: string;
  parentIntentSignature?: string;
  sampleUtterances?: SampleUtterance[];
  dialogCodeHook?: DialogCodeHookSettings;
  fulfillmentCodeHook?: FulfillmentCodeHookSettings;
  slotPriorities?: SlotPriority[];
  intentConfirmationSetting?: IntentConfirmationSetting;
  intentClosingSetting?: IntentClosingSetting;
  inputContexts?: InputContext[];
  outputContexts?: OutputContext[];
  kendraConfiguration?: KendraConfiguration;
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  initialResponseSetting?: InitialResponseSetting;
  qnAIntentConfiguration?: QnAIntentConfiguration;
}
export interface UpdateIntentResponse {
  intentId?: string;
  intentName?: string;
  description?: string;
  parentIntentSignature?: string;
  sampleUtterances?: SampleUtterance[];
  dialogCodeHook?: DialogCodeHookSettings;
  fulfillmentCodeHook?: FulfillmentCodeHookSettings;
  slotPriorities?: SlotPriority[];
  intentConfirmationSetting?: IntentConfirmationSetting;
  intentClosingSetting?: IntentClosingSetting;
  inputContexts?: InputContext[];
  outputContexts?: OutputContext[];
  kendraConfiguration?: KendraConfiguration;
  botId?: string;
  botVersion?: string;
  localeId?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  initialResponseSetting?: InitialResponseSetting;
  qnAIntentConfiguration?: QnAIntentConfiguration;
}
export declare const DescribeBotRecommendationResponseFilterSensitiveLog: (
  obj: DescribeBotRecommendationResponse
) => any;
export declare const StartBotRecommendationRequestFilterSensitiveLog: (
  obj: StartBotRecommendationRequest
) => any;
export declare const StartBotRecommendationResponseFilterSensitiveLog: (
  obj: StartBotRecommendationResponse
) => any;
export declare const StartImportRequestFilterSensitiveLog: (
  obj: StartImportRequest
) => any;
export declare const UpdateBotRecommendationRequestFilterSensitiveLog: (
  obj: UpdateBotRecommendationRequest
) => any;
export declare const UpdateBotRecommendationResponseFilterSensitiveLog: (
  obj: UpdateBotRecommendationResponse
) => any;
export declare const UpdateExportRequestFilterSensitiveLog: (
  obj: UpdateExportRequest
) => any;
