import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { LexModelsV2ServiceException as __BaseException } from "./LexModelsV2ServiceException";
export interface ActiveContext {
  name: string | undefined;
}
export declare const AudioRecognitionStrategy: {
  readonly UseSlotValuesAsCustomVocabulary: "UseSlotValuesAsCustomVocabulary";
};
export type AudioRecognitionStrategy =
  (typeof AudioRecognitionStrategy)[keyof typeof AudioRecognitionStrategy];
export interface AdvancedRecognitionSetting {
  audioRecognitionStrategy?: AudioRecognitionStrategy;
}
export interface ExecutionErrorDetails {
  errorCode: string | undefined;
  errorMessage: string | undefined;
}
export interface AgentTurnResult {
  expectedAgentPrompt: string | undefined;
  actualAgentPrompt?: string;
  errorDetails?: ExecutionErrorDetails;
  actualElicitedSlot?: string;
  actualIntent?: string;
}
export interface AgentTurnSpecification {
  agentPrompt: string | undefined;
}
export declare const AggregatedUtterancesFilterName: {
  readonly Utterance: "Utterance";
};
export type AggregatedUtterancesFilterName =
  (typeof AggregatedUtterancesFilterName)[keyof typeof AggregatedUtterancesFilterName];
export declare const AggregatedUtterancesFilterOperator: {
  readonly Contains: "CO";
  readonly Equals: "EQ";
};
export type AggregatedUtterancesFilterOperator =
  (typeof AggregatedUtterancesFilterOperator)[keyof typeof AggregatedUtterancesFilterOperator];
export interface AggregatedUtterancesFilter {
  name: AggregatedUtterancesFilterName | undefined;
  values: string[] | undefined;
  operator: AggregatedUtterancesFilterOperator | undefined;
}
export declare const AggregatedUtterancesSortAttribute: {
  readonly HitCount: "HitCount";
  readonly MissedCount: "MissedCount";
};
export type AggregatedUtterancesSortAttribute =
  (typeof AggregatedUtterancesSortAttribute)[keyof typeof AggregatedUtterancesSortAttribute];
export declare const SortOrder: {
  readonly Ascending: "Ascending";
  readonly Descending: "Descending";
};
export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];
export interface AggregatedUtterancesSortBy {
  attribute: AggregatedUtterancesSortAttribute | undefined;
  order: SortOrder | undefined;
}
export interface AggregatedUtterancesSummary {
  utterance?: string;
  hitCount?: number;
  missedCount?: number;
  utteranceFirstRecordedInAggregationDuration?: Date;
  utteranceLastRecordedInAggregationDuration?: Date;
  containsDataFromDeletedResources?: boolean;
}
export interface AllowedInputTypes {
  allowAudioInput: boolean | undefined;
  allowDTMFInput: boolean | undefined;
}
export declare const AnalyticsInterval: {
  readonly OneDay: "OneDay";
  readonly OneHour: "OneHour";
};
export type AnalyticsInterval =
  (typeof AnalyticsInterval)[keyof typeof AnalyticsInterval];
export declare const AnalyticsBinByName: {
  readonly ConversationStartTime: "ConversationStartTime";
  readonly UtteranceTimestamp: "UtteranceTimestamp";
};
export type AnalyticsBinByName =
  (typeof AnalyticsBinByName)[keyof typeof AnalyticsBinByName];
export declare const AnalyticsSortOrder: {
  readonly Ascending: "Ascending";
  readonly Descending: "Descending";
};
export type AnalyticsSortOrder =
  (typeof AnalyticsSortOrder)[keyof typeof AnalyticsSortOrder];
export interface AnalyticsBinBySpecification {
  name: AnalyticsBinByName | undefined;
  interval: AnalyticsInterval | undefined;
  order?: AnalyticsSortOrder;
}
export interface AnalyticsBinKey {
  name?: AnalyticsBinByName;
  value?: number;
}
export declare const AnalyticsCommonFilterName: {
  readonly BotAliasId: "BotAliasId";
  readonly BotVersion: "BotVersion";
  readonly Channel: "Channel";
  readonly LocaleId: "LocaleId";
  readonly Modality: "Modality";
};
export type AnalyticsCommonFilterName =
  (typeof AnalyticsCommonFilterName)[keyof typeof AnalyticsCommonFilterName];
export declare const AnalyticsFilterOperator: {
  readonly Equals: "EQ";
  readonly GreaterThan: "GT";
  readonly LessThan: "LT";
};
export type AnalyticsFilterOperator =
  (typeof AnalyticsFilterOperator)[keyof typeof AnalyticsFilterOperator];
export declare const AnalyticsIntentField: {
  readonly IntentEndState: "IntentEndState";
  readonly IntentLevel: "IntentLevel";
  readonly IntentName: "IntentName";
};
export type AnalyticsIntentField =
  (typeof AnalyticsIntentField)[keyof typeof AnalyticsIntentField];
export declare const AnalyticsIntentFilterName: {
  readonly BotAliasId: "BotAliasId";
  readonly BotVersion: "BotVersion";
  readonly Channel: "Channel";
  readonly IntentEndState: "IntentEndState";
  readonly IntentName: "IntentName";
  readonly LocaleId: "LocaleId";
  readonly Modality: "Modality";
  readonly OriginatingRequestId: "OriginatingRequestId";
  readonly SessionId: "SessionId";
};
export type AnalyticsIntentFilterName =
  (typeof AnalyticsIntentFilterName)[keyof typeof AnalyticsIntentFilterName];
export interface AnalyticsIntentFilter {
  name: AnalyticsIntentFilterName | undefined;
  operator: AnalyticsFilterOperator | undefined;
  values: string[] | undefined;
}
export interface AnalyticsIntentGroupByKey {
  name?: AnalyticsIntentField;
  value?: string;
}
export interface AnalyticsIntentGroupBySpecification {
  name: AnalyticsIntentField | undefined;
}
export declare const AnalyticsIntentMetricName: {
  readonly Count: "Count";
  readonly Dropped: "Dropped";
  readonly Failure: "Failure";
  readonly Success: "Success";
  readonly Switched: "Switched";
};
export type AnalyticsIntentMetricName =
  (typeof AnalyticsIntentMetricName)[keyof typeof AnalyticsIntentMetricName];
export declare const AnalyticsMetricStatistic: {
  readonly Avg: "Avg";
  readonly Max: "Max";
  readonly Sum: "Sum";
};
export type AnalyticsMetricStatistic =
  (typeof AnalyticsMetricStatistic)[keyof typeof AnalyticsMetricStatistic];
export interface AnalyticsIntentMetric {
  name: AnalyticsIntentMetricName | undefined;
  statistic: AnalyticsMetricStatistic | undefined;
  order?: AnalyticsSortOrder;
}
export interface AnalyticsIntentMetricResult {
  name?: AnalyticsIntentMetricName;
  statistic?: AnalyticsMetricStatistic;
  value?: number;
}
export declare const AnalyticsNodeType: {
  readonly Exit: "Exit";
  readonly Inner: "Inner";
};
export type AnalyticsNodeType =
  (typeof AnalyticsNodeType)[keyof typeof AnalyticsNodeType];
export interface AnalyticsIntentNodeSummary {
  intentName?: string;
  intentPath?: string;
  intentCount?: number;
  intentLevel?: number;
  nodeType?: AnalyticsNodeType;
}
export interface AnalyticsIntentResult {
  binKeys?: AnalyticsBinKey[];
  groupByKeys?: AnalyticsIntentGroupByKey[];
  metricsResults?: AnalyticsIntentMetricResult[];
}
export declare const AnalyticsIntentStageField: {
  readonly IntentStageName: "IntentStageName";
  readonly SwitchedToIntent: "SwitchedToIntent";
};
export type AnalyticsIntentStageField =
  (typeof AnalyticsIntentStageField)[keyof typeof AnalyticsIntentStageField];
export declare const AnalyticsIntentStageFilterName: {
  readonly BotAliasId: "BotAliasId";
  readonly BotVersion: "BotVersion";
  readonly Channel: "Channel";
  readonly IntentName: "IntentName";
  readonly IntentStageName: "IntentStageName";
  readonly LocaleId: "LocaleId";
  readonly Modality: "Modality";
  readonly OriginatingRequestId: "OriginatingRequestId";
  readonly SessionId: "SessionId";
};
export type AnalyticsIntentStageFilterName =
  (typeof AnalyticsIntentStageFilterName)[keyof typeof AnalyticsIntentStageFilterName];
export interface AnalyticsIntentStageFilter {
  name: AnalyticsIntentStageFilterName | undefined;
  operator: AnalyticsFilterOperator | undefined;
  values: string[] | undefined;
}
export interface AnalyticsIntentStageGroupByKey {
  name?: AnalyticsIntentStageField;
  value?: string;
}
export interface AnalyticsIntentStageGroupBySpecification {
  name: AnalyticsIntentStageField | undefined;
}
export declare const AnalyticsIntentStageMetricName: {
  readonly Count: "Count";
  readonly Dropped: "Dropped";
  readonly Failed: "Failed";
  readonly Retry: "Retry";
  readonly Success: "Success";
};
export type AnalyticsIntentStageMetricName =
  (typeof AnalyticsIntentStageMetricName)[keyof typeof AnalyticsIntentStageMetricName];
export interface AnalyticsIntentStageMetric {
  name: AnalyticsIntentStageMetricName | undefined;
  statistic: AnalyticsMetricStatistic | undefined;
  order?: AnalyticsSortOrder;
}
export interface AnalyticsIntentStageMetricResult {
  name?: AnalyticsIntentStageMetricName;
  statistic?: AnalyticsMetricStatistic;
  value?: number;
}
export interface AnalyticsIntentStageResult {
  binKeys?: AnalyticsBinKey[];
  groupByKeys?: AnalyticsIntentStageGroupByKey[];
  metricsResults?: AnalyticsIntentStageMetricResult[];
}
export declare const AnalyticsModality: {
  readonly DTMF: "DTMF";
  readonly MultiMode: "MultiMode";
  readonly Speech: "Speech";
  readonly Text: "Text";
};
export type AnalyticsModality =
  (typeof AnalyticsModality)[keyof typeof AnalyticsModality];
export interface AnalyticsPathFilter {
  name: AnalyticsCommonFilterName | undefined;
  operator: AnalyticsFilterOperator | undefined;
  values: string[] | undefined;
}
export declare const AnalyticsSessionField: {
  readonly ConversationEndState: "ConversationEndState";
  readonly LocaleId: "LocaleId";
};
export type AnalyticsSessionField =
  (typeof AnalyticsSessionField)[keyof typeof AnalyticsSessionField];
export declare const AnalyticsSessionFilterName: {
  readonly BotAliasId: "BotAliasId";
  readonly BotVersion: "BotVersion";
  readonly Channel: "Channel";
  readonly ConversationEndState: "ConversationEndState";
  readonly Duration: "Duration";
  readonly IntentPath: "IntentPath";
  readonly LocaleId: "LocaleId";
  readonly Modality: "Modality";
  readonly OriginatingRequestId: "OriginatingRequestId";
  readonly SessionId: "SessionId";
};
export type AnalyticsSessionFilterName =
  (typeof AnalyticsSessionFilterName)[keyof typeof AnalyticsSessionFilterName];
export interface AnalyticsSessionFilter {
  name: AnalyticsSessionFilterName | undefined;
  operator: AnalyticsFilterOperator | undefined;
  values: string[] | undefined;
}
export interface AnalyticsSessionGroupByKey {
  name?: AnalyticsSessionField;
  value?: string;
}
export interface AnalyticsSessionGroupBySpecification {
  name: AnalyticsSessionField | undefined;
}
export declare const AnalyticsSessionMetricName: {
  readonly Concurrency: "Concurrency";
  readonly Count: "Count";
  readonly Dropped: "Dropped";
  readonly Duration: "Duration";
  readonly Failure: "Failure";
  readonly Success: "Success";
  readonly TurnsPerConversation: "TurnsPerConversation";
};
export type AnalyticsSessionMetricName =
  (typeof AnalyticsSessionMetricName)[keyof typeof AnalyticsSessionMetricName];
export interface AnalyticsSessionMetric {
  name: AnalyticsSessionMetricName | undefined;
  statistic: AnalyticsMetricStatistic | undefined;
  order?: AnalyticsSortOrder;
}
export interface AnalyticsSessionMetricResult {
  name?: AnalyticsSessionMetricName;
  statistic?: AnalyticsMetricStatistic;
  value?: number;
}
export interface AnalyticsSessionResult {
  binKeys?: AnalyticsBinKey[];
  groupByKeys?: AnalyticsSessionGroupByKey[];
  metricsResults?: AnalyticsSessionMetricResult[];
}
export declare const AnalyticsSessionSortByName: {
  readonly ConversationStartTime: "ConversationStartTime";
  readonly Duration: "Duration";
  readonly NumberOfTurns: "NumberOfTurns";
};
export type AnalyticsSessionSortByName =
  (typeof AnalyticsSessionSortByName)[keyof typeof AnalyticsSessionSortByName];
export declare const AnalyticsUtteranceAttributeName: {
  readonly LastUsedIntent: "LastUsedIntent";
};
export type AnalyticsUtteranceAttributeName =
  (typeof AnalyticsUtteranceAttributeName)[keyof typeof AnalyticsUtteranceAttributeName];
export interface AnalyticsUtteranceAttribute {
  name: AnalyticsUtteranceAttributeName | undefined;
}
export interface AnalyticsUtteranceAttributeResult {
  lastUsedIntent?: string;
}
export declare const AnalyticsUtteranceField: {
  readonly UtteranceState: "UtteranceState";
  readonly UtteranceText: "UtteranceText";
};
export type AnalyticsUtteranceField =
  (typeof AnalyticsUtteranceField)[keyof typeof AnalyticsUtteranceField];
export declare const AnalyticsUtteranceFilterName: {
  readonly BotAliasId: "BotAliasId";
  readonly BotVersion: "BotVersion";
  readonly Channel: "Channel";
  readonly LocaleId: "LocaleId";
  readonly Modality: "Modality";
  readonly OriginatingRequestId: "OriginatingRequestId";
  readonly SessionId: "SessionId";
  readonly UtteranceState: "UtteranceState";
  readonly UtteranceText: "UtteranceText";
};
export type AnalyticsUtteranceFilterName =
  (typeof AnalyticsUtteranceFilterName)[keyof typeof AnalyticsUtteranceFilterName];
export interface AnalyticsUtteranceFilter {
  name: AnalyticsUtteranceFilterName | undefined;
  operator: AnalyticsFilterOperator | undefined;
  values: string[] | undefined;
}
export interface AnalyticsUtteranceGroupByKey {
  name?: AnalyticsUtteranceField;
  value?: string;
}
export interface AnalyticsUtteranceGroupBySpecification {
  name: AnalyticsUtteranceField | undefined;
}
export declare const AnalyticsUtteranceMetricName: {
  readonly Count: "Count";
  readonly Detected: "Detected";
  readonly Missed: "Missed";
  readonly UtteranceTimestamp: "UtteranceTimestamp";
};
export type AnalyticsUtteranceMetricName =
  (typeof AnalyticsUtteranceMetricName)[keyof typeof AnalyticsUtteranceMetricName];
export interface AnalyticsUtteranceMetric {
  name: AnalyticsUtteranceMetricName | undefined;
  statistic: AnalyticsMetricStatistic | undefined;
  order?: AnalyticsSortOrder;
}
export interface AnalyticsUtteranceMetricResult {
  name?: AnalyticsUtteranceMetricName;
  statistic?: AnalyticsMetricStatistic;
  value?: number;
}
export interface AnalyticsUtteranceResult {
  binKeys?: AnalyticsBinKey[];
  groupByKeys?: AnalyticsUtteranceGroupByKey[];
  metricsResults?: AnalyticsUtteranceMetricResult[];
  attributeResults?: AnalyticsUtteranceAttributeResult[];
}
export declare const AnalyticsUtteranceSortByName: {
  readonly UtteranceTimestamp: "UtteranceTimestamp";
};
export type AnalyticsUtteranceSortByName =
  (typeof AnalyticsUtteranceSortByName)[keyof typeof AnalyticsUtteranceSortByName];
export interface AssociatedTranscript {
  transcript?: string;
}
export declare const AssociatedTranscriptFilterName: {
  readonly IntentId: "IntentId";
  readonly SlotTypeId: "SlotTypeId";
};
export type AssociatedTranscriptFilterName =
  (typeof AssociatedTranscriptFilterName)[keyof typeof AssociatedTranscriptFilterName];
export interface AssociatedTranscriptFilter {
  name: AssociatedTranscriptFilterName | undefined;
  values: string[] | undefined;
}
export interface AudioSpecification {
  maxLengthMs: number | undefined;
  endTimeoutMs: number | undefined;
}
export interface DTMFSpecification {
  maxLength: number | undefined;
  endTimeoutMs: number | undefined;
  deletionCharacter: string | undefined;
  endCharacter: string | undefined;
}
export interface AudioAndDTMFInputSpecification {
  startTimeoutMs: number | undefined;
  audioSpecification?: AudioSpecification;
  dtmfSpecification?: DTMFSpecification;
}
export interface S3BucketLogDestination {
  kmsKeyArn?: string;
  s3BucketArn: string | undefined;
  logPrefix: string | undefined;
}
export interface AudioLogDestination {
  s3Bucket: S3BucketLogDestination | undefined;
}
export interface AudioLogSetting {
  enabled: boolean | undefined;
  destination: AudioLogDestination | undefined;
  selectiveLoggingEnabled?: boolean;
}
export interface NewCustomVocabularyItem {
  phrase: string | undefined;
  weight?: number;
  displayAs?: string;
}
export interface BatchCreateCustomVocabularyItemRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  customVocabularyItemList: NewCustomVocabularyItem[] | undefined;
}
export declare const ErrorCode: {
  readonly DUPLICATE_INPUT: "DUPLICATE_INPUT";
  readonly INTERNAL_SERVER_FAILURE: "INTERNAL_SERVER_FAILURE";
  readonly RESOURCE_ALREADY_EXISTS: "RESOURCE_ALREADY_EXISTS";
  readonly RESOURCE_DOES_NOT_EXIST: "RESOURCE_DOES_NOT_EXIST";
};
export type ErrorCode = (typeof ErrorCode)[keyof typeof ErrorCode];
export interface FailedCustomVocabularyItem {
  itemId?: string;
  errorMessage?: string;
  errorCode?: ErrorCode;
}
export interface CustomVocabularyItem {
  itemId: string | undefined;
  phrase: string | undefined;
  weight?: number;
  displayAs?: string;
}
export interface BatchCreateCustomVocabularyItemResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  errors?: FailedCustomVocabularyItem[];
  resources?: CustomVocabularyItem[];
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  retryAfterSeconds?: number;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface CustomVocabularyEntryId {
  itemId: string | undefined;
}
export interface BatchDeleteCustomVocabularyItemRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  customVocabularyItemList: CustomVocabularyEntryId[] | undefined;
}
export interface BatchDeleteCustomVocabularyItemResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  errors?: FailedCustomVocabularyItem[];
  resources?: CustomVocabularyItem[];
}
export interface BatchUpdateCustomVocabularyItemRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  customVocabularyItemList: CustomVocabularyItem[] | undefined;
}
export interface BatchUpdateCustomVocabularyItemResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  errors?: FailedCustomVocabularyItem[];
  resources?: CustomVocabularyItem[];
}
export interface BedrockKnowledgeStoreConfiguration {
  bedrockKnowledgeBaseArn: string | undefined;
}
export interface BedrockModelSpecification {
  modelArn: string | undefined;
}
export interface BotAliasHistoryEvent {
  botVersion?: string;
  startDate?: Date;
  endDate?: Date;
}
export interface LambdaCodeHook {
  lambdaARN: string | undefined;
  codeHookInterfaceVersion: string | undefined;
}
export interface CodeHookSpecification {
  lambdaCodeHook: LambdaCodeHook | undefined;
}
export interface BotAliasLocaleSettings {
  enabled: boolean | undefined;
  codeHookSpecification?: CodeHookSpecification;
}
export declare const BotAliasReplicationStatus: {
  readonly Available: "Available";
  readonly Creating: "Creating";
  readonly Deleting: "Deleting";
  readonly Failed: "Failed";
  readonly Updating: "Updating";
};
export type BotAliasReplicationStatus =
  (typeof BotAliasReplicationStatus)[keyof typeof BotAliasReplicationStatus];
export interface BotAliasReplicaSummary {
  botAliasId?: string;
  botAliasReplicationStatus?: BotAliasReplicationStatus;
  botVersion?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  failureReasons?: string[];
}
export declare const BotAliasStatus: {
  readonly Available: "Available";
  readonly Creating: "Creating";
  readonly Deleting: "Deleting";
  readonly Failed: "Failed";
};
export type BotAliasStatus =
  (typeof BotAliasStatus)[keyof typeof BotAliasStatus];
export interface BotAliasSummary {
  botAliasId?: string;
  botAliasName?: string;
  description?: string;
  botVersion?: string;
  botAliasStatus?: BotAliasStatus;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface BotAliasTestExecutionTarget {
  botId: string | undefined;
  botAliasId: string | undefined;
  localeId: string | undefined;
}
export interface BotExportSpecification {
  botId: string | undefined;
  botVersion: string | undefined;
}
export declare const BotFilterName: {
  readonly BotName: "BotName";
  readonly BotType: "BotType";
};
export type BotFilterName = (typeof BotFilterName)[keyof typeof BotFilterName];
export declare const BotFilterOperator: {
  readonly Contains: "CO";
  readonly Equals: "EQ";
  readonly NotEquals: "NE";
};
export type BotFilterOperator =
  (typeof BotFilterOperator)[keyof typeof BotFilterOperator];
export interface BotFilter {
  name: BotFilterName | undefined;
  values: string[] | undefined;
  operator: BotFilterOperator | undefined;
}
export interface DataPrivacy {
  childDirected: boolean | undefined;
}
export interface BotImportSpecification {
  botName: string | undefined;
  roleArn: string | undefined;
  dataPrivacy: DataPrivacy | undefined;
  idleSessionTTLInSeconds?: number;
  botTags?: Record<string, string>;
  testBotAliasTags?: Record<string, string>;
}
export interface BotLocaleExportSpecification {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
}
export declare const BotLocaleFilterName: {
  readonly BotLocaleName: "BotLocaleName";
};
export type BotLocaleFilterName =
  (typeof BotLocaleFilterName)[keyof typeof BotLocaleFilterName];
export declare const BotLocaleFilterOperator: {
  readonly Contains: "CO";
  readonly Equals: "EQ";
};
export type BotLocaleFilterOperator =
  (typeof BotLocaleFilterOperator)[keyof typeof BotLocaleFilterOperator];
export interface BotLocaleFilter {
  name: BotLocaleFilterName | undefined;
  values: string[] | undefined;
  operator: BotLocaleFilterOperator | undefined;
}
export interface BotLocaleHistoryEvent {
  event: string | undefined;
  eventDate: Date | undefined;
}
export declare const VoiceEngine: {
  readonly Neural: "neural";
  readonly Standard: "standard";
};
export type VoiceEngine = (typeof VoiceEngine)[keyof typeof VoiceEngine];
export interface VoiceSettings {
  voiceId: string | undefined;
  engine?: VoiceEngine;
}
export interface BotLocaleImportSpecification {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  nluIntentConfidenceThreshold?: number;
  voiceSettings?: VoiceSettings;
}
export declare const BotLocaleSortAttribute: {
  readonly BotLocaleName: "BotLocaleName";
};
export type BotLocaleSortAttribute =
  (typeof BotLocaleSortAttribute)[keyof typeof BotLocaleSortAttribute];
export interface BotLocaleSortBy {
  attribute: BotLocaleSortAttribute | undefined;
  order: SortOrder | undefined;
}
export declare const BotLocaleStatus: {
  readonly Building: "Building";
  readonly Built: "Built";
  readonly Creating: "Creating";
  readonly Deleting: "Deleting";
  readonly Failed: "Failed";
  readonly Importing: "Importing";
  readonly NotBuilt: "NotBuilt";
  readonly Processing: "Processing";
  readonly ReadyExpressTesting: "ReadyExpressTesting";
};
export type BotLocaleStatus =
  (typeof BotLocaleStatus)[keyof typeof BotLocaleStatus];
export interface BotLocaleSummary {
  localeId?: string;
  localeName?: string;
  description?: string;
  botLocaleStatus?: BotLocaleStatus;
  lastUpdatedDateTime?: Date;
  lastBuildSubmittedDateTime?: Date;
}
export interface BotMember {
  botMemberId: string | undefined;
  botMemberName: string | undefined;
  botMemberAliasId: string | undefined;
  botMemberAliasName: string | undefined;
  botMemberVersion: string | undefined;
}
export interface IntentStatistics {
  discoveredIntentCount?: number;
}
export interface SlotTypeStatistics {
  discoveredSlotTypeCount?: number;
}
export interface BotRecommendationResultStatistics {
  intents?: IntentStatistics;
  slotTypes?: SlotTypeStatistics;
}
export interface BotRecommendationResults {
  botLocaleExportUrl?: string;
  associatedTranscriptsUrl?: string;
  statistics?: BotRecommendationResultStatistics;
}
export declare const BotRecommendationStatus: {
  readonly Available: "Available";
  readonly Deleted: "Deleted";
  readonly Deleting: "Deleting";
  readonly Downloading: "Downloading";
  readonly Failed: "Failed";
  readonly Processing: "Processing";
  readonly Stopped: "Stopped";
  readonly Stopping: "Stopping";
  readonly Updating: "Updating";
};
export type BotRecommendationStatus =
  (typeof BotRecommendationStatus)[keyof typeof BotRecommendationStatus];
export interface BotRecommendationSummary {
  botRecommendationStatus: BotRecommendationStatus | undefined;
  botRecommendationId: string | undefined;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export declare const BotReplicaStatus: {
  readonly Deleting: "Deleting";
  readonly Enabled: "Enabled";
  readonly Enabling: "Enabling";
  readonly Failed: "Failed";
};
export type BotReplicaStatus =
  (typeof BotReplicaStatus)[keyof typeof BotReplicaStatus];
export interface BotReplicaSummary {
  replicaRegion?: string;
  creationDateTime?: Date;
  botReplicaStatus?: BotReplicaStatus;
  failureReasons?: string[];
}
export declare const BotSortAttribute: {
  readonly BotName: "BotName";
};
export type BotSortAttribute =
  (typeof BotSortAttribute)[keyof typeof BotSortAttribute];
export interface BotSortBy {
  attribute: BotSortAttribute | undefined;
  order: SortOrder | undefined;
}
export declare const BotStatus: {
  readonly Available: "Available";
  readonly Creating: "Creating";
  readonly Deleting: "Deleting";
  readonly Failed: "Failed";
  readonly Importing: "Importing";
  readonly Inactive: "Inactive";
  readonly Updating: "Updating";
  readonly Versioning: "Versioning";
};
export type BotStatus = (typeof BotStatus)[keyof typeof BotStatus];
export declare const BotType: {
  readonly Bot: "Bot";
  readonly BotNetwork: "BotNetwork";
};
export type BotType = (typeof BotType)[keyof typeof BotType];
export interface BotSummary {
  botId?: string;
  botName?: string;
  description?: string;
  botStatus?: BotStatus;
  latestBotVersion?: string;
  lastUpdatedDateTime?: Date;
  botType?: BotType;
}
export interface BotVersionLocaleDetails {
  sourceBotVersion: string | undefined;
}
export declare const BotVersionReplicaSortAttribute: {
  readonly BotVersion: "BotVersion";
};
export type BotVersionReplicaSortAttribute =
  (typeof BotVersionReplicaSortAttribute)[keyof typeof BotVersionReplicaSortAttribute];
export interface BotVersionReplicaSortBy {
  attribute: BotVersionReplicaSortAttribute | undefined;
  order: SortOrder | undefined;
}
export declare const BotVersionReplicationStatus: {
  readonly Available: "Available";
  readonly Creating: "Creating";
  readonly Deleting: "Deleting";
  readonly Failed: "Failed";
};
export type BotVersionReplicationStatus =
  (typeof BotVersionReplicationStatus)[keyof typeof BotVersionReplicationStatus];
export interface BotVersionReplicaSummary {
  botVersion?: string;
  botVersionReplicationStatus?: BotVersionReplicationStatus;
  creationDateTime?: Date;
  failureReasons?: string[];
}
export declare const BotVersionSortAttribute: {
  readonly BotVersion: "BotVersion";
};
export type BotVersionSortAttribute =
  (typeof BotVersionSortAttribute)[keyof typeof BotVersionSortAttribute];
export interface BotVersionSortBy {
  attribute: BotVersionSortAttribute | undefined;
  order: SortOrder | undefined;
}
export interface BotVersionSummary {
  botName?: string;
  botVersion?: string;
  description?: string;
  botStatus?: BotStatus;
  creationDateTime?: Date;
}
export interface BuildBotLocaleRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
}
export interface BuildBotLocaleResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  botLocaleStatus?: BotLocaleStatus;
  lastBuildSubmittedDateTime?: Date;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class PreconditionFailedException extends __BaseException {
  readonly name: "PreconditionFailedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<PreconditionFailedException, __BaseException>
  );
}
export interface DescriptiveBotBuilderSpecification {
  enabled: boolean | undefined;
  bedrockModelSpecification?: BedrockModelSpecification;
}
export interface SampleUtteranceGenerationSpecification {
  enabled: boolean | undefined;
  bedrockModelSpecification?: BedrockModelSpecification;
}
export interface BuildtimeSettings {
  descriptiveBotBuilder?: DescriptiveBotBuilderSpecification;
  sampleUtteranceGeneration?: SampleUtteranceGenerationSpecification;
}
export declare const BuiltInIntentSortAttribute: {
  readonly IntentSignature: "IntentSignature";
};
export type BuiltInIntentSortAttribute =
  (typeof BuiltInIntentSortAttribute)[keyof typeof BuiltInIntentSortAttribute];
export interface BuiltInIntentSortBy {
  attribute: BuiltInIntentSortAttribute | undefined;
  order: SortOrder | undefined;
}
export interface BuiltInIntentSummary {
  intentSignature?: string;
  description?: string;
}
export declare const BuiltInSlotTypeSortAttribute: {
  readonly SlotTypeSignature: "SlotTypeSignature";
};
export type BuiltInSlotTypeSortAttribute =
  (typeof BuiltInSlotTypeSortAttribute)[keyof typeof BuiltInSlotTypeSortAttribute];
export interface BuiltInSlotTypeSortBy {
  attribute: BuiltInSlotTypeSortAttribute | undefined;
  order: SortOrder | undefined;
}
export interface BuiltInSlotTypeSummary {
  slotTypeSignature?: string;
  description?: string;
}
export interface Button {
  text: string | undefined;
  value: string | undefined;
}
export interface CloudWatchLogGroupLogDestination {
  cloudWatchLogGroupArn: string | undefined;
  logPrefix: string | undefined;
}
export interface SubSlotTypeComposition {
  name: string | undefined;
  slotTypeId: string | undefined;
}
export interface CompositeSlotTypeSetting {
  subSlots?: SubSlotTypeComposition[];
}
export interface Condition {
  expressionString: string | undefined;
}
export declare const DialogActionType: {
  readonly CloseIntent: "CloseIntent";
  readonly ConfirmIntent: "ConfirmIntent";
  readonly ElicitIntent: "ElicitIntent";
  readonly ElicitSlot: "ElicitSlot";
  readonly EndConversation: "EndConversation";
  readonly EvaluateConditional: "EvaluateConditional";
  readonly FulfillIntent: "FulfillIntent";
  readonly InvokeDialogCodeHook: "InvokeDialogCodeHook";
  readonly StartIntent: "StartIntent";
};
export type DialogActionType =
  (typeof DialogActionType)[keyof typeof DialogActionType];
export interface DialogAction {
  type: DialogActionType | undefined;
  slotToElicit?: string;
  suppressNextMessage?: boolean;
}
export declare const SlotShape: {
  readonly List: "List";
  readonly Scalar: "Scalar";
};
export type SlotShape = (typeof SlotShape)[keyof typeof SlotShape];
export interface SlotValue {
  interpretedValue?: string;
}
export interface CustomPayload {
  value: string | undefined;
}
export interface ImageResponseCard {
  title: string | undefined;
  subtitle?: string;
  imageUrl?: string;
  buttons?: Button[];
}
export interface PlainTextMessage {
  value: string | undefined;
}
export interface SSMLMessage {
  value: string | undefined;
}
export interface Message {
  plainTextMessage?: PlainTextMessage;
  customPayload?: CustomPayload;
  ssmlMessage?: SSMLMessage;
  imageResponseCard?: ImageResponseCard;
}
export interface MessageGroup {
  message: Message | undefined;
  variations?: Message[];
}
export interface ResponseSpecification {
  messageGroups: MessageGroup[] | undefined;
  allowInterrupt?: boolean;
}
export declare const ConversationEndState: {
  readonly Dropped: "Dropped";
  readonly Failure: "Failure";
  readonly Success: "Success";
};
export type ConversationEndState =
  (typeof ConversationEndState)[keyof typeof ConversationEndState];
export declare const TestResultMatchStatus: {
  readonly ExecutionError: "ExecutionError";
  readonly Matched: "Matched";
  readonly Mismatched: "Mismatched";
};
export type TestResultMatchStatus =
  (typeof TestResultMatchStatus)[keyof typeof TestResultMatchStatus];
export interface ConversationLevelIntentClassificationResultItem {
  intentName: string | undefined;
  matchResult: TestResultMatchStatus | undefined;
}
export interface ConversationLevelResultDetail {
  endToEndResult: TestResultMatchStatus | undefined;
  speechTranscriptionResult?: TestResultMatchStatus;
}
export interface ConversationLevelSlotResolutionResultItem {
  intentName: string | undefined;
  slotName: string | undefined;
  matchResult: TestResultMatchStatus | undefined;
}
export interface ConversationLevelTestResultItem {
  conversationId: string | undefined;
  endToEndResult: TestResultMatchStatus | undefined;
  speechTranscriptionResult?: TestResultMatchStatus;
  intentClassificationResults:
    | ConversationLevelIntentClassificationResultItem[]
    | undefined;
  slotResolutionResults:
    | ConversationLevelSlotResolutionResultItem[]
    | undefined;
}
export interface ConversationLevelTestResults {
  items: ConversationLevelTestResultItem[] | undefined;
}
export interface ConversationLevelTestResultsFilterBy {
  endToEndResult?: TestResultMatchStatus;
}
export declare const ConversationLogsInputModeFilter: {
  readonly Speech: "Speech";
  readonly Text: "Text";
};
export type ConversationLogsInputModeFilter =
  (typeof ConversationLogsInputModeFilter)[keyof typeof ConversationLogsInputModeFilter];
export interface ConversationLogsDataSourceFilterBy {
  startTime: Date | undefined;
  endTime: Date | undefined;
  inputMode: ConversationLogsInputModeFilter | undefined;
}
export interface ConversationLogsDataSource {
  botId: string | undefined;
  botAliasId: string | undefined;
  localeId: string | undefined;
  filter: ConversationLogsDataSourceFilterBy | undefined;
}
export interface TextLogDestination {
  cloudWatch: CloudWatchLogGroupLogDestination | undefined;
}
export interface TextLogSetting {
  enabled: boolean | undefined;
  destination: TextLogDestination | undefined;
  selectiveLoggingEnabled?: boolean;
}
export interface ConversationLogSettings {
  textLogSettings?: TextLogSetting[];
  audioLogSettings?: AudioLogSetting[];
}
export interface CreateBotRequest {
  botName: string | undefined;
  description?: string;
  roleArn: string | undefined;
  dataPrivacy: DataPrivacy | undefined;
  idleSessionTTLInSeconds: number | undefined;
  botTags?: Record<string, string>;
  testBotAliasTags?: Record<string, string>;
  botType?: BotType;
  botMembers?: BotMember[];
}
export interface CreateBotResponse {
  botId?: string;
  botName?: string;
  description?: string;
  roleArn?: string;
  dataPrivacy?: DataPrivacy;
  idleSessionTTLInSeconds?: number;
  botStatus?: BotStatus;
  creationDateTime?: Date;
  botTags?: Record<string, string>;
  testBotAliasTags?: Record<string, string>;
  botType?: BotType;
  botMembers?: BotMember[];
}
export interface SentimentAnalysisSettings {
  detectSentiment: boolean | undefined;
}
export interface CreateBotAliasRequest {
  botAliasName: string | undefined;
  description?: string;
  botVersion?: string;
  botAliasLocaleSettings?: Record<string, BotAliasLocaleSettings>;
  conversationLogSettings?: ConversationLogSettings;
  sentimentAnalysisSettings?: SentimentAnalysisSettings;
  botId: string | undefined;
  tags?: Record<string, string>;
}
export interface CreateBotAliasResponse {
  botAliasId?: string;
  botAliasName?: string;
  description?: string;
  botVersion?: string;
  botAliasLocaleSettings?: Record<string, BotAliasLocaleSettings>;
  conversationLogSettings?: ConversationLogSettings;
  sentimentAnalysisSettings?: SentimentAnalysisSettings;
  botAliasStatus?: BotAliasStatus;
  botId?: string;
  creationDateTime?: Date;
  tags?: Record<string, string>;
}
export interface SlotResolutionImprovementSpecification {
  enabled: boolean | undefined;
  bedrockModelSpecification?: BedrockModelSpecification;
}
export interface RuntimeSettings {
  slotResolutionImprovement?: SlotResolutionImprovementSpecification;
}
export interface GenerativeAISettings {
  runtimeSettings?: RuntimeSettings;
  buildtimeSettings?: BuildtimeSettings;
}
export interface CreateBotLocaleRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  description?: string;
  nluIntentConfidenceThreshold: number | undefined;
  voiceSettings?: VoiceSettings;
  generativeAISettings?: GenerativeAISettings;
}
export interface CreateBotLocaleResponse {
  botId?: string;
  botVersion?: string;
  localeName?: string;
  localeId?: string;
  description?: string;
  nluIntentConfidenceThreshold?: number;
  voiceSettings?: VoiceSettings;
  botLocaleStatus?: BotLocaleStatus;
  creationDateTime?: Date;
  generativeAISettings?: GenerativeAISettings;
}
export interface CreateBotReplicaRequest {
  botId: string | undefined;
  replicaRegion: string | undefined;
}
export interface CreateBotReplicaResponse {
  botId?: string;
  replicaRegion?: string;
  sourceRegion?: string;
  creationDateTime?: Date;
  botReplicaStatus?: BotReplicaStatus;
}
export interface CreateBotVersionRequest {
  botId: string | undefined;
  description?: string;
  botVersionLocaleSpecification:
    | Record<string, BotVersionLocaleDetails>
    | undefined;
}
export interface CreateBotVersionResponse {
  botId?: string;
  description?: string;
  botVersion?: string;
  botVersionLocaleSpecification?: Record<string, BotVersionLocaleDetails>;
  botStatus?: BotStatus;
  creationDateTime?: Date;
}
export declare const ImportExportFileFormat: {
  readonly CSV: "CSV";
  readonly LexJson: "LexJson";
  readonly TSV: "TSV";
};
export type ImportExportFileFormat =
  (typeof ImportExportFileFormat)[keyof typeof ImportExportFileFormat];
export interface CustomVocabularyExportSpecification {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
}
export interface TestSetExportSpecification {
  testSetId: string | undefined;
}
export interface ExportResourceSpecification {
  botExportSpecification?: BotExportSpecification;
  botLocaleExportSpecification?: BotLocaleExportSpecification;
  customVocabularyExportSpecification?: CustomVocabularyExportSpecification;
  testSetExportSpecification?: TestSetExportSpecification;
}
export interface CreateExportRequest {
  resourceSpecification: ExportResourceSpecification | undefined;
  fileFormat: ImportExportFileFormat | undefined;
  filePassword?: string;
}
export declare const ExportStatus: {
  readonly Completed: "Completed";
  readonly Deleting: "Deleting";
  readonly Failed: "Failed";
  readonly InProgress: "InProgress";
};
export type ExportStatus = (typeof ExportStatus)[keyof typeof ExportStatus];
export interface CreateExportResponse {
  exportId?: string;
  resourceSpecification?: ExportResourceSpecification;
  fileFormat?: ImportExportFileFormat;
  exportStatus?: ExportStatus;
  creationDateTime?: Date;
}
export interface DialogCodeHookSettings {
  enabled: boolean | undefined;
}
export interface FulfillmentStartResponseSpecification {
  delayInSeconds: number | undefined;
  messageGroups: MessageGroup[] | undefined;
  allowInterrupt?: boolean;
}
export interface FulfillmentUpdateResponseSpecification {
  frequencyInSeconds: number | undefined;
  messageGroups: MessageGroup[] | undefined;
  allowInterrupt?: boolean;
}
export interface FulfillmentUpdatesSpecification {
  active: boolean | undefined;
  startResponse?: FulfillmentStartResponseSpecification;
  updateResponse?: FulfillmentUpdateResponseSpecification;
  timeoutInSeconds?: number;
}
export interface InputContext {
  name: string | undefined;
}
export interface ElicitationCodeHookInvocationSetting {
  enableCodeHookInvocation: boolean | undefined;
  invocationLabel?: string;
}
export declare const MessageSelectionStrategy: {
  readonly Ordered: "Ordered";
  readonly Random: "Random";
};
export type MessageSelectionStrategy =
  (typeof MessageSelectionStrategy)[keyof typeof MessageSelectionStrategy];
export declare const PromptAttempt: {
  readonly Initial: "Initial";
  readonly Retry1: "Retry1";
  readonly Retry2: "Retry2";
  readonly Retry3: "Retry3";
  readonly Retry4: "Retry4";
  readonly Retry5: "Retry5";
};
export type PromptAttempt = (typeof PromptAttempt)[keyof typeof PromptAttempt];
export interface TextInputSpecification {
  startTimeoutMs: number | undefined;
}
export interface PromptAttemptSpecification {
  allowInterrupt?: boolean;
  allowedInputTypes: AllowedInputTypes | undefined;
  audioAndDTMFInputSpecification?: AudioAndDTMFInputSpecification;
  textInputSpecification?: TextInputSpecification;
}
export interface PromptSpecification {
  messageGroups: MessageGroup[] | undefined;
  maxRetries: number | undefined;
  allowInterrupt?: boolean;
  messageSelectionStrategy?: MessageSelectionStrategy;
  promptAttemptsSpecification?: Partial<
    Record<PromptAttempt, PromptAttemptSpecification>
  >;
}
export interface KendraConfiguration {
  kendraIndex: string | undefined;
  queryFilterStringEnabled?: boolean;
  queryFilterString?: string;
}
export interface OutputContext {
  name: string | undefined;
  timeToLiveInSeconds: number | undefined;
  turnsToLive: number | undefined;
}
export interface QnAKendraConfiguration {
  kendraIndex: string | undefined;
  queryFilterStringEnabled?: boolean;
  queryFilterString?: string;
  exactResponse?: boolean;
}
export interface ExactResponseFields {
  questionField: string | undefined;
  answerField: string | undefined;
}
export interface OpensearchConfiguration {
  domainEndpoint: string | undefined;
  indexName: string | undefined;
  exactResponse?: boolean;
  exactResponseFields?: ExactResponseFields;
  includeFields?: string[];
}
export interface DataSourceConfiguration {
  opensearchConfiguration?: OpensearchConfiguration;
  kendraConfiguration?: QnAKendraConfiguration;
  bedrockKnowledgeStoreConfiguration?: BedrockKnowledgeStoreConfiguration;
}
export interface QnAIntentConfiguration {
  dataSourceConfiguration?: DataSourceConfiguration;
  bedrockModelConfiguration?: BedrockModelSpecification;
}
export interface SampleUtterance {
  utterance: string | undefined;
}
export interface CreateResourcePolicyRequest {
  resourceArn: string | undefined;
  policy: string | undefined;
}
export interface CreateResourcePolicyResponse {
  resourceArn?: string;
  revisionId?: string;
}
export declare const Effect: {
  readonly Allow: "Allow";
  readonly Deny: "Deny";
};
export type Effect = (typeof Effect)[keyof typeof Effect];
export interface Principal {
  service?: string;
  arn?: string;
}
export interface CreateResourcePolicyStatementRequest {
  resourceArn: string | undefined;
  statementId: string | undefined;
  effect: Effect | undefined;
  principal: Principal[] | undefined;
  action: string[] | undefined;
  condition?: Record<string, Record<string, string>>;
  expectedRevisionId?: string;
}
export interface CreateResourcePolicyStatementResponse {
  resourceArn?: string;
  revisionId?: string;
}
export interface MultipleValuesSetting {
  allowMultipleValues?: boolean;
}
export declare const ObfuscationSettingType: {
  readonly DefaultObfuscation: "DefaultObfuscation";
  readonly None: "None";
};
export type ObfuscationSettingType =
  (typeof ObfuscationSettingType)[keyof typeof ObfuscationSettingType];
export interface ObfuscationSetting {
  obfuscationSettingType: ObfuscationSettingType | undefined;
}
export interface SlotDefaultValue {
  defaultValue: string | undefined;
}
export interface SlotDefaultValueSpecification {
  defaultValueList: SlotDefaultValue[] | undefined;
}
export interface StillWaitingResponseSpecification {
  messageGroups: MessageGroup[] | undefined;
  frequencyInSeconds: number | undefined;
  timeoutInSeconds: number | undefined;
  allowInterrupt?: boolean;
}
export interface WaitAndContinueSpecification {
  waitingResponse: ResponseSpecification | undefined;
  continueResponse: ResponseSpecification | undefined;
  stillWaitingResponse?: StillWaitingResponseSpecification;
  active?: boolean;
}
export interface SubSlotValueElicitationSetting {
  defaultValueSpecification?: SlotDefaultValueSpecification;
  promptSpecification: PromptSpecification | undefined;
  sampleUtterances?: SampleUtterance[];
  waitAndContinueSpecification?: WaitAndContinueSpecification;
}
export interface Specifications {
  slotTypeId: string | undefined;
  valueElicitationSetting: SubSlotValueElicitationSetting | undefined;
}
export interface SubSlotSetting {
  expression?: string;
  slotSpecifications?: Record<string, Specifications>;
}
export declare const SlotConstraint: {
  readonly Optional: "Optional";
  readonly Required: "Required";
};
export type SlotConstraint =
  (typeof SlotConstraint)[keyof typeof SlotConstraint];
export declare const SlotResolutionStrategy: {
  readonly Default: "Default";
  readonly EnhancedFallback: "EnhancedFallback";
};
export type SlotResolutionStrategy =
  (typeof SlotResolutionStrategy)[keyof typeof SlotResolutionStrategy];
export interface SlotResolutionSetting {
  slotResolutionStrategy: SlotResolutionStrategy | undefined;
}
export interface GrammarSlotTypeSource {
  s3BucketName: string | undefined;
  s3ObjectKey: string | undefined;
  kmsKeyArn?: string;
}
export interface GrammarSlotTypeSetting {
  source?: GrammarSlotTypeSource;
}
export interface ExternalSourceSetting {
  grammarSlotTypeSetting?: GrammarSlotTypeSetting;
}
export interface SampleValue {
  value: string | undefined;
}
export interface SlotTypeValue {
  sampleValue?: SampleValue;
  synonyms?: SampleValue[];
}
export interface SlotValueRegexFilter {
  pattern: string | undefined;
}
export declare const SlotValueResolutionStrategy: {
  readonly Concatenation: "Concatenation";
  readonly OriginalValue: "OriginalValue";
  readonly TopResolution: "TopResolution";
};
export type SlotValueResolutionStrategy =
  (typeof SlotValueResolutionStrategy)[keyof typeof SlotValueResolutionStrategy];
export interface SlotValueSelectionSetting {
  resolutionStrategy: SlotValueResolutionStrategy | undefined;
  regexFilter?: SlotValueRegexFilter;
  advancedRecognitionSetting?: AdvancedRecognitionSetting;
}
export interface CreateSlotTypeRequest {
  slotTypeName: string | undefined;
  description?: string;
  slotTypeValues?: SlotTypeValue[];
  valueSelectionSetting?: SlotValueSelectionSetting;
  parentSlotTypeSignature?: string;
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  externalSourceSetting?: ExternalSourceSetting;
  compositeSlotTypeSetting?: CompositeSlotTypeSetting;
}
export interface CreateSlotTypeResponse {
  slotTypeId?: string;
  slotTypeName?: string;
  description?: string;
  slotTypeValues?: SlotTypeValue[];
  valueSelectionSetting?: SlotValueSelectionSetting;
  parentSlotTypeSignature?: string;
  botId?: string;
  botVersion?: string;
  localeId?: string;
  creationDateTime?: Date;
  externalSourceSetting?: ExternalSourceSetting;
  compositeSlotTypeSetting?: CompositeSlotTypeSetting;
}
export interface TestSetDiscrepancyReportBotAliasTarget {
  botId: string | undefined;
  botAliasId: string | undefined;
  localeId: string | undefined;
}
export interface TestSetDiscrepancyReportResourceTarget {
  botAliasTarget?: TestSetDiscrepancyReportBotAliasTarget;
}
export interface CreateTestSetDiscrepancyReportRequest {
  testSetId: string | undefined;
  target: TestSetDiscrepancyReportResourceTarget | undefined;
}
export interface CreateTestSetDiscrepancyReportResponse {
  testSetDiscrepancyReportId?: string;
  creationDateTime?: Date;
  testSetId?: string;
  target?: TestSetDiscrepancyReportResourceTarget;
}
export interface CreateUploadUrlRequest {}
export interface CreateUploadUrlResponse {
  importId?: string;
  uploadUrl?: string;
}
export interface CustomVocabularyImportSpecification {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
}
export declare const CustomVocabularyStatus: {
  readonly Creating: "Creating";
  readonly Deleting: "Deleting";
  readonly Exporting: "Exporting";
  readonly Importing: "Importing";
  readonly Ready: "Ready";
};
export type CustomVocabularyStatus =
  (typeof CustomVocabularyStatus)[keyof typeof CustomVocabularyStatus];
export interface DateRangeFilter {
  startDateTime: Date | undefined;
  endDateTime: Date | undefined;
}
export interface DeleteBotRequest {
  botId: string | undefined;
  skipResourceInUseCheck?: boolean;
}
export interface DeleteBotResponse {
  botId?: string;
  botStatus?: BotStatus;
}
export interface DeleteBotAliasRequest {
  botAliasId: string | undefined;
  botId: string | undefined;
  skipResourceInUseCheck?: boolean;
}
export interface DeleteBotAliasResponse {
  botAliasId?: string;
  botId?: string;
  botAliasStatus?: BotAliasStatus;
}
export interface DeleteBotLocaleRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
}
export interface DeleteBotLocaleResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  botLocaleStatus?: BotLocaleStatus;
}
export interface DeleteBotReplicaRequest {
  botId: string | undefined;
  replicaRegion: string | undefined;
}
export interface DeleteBotReplicaResponse {
  botId?: string;
  replicaRegion?: string;
  botReplicaStatus?: BotReplicaStatus;
}
export interface DeleteBotVersionRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  skipResourceInUseCheck?: boolean;
}
export interface DeleteBotVersionResponse {
  botId?: string;
  botVersion?: string;
  botStatus?: BotStatus;
}
export interface DeleteCustomVocabularyRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
}
export interface DeleteCustomVocabularyResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  customVocabularyStatus?: CustomVocabularyStatus;
}
export interface DeleteExportRequest {
  exportId: string | undefined;
}
export interface DeleteExportResponse {
  exportId?: string;
  exportStatus?: ExportStatus;
}
export interface DeleteImportRequest {
  importId: string | undefined;
}
export declare const ImportStatus: {
  readonly Completed: "Completed";
  readonly Deleting: "Deleting";
  readonly Failed: "Failed";
  readonly InProgress: "InProgress";
};
export type ImportStatus = (typeof ImportStatus)[keyof typeof ImportStatus];
export interface DeleteImportResponse {
  importId?: string;
  importStatus?: ImportStatus;
}
export interface DeleteIntentRequest {
  intentId: string | undefined;
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
}
export interface DeleteResourcePolicyRequest {
  resourceArn: string | undefined;
  expectedRevisionId?: string;
}
export interface DeleteResourcePolicyResponse {
  resourceArn?: string;
  revisionId?: string;
}
export interface DeleteResourcePolicyStatementRequest {
  resourceArn: string | undefined;
  statementId: string | undefined;
  expectedRevisionId?: string;
}
export interface DeleteResourcePolicyStatementResponse {
  resourceArn?: string;
  revisionId?: string;
}
export interface DeleteSlotRequest {
  slotId: string | undefined;
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  intentId: string | undefined;
}
export interface DeleteSlotTypeRequest {
  slotTypeId: string | undefined;
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  skipResourceInUseCheck?: boolean;
}
export interface DeleteTestSetRequest {
  testSetId: string | undefined;
}
export interface DeleteUtterancesRequest {
  botId: string | undefined;
  localeId?: string;
  sessionId?: string;
}
export interface DeleteUtterancesResponse {}
export interface DescribeBotRequest {
  botId: string | undefined;
}
export interface DescribeBotResponse {
  botId?: string;
  botName?: string;
  description?: string;
  roleArn?: string;
  dataPrivacy?: DataPrivacy;
  idleSessionTTLInSeconds?: number;
  botStatus?: BotStatus;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  botType?: BotType;
  botMembers?: BotMember[];
  failureReasons?: string[];
}
export interface DescribeBotAliasRequest {
  botAliasId: string | undefined;
  botId: string | undefined;
}
export interface ParentBotNetwork {
  botId: string | undefined;
  botVersion: string | undefined;
}
export interface DescribeBotAliasResponse {
  botAliasId?: string;
  botAliasName?: string;
  description?: string;
  botVersion?: string;
  botAliasLocaleSettings?: Record<string, BotAliasLocaleSettings>;
  conversationLogSettings?: ConversationLogSettings;
  sentimentAnalysisSettings?: SentimentAnalysisSettings;
  botAliasHistoryEvents?: BotAliasHistoryEvent[];
  botAliasStatus?: BotAliasStatus;
  botId?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  parentBotNetworks?: ParentBotNetwork[];
}
export interface DescribeBotLocaleRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
}
export interface DescribeBotLocaleResponse {
  botId?: string;
  botVersion?: string;
  localeId?: string;
  localeName?: string;
  description?: string;
  nluIntentConfidenceThreshold?: number;
  voiceSettings?: VoiceSettings;
  intentsCount?: number;
  slotTypesCount?: number;
  botLocaleStatus?: BotLocaleStatus;
  failureReasons?: string[];
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  lastBuildSubmittedDateTime?: Date;
  botLocaleHistoryEvents?: BotLocaleHistoryEvent[];
  recommendedActions?: string[];
  generativeAISettings?: GenerativeAISettings;
}
export interface DescribeBotRecommendationRequest {
  botId: string | undefined;
  botVersion: string | undefined;
  localeId: string | undefined;
  botRecommendationId: string | undefined;
}
export interface EncryptionSetting {
  kmsKeyArn?: string;
  botLocaleExportPassword?: string;
  associatedTranscriptsPassword?: string;
}
export declare const CreateExportRequestFilterSensitiveLog: (
  obj: CreateExportRequest
) => any;
export declare const EncryptionSettingFilterSensitiveLog: (
  obj: EncryptionSetting
) => any;
